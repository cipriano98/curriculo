var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AgencyController.html",[0,0.958,1,1.731]],["body/controllers/AgencyController.html",[0,1.405,1,3.005,2,1.574,3,0.568,4,0.568,5,0.479,6,3.429,7,2.538,8,4.204,9,0.764,10,0.042,11,0.764,12,4.204,13,0.479,14,0.315,15,0.032,16,0.032,17,0.032,18,0.032,19,0.032]],["title/modules/AgencyModule.html",[20,0.674,21,1.523]],["body/modules/AgencyModule.html",[1,3.068,2,1.268,3,0.458,4,0.458,5,0.386,9,0.924,10,0.044,11,0.615,13,0.386,14,0.254,15,0.026,16,0.026,17,0.026,18,0.026,19,0.026,20,1.132,21,2.946,22,1.595,23,1.42,24,2.044,25,2.044,26,1.799,27,2.558,28,2.044,29,2.762,30,2.762,31,2.535,32,1.799,33,2.629,34,2.044,35,1.799,36,3.386,37,1.799,38,3.386,39,3.386,40,2.044,41,2.044]],["title/injectables/AgencyService.html",[31,1.35,42,0.761]],["body/injectables/AgencyService.html",[3,0.215,4,0.215,5,0.181,9,0.458,10,0.046,11,0.289,13,0.181,14,0.119,15,0.012,16,0.012,17,0.012,18,0.012,19,0.012,31,1.188,32,1.048,37,0.844,42,0.669,43,0.749,44,1.296,45,0.844,46,1.34,47,1.751,48,1.103,49,1.296,50,1.889,51,1.103,52,2.62,53,1.993,54,2.057,55,1.522,56,1.103,57,1.103,58,2.057,59,2.068,60,2.057,61,2.557,62,1.649,63,1.296,64,1.296,65,1.296,66,1.296,67,1.103,68,1.296,69,1.103,70,1.296,71,1.296,72,1.296,73,1.296,74,1.296,75,1.296,76,1.751,77,1.751,78,1.889,79,2.057,80,1.751,81,1.751,82,1.296,83,1.188,84,1.296,85,1.296,86,1.296,87,1.296,88,2.057,89,1.522,90,2.349,91,1.296,92,1.296,93,1.296,94,0.844,95,2.702,96,2.478,97,2.702,98,1.103,99,1.103,100,1.296,101,2.176,102,1.296,103,1.296,104,1.296,105,1.751,106,1.296,107,1.103,108,1.296,109,2.057,110,1.522,111,1.296,112,2.057,113,1.296,114,2.057,115,2.057,116,1.058,117,2.057,118,2.057,119,1.751,120,2.057,121,1.296,122,1.296,123,1.296,124,2.176,125,1.296,126,1.296,127,1.296,128,1.296,129,1.296,130,2.057,131,1.296,132,2.057,133,1.296,134,2.057,135,1.296,136,2.057,137,1.296,138,2.557,139,2.057,140,1.296,141,1.296,142,1.296]],["title/modules/AppModule.html",[20,0.674,143,1.523]],["body/modules/AppModule.html",[2,1.061,3,0.383,4,0.383,5,0.323,9,0.994,10,0.045,11,0.515,13,0.323,14,0.212,15,0.022,16,0.022,17,0.022,18,0.022,19,0.022,20,1.037,21,2.719,22,1.335,23,1.189,24,1.711,25,1.711,26,1.506,27,2.342,28,1.711,31,2.411,32,1.71,33,2.337,34,1.711,35,1.506,37,1.506,40,2.337,41,1.711,83,1.335,143,2.995,144,2.312,145,2.834,146,2.312,147,2.719,148,2.719,149,2.834,150,2.661,151,3.87,152,1.968,153,2.834,154,2.312,155,3.87,156,2.834,157,2.834,158,2.834,159,2.834,160,2.834,161,2.834,162,2.834,163,2.834,164,2.834]],["title/controllers/AuthController.html",[0,0.958,165,1.731]],["body/controllers/AuthController.html",[0,0.647,2,0.725,3,0.262,4,0.262,5,0.221,7,1.169,9,0.646,10,0.045,11,0.352,13,0.221,14,0.145,15,0.015,16,0.015,17,0.015,18,0.015,19,0.015,45,1.029,46,1.029,50,1.884,52,2.396,53,1.79,55,1.775,62,1.607,76,1.345,77,2.042,78,1.665,80,1.345,81,1.345,83,0.912,89,2.396,90,2.818,94,2.108,95,3.118,96,1.345,97,1.345,98,1.345,99,1.345,105,1.345,107,3.118,110,1.775,165,1.775,166,1.345,167,0.514,168,1.101,169,2.398,170,2.398,171,1.937,172,2.042,173,2.94,174,1.101,175,1.101,176,1.937,177,1.562,178,1.562,179,1.385,180,2.576,181,2.199,182,1.101,183,1.58,184,2.94,185,1.937,186,2.899,187,1.58,188,1.937,189,1.491,190,1.937,191,1.029,192,1.029,193,1.345,194,1.029,195,1.58,196,1.58,197,1.937,198,1.937,199,1.58,200,2.94,201,1.937,202,1.937,203,1.58,204,1.937,205,1.937,206,1.937,207,1.937,208,1.937,209,1.937,210,1.937,211,1.937,212,1.937,213,1.937,214,1.937,215,1.58,216,1.937,217,1.937,218,1.937,219,1.937,220,1.937,221,1.937,222,3.968,223,1.937,224,3.48,225,1.58,226,1.58,227,1.937,228,1.937,229,1.937,230,1.937,231,1.937,232,1.937,233,2.94,234,1.937,235,1.937,236,1.937,237,2.398,238,1.58,239,1.58,240,2.576,241,1.937,242,2.94,243,2.94,244,2.94,245,2.94,246,1.937,247,1.937,248,1.345,249,1.58,250,1.58,251,1.937,252,1.937,253,1.345,254,1.937,255,1.937,256,1.937,257,1.937,258,2.94,259,2.398,260,2.94,261,2.94,262,1.937,263,1.937,264,2.398,265,1.937]],["title/interfaces/BadRequest.html",[266,1.523,267,1.731]],["body/interfaces/BadRequest.html",[3,0.509,4,0.509,5,0.429,10,0.044,13,0.429,15,0.029,16,0.029,17,0.029,18,0.029,19,0.029,59,2.686,94,2.938,101,3.839,167,0.999,179,2.488,266,2.474,267,3.052,268,3.071,269,3.071,270,3.071,271,4.656,272,2.193]],["title/controllers/HealthController.html",[0,0.958,150,1.731]],["body/controllers/HealthController.html",[0,1.025,2,1.148,3,0.414,4,0.414,5,0.349,7,1.852,9,0.742,10,0.045,11,0.557,13,0.349,14,0.23,15,0.023,16,0.023,17,0.023,18,0.023,19,0.023,23,1.287,45,1.63,46,2.169,50,1.712,53,1.712,62,1.025,78,1.287,83,1.445,150,2.464,152,2.13,167,0.814,168,1.528,172,2.834,174,1.528,175,1.528,182,1.528,273,2.502,274,4.081,275,5.237,276,4.891,277,3.067,278,3.067,279,3.067,280,3.067,281,1.923,282,3.329,283,3.067,284,2.502,285,2.502,286,3.067,287,4.081,288,3.067,289,3.067,290,3.067,291,4.081,292,3.067,293,3.067,294,2.502,295,3.067,296,3.067,297,3.067,298,3.067,299,3.067,300,3.067,301,3.067,302,3.067]],["title/injectables/PrismaService.html",[32,0.958,42,0.761]],["body/injectables/PrismaService.html",[3,0.467,4,0.467,5,0.394,9,0.802,10,0.044,11,0.628,13,0.394,14,0.259,15,0.026,16,0.026,17,0.026,18,0.026,19,0.026,32,1.475,42,1.171,43,1.628,50,2.269,78,1.851,167,0.917,168,1.652,174,1.652,175,1.652,182,1.652,191,1.836,303,2.819,304,3.455,305,4.86,306,5.41,307,5.41,308,3.455,309,3.455,310,3.455,311,2.399,312,4.411,313,3.455,314,3.455,315,3.455,316,3.455]],["title/classes/Server.html",[14,0.215,281,1.35]],["body/classes/Server.html",[3,0.385,4,0.385,5,0.325,9,0.863,10,0.045,13,0.504,14,0.213,15,0.022,16,0.022,17,0.022,18,0.022,19,0.022,20,0.671,26,2.522,50,1.854,62,1.753,78,1.63,116,1.854,143,1.515,167,0.756,168,1.454,174,1.067,175,1.067,182,1.067,240,1.721,281,2.082,294,2.325,317,1.979,318,1.979,319,2.85,320,2.85,321,2.325,322,2.85,323,2.349,324,2.85,325,2.349,326,2.85,327,3.069,328,3.169,329,2.325,330,2.698,331,2.325,332,2.325,333,2.85,334,2.325,335,2.85,336,2.85,337,2.85,338,2.85,339,2.85,340,2.85,341,2.85,342,2.85,343,2.85,344,2.85,345,2.85,346,2.85,347,2.85,348,2.85,349,2.85,350,2.85,351,2.85,352,2.85,353,2.85,354,2.85,355,2.85]],["title/injectables/TokenMiddleware.html",[42,0.761,325,1.523]],["body/injectables/TokenMiddleware.html",[3,0.268,4,0.268,5,0.226,9,0.361,10,0.045,11,0.361,13,0.226,14,0.149,15,0.015,16,0.015,17,0.023,18,0.015,19,0.015,42,0.795,43,0.936,53,1.902,62,1.657,83,1.412,89,2.427,94,2.136,116,1.902,167,0.527,168,1.122,169,1.62,174,0.744,175,1.351,177,1.056,178,1.056,179,0.936,180,2.738,181,1.893,182,0.744,192,1.592,193,1.379,224,2.944,237,2.445,238,1.62,239,1.62,240,2.738,248,1.379,249,1.62,250,2.445,253,1.379,264,2.445,311,1.379,325,1.592,356,1.379,357,2.081,358,1.986,359,3.699,360,1.986,361,2.944,362,2.445,363,2.506,364,1.62,365,1.62,366,1.379,367,1.62,368,2.506,369,1.62,370,1.62,371,1.62,372,1.62,373,1.986,374,1.986,375,3.609,376,2.997,377,1.986,378,2.997,379,1.62,380,1.986,381,4.019,382,3.609,383,1.986,384,3.609,385,2.944,386,2.944,387,3.609,388,2.997,389,3.609,390,2.997,391,1.986,392,1.986,393,2.997,394,1.986,395,2.997,396,1.986,397,1.986,398,1.986,399,1.986,400,3.609,401,1.986,402,1.986,403,1.986,404,1.986,405,1.986,406,2.997,407,2.997,408,1.986,409,3.609,410,1.986,411,1.986,412,2.997,413,1.986,414,1.986,415,1.986,416,1.986,417,1.986,418,1.62,419,1.986,420,1.986,421,1.986,422,1.986,423,1.986,424,1.986,425,1.986,426,1.986,427,1.986,428,1.986,429,1.986,430,1.986,431,1.986,432,1.986,433,1.986,434,1.986,435,1.986,436,1.986,437,1.986,438,1.62,439,1.62,440,1.986]],["title/injectables/UnlessMiddleware.html",[42,0.761,323,1.523]],["body/injectables/UnlessMiddleware.html",[3,0.464,4,0.464,5,0.391,9,0.624,10,0.044,11,0.624,13,0.391,14,0.257,15,0.026,16,0.026,17,0.026,18,0.026,19,0.026,42,1.165,43,1.617,53,1.44,62,1.147,167,0.911,168,1.644,174,1.285,175,1.285,177,1.824,178,1.824,179,1.617,180,2.925,181,2.069,182,1.285,272,1.617,311,2.383,323,2.334,330,2.383,357,3.05,359,4.166,361,3.583,362,3.583,385,2.799,441,2.799,442,4.392,443,4.844,444,3.432,445,3.432,446,4.392,447,3.432,448,3.432,449,3.432]],["title/controllers/UserController.html",[0,0.958,450,1.731]],["body/controllers/UserController.html",[0,0.721,2,0.807,3,0.291,4,0.291,5,0.246,7,1.302,9,0.689,10,0.045,11,0.392,13,0.246,14,0.161,15,0.016,16,0.016,17,0.016,18,0.016,19,0.016,45,1.146,46,1.693,47,2.212,50,2.281,51,1.497,52,3.113,53,1.961,55,3.061,56,2.212,57,1.497,59,2.484,62,0.721,78,0.905,90,2.527,110,1.924,124,2.907,167,0.572,168,1.193,170,2.599,172,3.101,174,1.672,175,1.672,177,2.373,178,2.373,179,2.104,180,1.924,181,2.278,182,1.672,183,1.759,186,2.599,187,2.599,189,1.59,191,1.146,196,1.759,199,1.759,203,1.759,215,1.759,272,1.785,284,1.759,450,1.924,451,1.759,452,3.091,453,2.599,454,2.599,455,2.599,456,2.156,457,2.156,458,2.156,459,2.156,460,2.156,461,3.091,462,2.156,463,2.156,464,3.789,465,2.156,466,2.156,467,2.156,468,2.156,469,2.156,470,2.156,471,1.759,472,2.156,473,1.759,474,2.156,475,3.186,476,2.156,477,2.156,478,2.156,479,2.156,480,4.186,481,2.156,482,2.156,483,2.156,484,2.156,485,2.156,486,2.156,487,2.156,488,2.156,489,2.156,490,2.156,491,2.156,492,2.156]],["title/modules/UserModule.html",[20,0.674,147,1.523]],["body/modules/UserModule.html",[2,1.215,3,0.438,4,0.438,5,0.37,9,0.967,10,0.045,11,0.59,13,0.37,14,0.243,15,0.025,16,0.025,17,0.025,18,0.025,19,0.025,20,1.11,22,1.528,23,1.361,24,1.959,25,1.959,26,1.724,27,2.506,28,1.959,32,1.778,33,2.557,34,1.959,35,1.724,37,1.724,40,1.959,41,1.959,147,2.92,165,2.847,189,2.232,450,2.847,473,2.646,493,2.646,494,2.646,495,3.244,496,3.244,497,2.251,498,3.244,499,3.244]],["title/injectables/UserService.html",[42,0.761,189,1.203]],["body/injectables/UserService.html",[3,0.162,4,0.162,5,0.137,9,0.61,10,0.045,11,0.218,13,0.137,14,0.09,15,0.009,16,0.009,17,0.009,18,0.009,19,0.009,32,1.288,37,0.638,42,0.532,43,0.565,45,0.638,46,1.066,47,1.393,48,1.393,49,2.107,50,2.187,51,1.393,52,2.851,53,1.817,54,1.636,55,1.56,56,0.833,57,1.393,58,1.636,59,2.364,60,1.636,61,2.107,62,1.521,63,0.979,64,0.979,65,0.979,66,0.979,67,0.833,68,0.979,69,0.833,70,0.979,71,0.979,72,0.979,73,0.979,74,1.636,75,2.462,76,1.393,77,1.393,78,1.694,79,1.636,80,1.393,81,1.393,82,0.979,83,0.945,84,0.979,85,0.979,86,0.979,87,0.979,88,1.636,89,2.027,90,2.191,91,0.979,92,0.979,93,0.979,94,0.638,95,2.675,96,2.096,97,2.332,98,0.833,99,0.833,100,0.979,101,1.794,102,0.979,103,0.979,104,0.979,105,1.393,106,0.979,107,1.794,108,1.636,109,2.462,110,1.56,111,0.979,112,1.636,113,0.979,114,1.636,115,1.636,116,0.841,117,1.636,118,1.636,119,1.393,120,1.636,121,0.979,122,1.636,123,1.636,124,2.804,125,1.636,126,0.979,127,1.636,128,0.979,129,1.636,130,2.462,131,1.636,132,2.739,133,2.739,134,1.636,135,0.979,136,1.636,137,0.979,138,2.107,139,2.462,140,0.979,141,0.979,142,0.979,167,0.318,168,0.751,174,1.571,175,1.571,177,2.301,178,2.23,179,1.977,181,2.187,182,1.621,189,0.841,191,0.638,194,1.066,225,2.739,226,1.636,248,1.794,259,1.636,267,0.724,270,0.979,272,1.903,285,0.979,379,1.636,386,2.462,439,0.979,452,1.636,453,1.636,454,1.636,455,1.636,461,0.979,471,1.636,500,0.979,501,2.005,502,2.005,503,1.2,504,1.2,505,1.2,506,1.2,507,1.2,508,1.2,509,1.2,510,0.979,511,0.979,512,3.018,513,2.005,514,3.018,515,2.005,516,2.005,517,3.018,518,2.005,519,2.005,520,2.005,521,2.005,522,2.005,523,2.005,524,2.005,525,2.583,526,2.005,527,2.005,528,3.018,529,1.2,530,1.2,531,1.2,532,1.2,533,1.2,534,1.2,535,1.2,536,1.2,537,1.2,538,1.2,539,0.979,540,1.2,541,1.2,542,1.2,543,1.2,544,1.2,545,1.2,546,1.2]],["title/classes/UserValidator.html",[14,0.215,497,1.523]],["body/classes/UserValidator.html",[3,0.58,4,0.58,5,0.489,10,0.043,13,0.489,14,0.321,15,0.033,16,0.033,17,0.033,18,0.033,19,0.033,317,2.981,497,2.678,547,3.502,548,4.293]],["title/modules/ValidatorModule.html",[20,0.674,148,1.523]],["body/modules/ValidatorModule.html",[3,0.537,4,0.537,5,0.452,9,0.874,10,0.045,11,0.722,13,0.452,14,0.297,15,0.03,16,0.03,17,0.03,18,0.03,19,0.03,20,1.132,22,1.871,27,2.111,40,2.398,41,2.398,148,2.557,497,2.557,549,3.972,550,3.972]],["title/coverage.html",[551,3.9]],["body/coverage.html",[0,1.568,1,1.674,5,0.316,6,2.261,10,0.044,14,0.285,15,0.021,16,0.021,17,0.021,18,0.021,19,0.021,20,0.652,31,1.306,32,0.927,42,1.305,44,2.261,67,3.956,69,3.416,116,1.163,150,1.674,165,1.674,166,3.025,189,1.163,192,2.025,194,1.473,266,1.473,267,1.674,269,2.261,272,1.306,273,2.261,281,1.796,303,2.261,318,3.416,323,2.025,325,2.025,327,1.925,356,3.258,363,1.925,368,1.925,441,2.261,450,1.674,451,2.261,497,1.473,500,2.261,547,2.261,552,2.772,553,2.772,554,2.772,555,2.772,556,2.772,557,5.382,558,4.356,559,5.446,560,2.772,561,2.261,562,4.356,563,4.692,564,2.772,565,2.772,566,2.772,567,2.772]],["title/dependencies.html",[23,1.445,568,2.4]],["body/dependencies.html",[10,0.045,11,0.639,14,0.334,15,0.027,16,0.027,17,0.027,18,0.027,19,0.027,152,2.441,154,2.868,191,1.868,192,1.868,194,1.868,321,2.868,569,3.515,570,4.899,571,3.515,572,3.515,573,4.46,574,3.515,575,3.515,576,2.868,577,3.515,578,3.515,579,4.46,580,3.515,581,3.515,582,3.515,583,3.515,584,3.515,585,3.515,586,3.515,587,3.515,588,3.515,589,4.899,590,3.515,591,3.515,592,3.515,593,3.515,594,3.515,595,3.515,596,3.515,597,3.515,598,3.515,599,3.515]],["title/index.html",[167,0.637,600,1.666,601,1.666]],["body/index.html",[10,0.043,15,0.025,16,0.025,17,0.025,18,0.025,19,0.025,23,1.383,48,3.301,116,1.383,253,2.29,266,1.752,268,2.69,281,1.553,282,2.69,334,2.69,418,2.69,539,2.69,600,2.29,601,2.29,602,3.297,603,3.297,604,3.297,605,3.297,606,3.297,607,2.69,608,2.69,609,4.281,610,3.297,611,3.297,612,5.662,613,4.753,614,3.297,615,4.281,616,3.297,617,3.297,618,3.297,619,3.297,620,3.297,621,3.297,622,3.297,623,3.297,624,5.031,625,4.753,626,4.281,627,3.297,628,3.297,629,3.297,630,3.297,631,3.297,632,3.297,633,3.297,634,4.281,635,3.297,636,3.297,637,3.297,638,3.297]],["title/license.html",[600,1.666,601,1.666,639,1.957]],["body/license.html",[10,0.032,15,0.024,16,0.024,17,0.024,18,0.024,19,0.024,35,1.702,119,2.224,357,2.917,576,2.613,607,2.613,608,2.613,639,2.613,640,3.203,641,4.687,642,3.203,643,3.203,644,4.2,645,3.203,646,3.203,647,3.203,648,3.203,649,3.203,650,3.203,651,4.2,652,5.543,653,3.203,654,3.203,655,3.203,656,3.203,657,4.687,658,3.203,659,4.2,660,3.203,661,3.203,662,3.203,663,3.203,664,3.203,665,3.203,666,3.203,667,3.203,668,3.203,669,4.2,670,3.203,671,3.203,672,3.203,673,3.203,674,3.203,675,3.203,676,3.203,677,4.2,678,4.2,679,3.203,680,3.203,681,3.203,682,3.203,683,3.203,684,3.203,685,3.203,686,3.203,687,3.203,688,3.203,689,3.203,690,3.203,691,3.203,692,3.203,693,3.203,694,3.203,695,3.203,696,3.203,697,3.203,698,3.203,699,3.203,700,3.203,701,3.203,702,3.203,703,3.203,704,3.203,705,3.203,706,3.203]],["title/modules.html",[707,3.9]],["body/modules.html",[10,0.037,15,0.03,16,0.03,17,0.03,18,0.03,19,0.03,21,2.127,22,1.886,143,2.127,147,2.127,148,2.127,181,2.447,438,4.236,708,5.193,709,5.193,710,5.193,711,5.193,712,5.394,713,4.003,714,4.003,715,4.003]],["title/overview.html",[716,3.9]],["body/overview.html",[2,1.255,10,0.043,15,0.025,16,0.025,17,0.025,18,0.025,19,0.025,20,0.789,21,2.901,22,1.579,23,1.406,24,2.024,25,2.024,26,1.781,27,1.781,28,2.024,29,2.734,30,2.734,31,2.385,32,1.752,33,2.612,34,2.024,35,1.781,43,1.579,143,3.034,144,2.734,146,2.734,147,2.901,148,2.546,189,2.01,266,1.781,317,2.328,366,2.328,493,2.734,494,2.734,717,3.352,718,3.352,719,4.326,720,3.352,721,3.352]],["title/miscellaneous/variables.html",[722,2.4,723,3.444]],["body/miscellaneous/variables.html",[10,0.045,13,0.337,15,0.022,16,0.022,17,0.022,18,0.022,19,0.022,20,0.938,59,1.572,62,0.989,116,2.289,166,2.055,167,0.785,192,2.562,193,2.767,194,2.117,195,2.414,240,1.786,272,1.877,281,2.123,318,2.055,323,2.394,325,2.394,327,3.129,328,3.251,329,2.414,330,2.767,331,2.414,332,2.414,356,2.055,363,2.767,364,2.414,365,2.414,366,2.055,367,2.414,368,2.767,369,2.414,370,2.414,371,2.414,372,2.414,510,4.451,511,4.451,561,2.414,724,2.959,725,2.959,726,3.985,727,4.505,728,4.82,729,2.959]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":67,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.0.0.0",{"_index":342,"title":{},"body":{"classes/Server.html":{}}}],["0.1.13",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":366,"title":{},"body":{"injectables/TokenMiddleware.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":80,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["100",{"_index":69,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["2",{"_index":721,"title":{},"body":{"overview.html":{}}}],["2.7.1",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["2020",{"_index":643,"title":{},"body":{"license.html":{}}}],["2h",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["3.0.2",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["3333",{"_index":294,"title":{},"body":{"controllers/HealthController.html":{},"classes/Server.html":{}}}],["4",{"_index":719,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":720,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["7.0.1",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["above",{"_index":676,"title":{},"body":{"license.html":{}}}],["acaba",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"index.html":{}}}],["acesso",{"_index":395,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["acordo",{"_index":542,"title":{},"body":{"injectables/UserService.html":{}}}],["action",{"_index":700,"title":{},"body":{"license.html":{}}}],["agency",{"_index":8,"title":{},"body":{"controllers/AgencyController.html":{}}}],["agency.controller",{"_index":39,"title":{},"body":{"modules/AgencyModule.html":{}}}],["agency.service",{"_index":38,"title":{},"body":{"modules/AgencyModule.html":{}}}],["agency/agency.module",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["agency/agency.service",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["agencycontroller",{"_index":1,"title":{"controllers/AgencyController.html":{}},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"coverage.html":{}}}],["agencymodule",{"_index":21,"title":{"modules/AgencyModule.html":{}},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["agencyservice",{"_index":31,"title":{"injectables/AgencyService.html":{}},"body":{"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"coverage.html":{},"overview.html":{}}}],["analise",{"_index":299,"title":{},"body":{"controllers/HealthController.html":{}}}],["and/or",{"_index":667,"title":{},"body":{"license.html":{}}}],["andnotnicknameisnull",{"_index":136,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["ao",{"_index":378,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["aos",{"_index":396,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["api/v1",{"_index":328,"title":{},"body":{"classes/Server.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":334,"title":{},"body":{"classes/Server.html":{},"index.html":{}}}],["app.close",{"_index":355,"title":{},"body":{"classes/Server.html":{}}}],["app.listen(process.env.port",{"_index":341,"title":{},"body":{"classes/Server.html":{}}}],["app.module",{"_index":322,"title":{},"body":{"classes/Server.html":{}}}],["app.setglobalprefix(globalprefix",{"_index":336,"title":{},"body":{"classes/Server.html":{}}}],["app.use(unlessmiddleware.use",{"_index":337,"title":{},"body":{"classes/Server.html":{}}}],["apply",{"_index":632,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":143,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"classes/Server.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":704,"title":{},"body":{"license.html":{}}}],["arquivo",{"_index":5,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{}}}],["array",{"_index":523,"title":{},"body":{"injectables/UserService.html":{}}}],["asc",{"_index":73,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["associated",{"_index":653,"title":{},"body":{"license.html":{}}}],["async",{"_index":50,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["autenticar",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["autenticar(@res",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["autenticar(res",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["authcontroller",{"_index":165,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["authmiddleware\\n",{"_index":391,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["authorizedlog",{"_index":374,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["authorizedlog(logedin",{"_index":398,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["authors",{"_index":693,"title":{},"body":{"license.html":{}}}],["await",{"_index":78,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["badrequest",{"_index":267,"title":{"interfaces/BadRequest.html":{}},"body":{"interfaces/BadRequest.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["bcrypt",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["bcrypt.compare",{"_index":113,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["bcrypt.compare(data.secret",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["bcrypt.hash(data.secret",{"_index":79,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["bcrypt.hashsync(data.secret",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["body",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":283,"title":{},"body":{"controllers/HealthController.html":{}}}],["boot",{"_index":611,"title":{},"body":{"index.html":{}}}],["bootstrap",{"_index":26,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"classes/Server.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["browser",{"_index":709,"title":{},"body":{"modules.html":{}}}],["c",{"_index":642,"title":{},"body":{"license.html":{}}}],["campos",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["catch",{"_index":105,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["changes",{"_index":625,"title":{},"body":{"index.html":{}}}],["charge",{"_index":648,"title":{},"body":{"license.html":{}}}],["chave",{"_index":102,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["cipriano",{"_index":608,"title":{},"body":{"index.html":{},"license.html":{}}}],["claim",{"_index":696,"title":{},"body":{"license.html":{}}}],["class",{"_index":14,"title":{"classes/Server.html":{},"classes/UserValidator.html":{}},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":317,"title":{},"body":{"classes/Server.html":{},"classes/UserValidator.html":{},"overview.html":{}}}],["cluster_agencymodule",{"_index":29,"title":{},"body":{"modules/AgencyModule.html":{},"overview.html":{}}}],["cluster_agencymodule_providers",{"_index":30,"title":{},"body":{"modules/AgencyModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_usermodule",{"_index":493,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":494,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cobertura",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["com",{"_index":543,"title":{},"body":{"injectables/UserService.html":{}}}],["compara",{"_index":518,"title":{},"body":{"injectables/UserService.html":{}}}],["comparenullvalues",{"_index":132,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["condition",{"_index":138,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["conditions",{"_index":675,"title":{},"body":{"license.html":{}}}],["condição",{"_index":514,"title":{},"body":{"injectables/UserService.html":{}}}],["confere",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["config/configuration",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["connected",{"_index":313,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connection",{"_index":705,"title":{},"body":{"license.html":{}}}],["console.clear",{"_index":343,"title":{},"body":{"classes/Server.html":{}}}],["console.dir(`${select",{"_index":142,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["console.dir(data",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.dir(element",{"_index":93,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["console.dir(existsuser",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.dir(newuser",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.dir(server",{"_index":344,"title":{},"body":{"classes/Server.html":{}}}],["console.dir(userloggedin",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"\\n",{"_index":383,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"\\nunauthorized",{"_index":401,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"by",{"_index":381,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"in",{"_index":388,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"on",{"_index":390,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"request",{"_index":384,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"x",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('\\nacesso",{"_index":376,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log('\\nusuario",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('email",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('newuser",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('prisma",{"_index":312,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log('senha",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(`${new",{"_index":349,"title":{},"body":{"classes/Server.html":{}}}],["console.log(`\\n${process.env.npm_package_name",{"_index":345,"title":{},"body":{"classes/Server.html":{}}}],["console.log(`existsuser",{"_index":87,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["console.log(`query",{"_index":141,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["console.log(process.env.npm_package_description",{"_index":348,"title":{},"body":{"classes/Server.html":{}}}],["const",{"_index":62,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":45,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(prisma",{"_index":504,"title":{},"body":{"injectables/UserService.html":{}}}],["construtor",{"_index":503,"title":{},"body":{"injectables/UserService.html":{}}}],["contract",{"_index":701,"title":{},"body":{"license.html":{}}}],["controladores",{"_index":2,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controller",{"_index":0,"title":{"controllers/AgencyController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AgencyController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('agency",{"_index":12,"title":{},"body":{"controllers/AgencyController.html":{}}}],["controller('health",{"_index":288,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('user",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["controllers",{"_index":41,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{}}}],["cookie",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["copies",{"_index":669,"title":{},"body":{"license.html":{}}}],["copy",{"_index":651,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":641,"title":{},"body":{"license.html":{}}}],["correspondente",{"_index":19,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["corretamente",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["coverage",{"_index":551,"title":{"coverage.html":{}},"body":{}}],["cpf",{"_index":96,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["create",{"_index":501,"title":{},"body":{"injectables/UserService.html":{}}}],["create(data",{"_index":74,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["credentials",{"_index":118,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["currículo",{"_index":602,"title":{},"body":{"index.html":{}}}],["currículo→único",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["da",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["damages",{"_index":697,"title":{},"body":{"license.html":{}}}],["data",{"_index":90,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["data.cpf",{"_index":86,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["data.email",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["data.id",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["data.secret",{"_index":77,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["database",{"_index":626,"title":{},"body":{"index.html":{}}}],["datautc",{"_index":363,"title":{},"body":{"injectables/TokenMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["date().getutcdate",{"_index":367,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutcfullyear",{"_index":364,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutchours",{"_index":369,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutcminutes",{"_index":370,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutcmonth",{"_index":365,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutcseconds",{"_index":371,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().tolocaledatestring",{"_index":350,"title":{},"body":{"classes/Server.html":{}}}],["date().tolocaletimestring()}\\n",{"_index":351,"title":{},"body":{"classes/Server.html":{}}}],["datebirth",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["de",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["deal",{"_index":656,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":706,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":25,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["declare",{"_index":333,"title":{},"body":{"classes/Server.html":{}}}],["decoded",{"_index":414,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["decoradores",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":521,"title":{},"body":{"injectables/UserService.html":{}}}],["definido",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":452,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete('/:id",{"_index":486,"title":{},"body":{"controllers/UserController.html":{}}}],["delete('/:id')@httpcode(200",{"_index":457,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(@param('id",{"_index":487,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(id",{"_index":456,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(where",{"_index":127,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":23,"title":{"dependencies.html":{}},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["dependencies(healthcheckservice",{"_index":289,"title":{},"body":{"controllers/HealthController.html":{}}}],["dependências",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["desconnected",{"_index":315,"title":{},"body":{"injectables/PrismaService.html":{}}}],["description",{"_index":539,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["descrição",{"_index":270,"title":{},"body":{"interfaces/BadRequest.html":{},"injectables/UserService.html":{}}}],["desses",{"_index":545,"title":{},"body":{"injectables/UserService.html":{}}}],["dev",{"_index":617,"title":{},"body":{"index.html":{}}}],["development",{"_index":618,"title":{},"body":{"index.html":{}}}],["devem",{"_index":98,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["disponível",{"_index":715,"title":{},"body":{"modules.html":{}}}],["distribute",{"_index":665,"title":{},"body":{"license.html":{}}}],["dns",{"_index":290,"title":{},"body":{"controllers/HealthController.html":{}}}],["dnshealthindicator",{"_index":287,"title":{},"body":{"controllers/HealthController.html":{}}}],["documentation",{"_index":654,"title":{},"body":{"license.html":{}}}],["documentação",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":619,"title":{},"body":{"index.html":{}}}],["duplicada",{"_index":104,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["e",{"_index":410,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["efetue",{"_index":423,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["em",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["email",{"_index":95,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["encontrado",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["err",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["err.expiredat",{"_index":425,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["err.message",{"_index":415,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["err.name",{"_index":419,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["error",{"_index":101,"title":{},"body":{"injectables/AgencyService.html":{},"interfaces/BadRequest.html":{},"injectables/UserService.html":{}}}],["error.message",{"_index":106,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["est",{"_index":429,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["este",{"_index":439,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["estão",{"_index":526,"title":{},"body":{"injectables/UserService.html":{}}}],["event",{"_index":692,"title":{},"body":{"license.html":{}}}],["existsuser",{"_index":81,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["existsuser.find(user",{"_index":84,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["existsuser.length",{"_index":88,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["existsuser.secret",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["existsuser.some(element",{"_index":92,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["existsuser?.email",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["existência",{"_index":544,"title":{},"body":{"injectables/UserService.html":{}}}],["experimentalto",{"_index":631,"title":{},"body":{"index.html":{}}}],["expired",{"_index":416,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["expiredat",{"_index":424,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["expiresin",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["expirou",{"_index":422,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["export",{"_index":13,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"miscellaneous/variables.html":{}}}],["exports",{"_index":28,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":576,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extende",{"_index":304,"title":{},"body":{"injectables/PrismaService.html":{}}}],["extends",{"_index":310,"title":{},"body":{"injectables/PrismaService.html":{}}}],["falha",{"_index":428,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["false",{"_index":89,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["fazer",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["files",{"_index":655,"title":{},"body":{"license.html":{}}}],["fitness",{"_index":688,"title":{},"body":{"license.html":{}}}],["following",{"_index":674,"title":{},"body":{"license.html":{}}}],["fornecido",{"_index":406,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["free",{"_index":647,"title":{},"body":{"license.html":{}}}],["fullname",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["furnished",{"_index":672,"title":{},"body":{"license.html":{}}}],["g",{"_index":622,"title":{},"body":{"index.html":{}}}],["generate",{"_index":634,"title":{},"body":{"index.html":{}}}],["generateto",{"_index":636,"title":{},"body":{"index.html":{}}}],["geral",{"_index":718,"title":{},"body":{"overview.html":{}}}],["get('/')@httpcode(200",{"_index":459,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:id",{"_index":483,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:id')@httpcode(200",{"_index":462,"title":{},"body":{"controllers/UserController.html":{}}}],["get('status",{"_index":301,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('status')@httpcode(httpstatus.ok",{"_index":279,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@httpcode(httpstatus.ok)@healthcheck",{"_index":277,"title":{},"body":{"controllers/HealthController.html":{}}}],["getbyemail",{"_index":130,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["getbyemail(email",{"_index":129,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["getbyuserwhereuniqueinput",{"_index":139,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["getbyuserwhereuniqueinput(unique",{"_index":131,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["getmany",{"_index":453,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getmany(@query",{"_index":481,"title":{},"body":{"controllers/UserController.html":{}}}],["getmany(query",{"_index":57,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getone",{"_index":454,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getone(@param('id",{"_index":484,"title":{},"body":{"controllers/UserController.html":{}}}],["getone(id",{"_index":51,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getting",{"_index":600,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["globalprefix",{"_index":327,"title":{},"body":{"classes/Server.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["globalprefix}/health/status",{"_index":340,"title":{},"body":{"classes/Server.html":{}}}],["globalprefix}/user/signin",{"_index":339,"title":{},"body":{"classes/Server.html":{}}}],["granted",{"_index":646,"title":{},"body":{"license.html":{}}}],["graphical",{"_index":637,"title":{},"body":{"index.html":{}}}],["gráfico",{"_index":714,"title":{},"body":{"modules.html":{}}}],["hasaccess",{"_index":392,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["hasaccess(decoded",{"_index":435,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["hashedpassword",{"_index":109,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["health",{"_index":274,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":275,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":286,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":150,"title":{"controllers/HealthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["hereby",{"_index":645,"title":{},"body":{"license.html":{}}}],["holders",{"_index":694,"title":{},"body":{"license.html":{}}}],["horautc",{"_index":368,"title":{},"body":{"injectables/TokenMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hot",{"_index":331,"title":{},"body":{"classes/Server.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:${port}/api/v1/health/status",{"_index":297,"title":{},"body":{"controllers/HealthController.html":{}}}],["http://localhost:${server.address().port",{"_index":347,"title":{},"body":{"classes/Server.html":{}}}],["http://zeta08.primusweb.com.br:${3017}/api/v1/health",{"_index":300,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpcode",{"_index":284,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["httpcode(200",{"_index":480,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(201",{"_index":476,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":291,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpexception",{"_index":534,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexception('wrong",{"_index":117,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["https://www.npmjs.com/package/validator.ts%20%20or%20https://www.npmjs.com/package/validate",{"_index":548,"title":{},"body":{"classes/UserValidator.html":{}}}],["httpstatus",{"_index":285,"title":{},"body":{"controllers/HealthController.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":120,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["id",{"_index":55,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identificador",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":311,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["implied",{"_index":684,"title":{},"body":{"license.html":{}}}],["import",{"_index":9,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidatorModule.html":{}}}],["imports",{"_index":40,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{}}}],["included",{"_index":679,"title":{},"body":{"license.html":{}}}],["including",{"_index":659,"title":{},"body":{"license.html":{}}}],["incorreta",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["incorreto",{"_index":430,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["index",{"_index":167,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{}}}],["injectable",{"_index":42,"title":{"injectables/AgencyService.html":{},"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"injectables/UserService.html":{}},"body":{"injectables/AgencyService.html":{},"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injetáveis",{"_index":43,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["install",{"_index":609,"title":{},"body":{"index.html":{}}}],["installed",{"_index":620,"title":{},"body":{"index.html":{}}}],["interface",{"_index":266,"title":{"interfaces/BadRequest.html":{}},"body":{"interfaces/BadRequest.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["interfaces",{"_index":268,"title":{},"body":{"interfaces/BadRequest.html":{},"index.html":{}}}],["interfaces/badrequest.interface",{"_index":535,"title":{},"body":{"injectables/UserService.html":{}}}],["isglobal",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["isnull",{"_index":137,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["ispasswordmatching",{"_index":112,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["jwt",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.sign",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt.verify(token",{"_index":413,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["kind",{"_index":683,"title":{},"body":{"license.html":{}}}],["legend",{"_index":24,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["liability",{"_index":698,"title":{},"body":{"license.html":{}}}],["liable",{"_index":695,"title":{},"body":{"license.html":{}}}],["license",{"_index":639,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":660,"title":{},"body":{"license.html":{}}}],["limited",{"_index":685,"title":{},"body":{"license.html":{}}}],["literal",{"_index":528,"title":{},"body":{"injectables/UserService.html":{}}}],["load",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["logedin",{"_index":375,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["logedin.email",{"_index":380,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["login",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["made",{"_index":635,"title":{},"body":{"index.html":{}}}],["matching",{"_index":16,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":687,"title":{},"body":{"license.html":{}}}],["merge",{"_index":663,"title":{},"body":{"license.html":{}}}],["message",{"_index":94,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["metadata",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["middleware",{"_index":330,"title":{},"body":{"classes/Server.html":{},"injectables/UnlessMiddleware.html":{},"miscellaneous/variables.html":{}}}],["middleware(req",{"_index":449,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["middleware/router/unless.middleware",{"_index":324,"title":{},"body":{"classes/Server.html":{}}}],["middleware/token/token.middleware",{"_index":326,"title":{},"body":{"classes/Server.html":{}}}],["migrate",{"_index":629,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":722,"title":{"miscellaneous/variables.html":{}},"body":{}}],["miscelânea",{"_index":724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":640,"title":{},"body":{"license.html":{}}}],["mode",{"_index":615,"title":{},"body":{"index.html":{}}}],["modify",{"_index":662,"title":{},"body":{"license.html":{}}}],["module",{"_index":20,"title":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{}},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"classes/Server.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["module.hot",{"_index":352,"title":{},"body":{"classes/Server.html":{}}}],["module.hot.accept",{"_index":353,"title":{},"body":{"classes/Server.html":{}}}],["module.hot.dispose",{"_index":354,"title":{},"body":{"classes/Server.html":{}}}],["modules",{"_index":707,"title":{"modules.html":{}},"body":{}}],["momento",{"_index":431,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["método",{"_index":540,"title":{},"body":{"injectables/UserService.html":{}}}],["métodos",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["módulos",{"_index":22,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{},"modules.html":{},"overview.html":{}}}],["n",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["name",{"_index":418,"title":{},"body":{"injectables/TokenMiddleware.html":{},"index.html":{}}}],["nameofyourmigrate",{"_index":630,"title":{},"body":{"index.html":{}}}],["natan",{"_index":607,"title":{},"body":{"index.html":{},"license.html":{}}}],["navegar",{"_index":712,"title":{},"body":{"modules.html":{}}}],["negado",{"_index":399,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["nenhum",{"_index":17,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["nesta",{"_index":527,"title":{},"body":{"injectables/UserService.html":{}}}],["nestfactory",{"_index":320,"title":{},"body":{"classes/Server.html":{}}}],["nestfactory.create(appmodule",{"_index":335,"title":{},"body":{"classes/Server.html":{}}}],["nestjs",{"_index":604,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":11,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidatorModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":321,"title":{},"body":{"classes/Server.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["nestjs/terminus",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjsplus/redirect",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["nestmiddleware",{"_index":362,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["new",{"_index":116,"title":{},"body":{"injectables/AgencyService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["newuser.hasownproperty('id",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["newuser['cpf",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['datebirth",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['email",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['fullname",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['id",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['nickname",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['role",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["next",{"_index":359,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["nica",{"_index":103,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["nickname",{"_index":97,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["nico",{"_index":603,"title":{},"body":{"index.html":{}}}],["nicos",{"_index":100,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["nome",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["noninfringement",{"_index":691,"title":{},"body":{"license.html":{}}}],["notice",{"_index":677,"title":{},"body":{"license.html":{}}}],["novamente",{"_index":412,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["npm",{"_index":621,"title":{},"body":{"index.html":{}}}],["npx",{"_index":628,"title":{},"body":{"index.html":{}}}],["null",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["nulos",{"_index":520,"title":{},"body":{"injectables/UserService.html":{}}}],["number(id",{"_index":56,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number(query.skip",{"_index":66,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["number(query.take",{"_index":68,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["não",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"modules.html":{}}}],["o",{"_index":409,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["obtaining",{"_index":650,"title":{},"body":{"license.html":{}}}],["onmoduledestroy",{"_index":306,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":307,"title":{},"body":{"injectables/PrismaService.html":{}}}],["opcional",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["orderby",{"_index":61,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["orderby?.length",{"_index":70,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["orderby[0",{"_index":71,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["orderby[1",{"_index":72,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["os",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["otherwise",{"_index":703,"title":{},"body":{"license.html":{}}}],["ou",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":716,"title":{"overview.html":{}},"body":{}}],["package",{"_index":568,"title":{"dependencies.html":{}},"body":{}}],["padrão",{"_index":511,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["para",{"_index":515,"title":{},"body":{"injectables/UserService.html":{}}}],["param",{"_index":471,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param('id",{"_index":491,"title":{},"body":{"controllers/UserController.html":{}}}],["params",{"_index":125,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["parser",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["participants",{"_index":606,"title":{},"body":{"index.html":{}}}],["particular",{"_index":689,"title":{},"body":{"license.html":{}}}],["parâmetros",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["passport",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["path",{"_index":448,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["pathcheck",{"_index":446,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["paths",{"_index":443,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["paths.some(path",{"_index":447,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["permission",{"_index":644,"title":{},"body":{"license.html":{}}}],["permit",{"_index":670,"title":{},"body":{"license.html":{}}}],["permitido",{"_index":377,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["person",{"_index":649,"title":{},"body":{"license.html":{}}}],["persons",{"_index":671,"title":{},"body":{"license.html":{}}}],["pesquisa",{"_index":516,"title":{},"body":{"injectables/UserService.html":{}}}],["port",{"_index":292,"title":{},"body":{"controllers/HealthController.html":{}}}],["portions",{"_index":681,"title":{},"body":{"license.html":{}}}],["post",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post('/')@httpcode(201",{"_index":465,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/signin",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgress",{"_index":605,"title":{},"body":{"index.html":{}}}],["postservice",{"_index":475,"title":{},"body":{"controllers/UserController.html":{}}}],["preenchidos",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefixo",{"_index":7,"title":{},"body":{"controllers/AgencyController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":48,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["prisma/client",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/prisma.service",{"_index":37,"title":{},"body":{"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["prisma/schema.prisma",{"_index":627,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":305,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaservice",{"_index":32,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":46,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["process.env.npm_package_name",{"_index":302,"title":{},"body":{"controllers/HealthController.html":{}}}],["process.env.port",{"_index":293,"title":{},"body":{"controllers/HealthController.html":{}}}],["process.env.server_secret_token",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["production",{"_index":614,"title":{},"body":{"index.html":{}}}],["profilecreateonewithoutuserinput",{"_index":536,"title":{},"body":{"injectables/UserService.html":{}}}],["promise",{"_index":52,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["propriedades",{"_index":271,"title":{},"body":{"interfaces/BadRequest.html":{}}}],["provided",{"_index":119,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["providers",{"_index":27,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{},"overview.html":{}}}],["public",{"_index":107,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["public.\"user",{"_index":135,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["publish",{"_index":664,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":690,"title":{},"body":{"license.html":{}}}],["put",{"_index":472,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/:id",{"_index":489,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/:id')@httpcode(200",{"_index":468,"title":{},"body":{"controllers/UserController.html":{}}}],["que",{"_index":517,"title":{},"body":{"injectables/UserService.html":{}}}],["query",{"_index":461,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["query.orderby",{"_index":63,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["query.orderby.split",{"_index":64,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["readonly",{"_index":47,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["realize",{"_index":408,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["recebe",{"_index":512,"title":{},"body":{"injectables/UserService.html":{}}}],["recurso",{"_index":440,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["recursos",{"_index":397,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["reflect",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["reload",{"_index":332,"title":{},"body":{"classes/Server.html":{},"miscellaneous/variables.html":{}}}],["req",{"_index":361,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["req.headers.referer",{"_index":389,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["req.headers[\"x",{"_index":403,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["req.method",{"_index":387,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["req.path",{"_index":385,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["require('bcrypt",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["require('jsonwebtoken",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{}}}],["res.status(200).json",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(201).json",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(201).json(newuser",{"_index":479,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(201).send",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(400).json",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(400).json(newuser",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["res.status(401).json",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(401).send(tokenerror",{"_index":426,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["res.status(403).json",{"_index":436,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["res.status(403).send",{"_index":427,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["res.status(500).json",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetar",{"_index":34,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":470,"title":{},"body":{"controllers/UserController.html":{}}}],["restriction",{"_index":658,"title":{},"body":{"license.html":{}}}],["result",{"_index":15,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["resultado",{"_index":18,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retorna",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["retornar",{"_index":434,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["return",{"_index":53,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":546,"title":{},"body":{"injectables/UserService.html":{}}}],["rights",{"_index":661,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["running",{"_index":346,"title":{},"body":{"classes/Server.html":{}}}],["rxjs",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":624,"title":{},"body":{"index.html":{}}}],["secret",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["select",{"_index":134,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["sell",{"_index":668,"title":{},"body":{"license.html":{}}}],["sem",{"_index":713,"title":{},"body":{"modules.html":{}}}],["sempre",{"_index":432,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["send",{"_index":405,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["senha",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["ser",{"_index":99,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["server",{"_index":281,"title":{"classes/Server.html":{}},"body":{"controllers/HealthController.html":{},"classes/Server.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sessão",{"_index":421,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["seu",{"_index":708,"title":{},"body":{"modules.html":{}}}],["shall",{"_index":678,"title":{},"body":{"license.html":{}}}],["sigin",{"_index":502,"title":{},"body":{"injectables/UserService.html":{}}}],["sigin(email",{"_index":108,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["signup",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["signup(@res",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(@response",{"_index":477,"title":{},"body":{"controllers/UserController.html":{}}}],["signup(res",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["sim",{"_index":530,"title":{},"body":{"injectables/UserService.html":{}}}],["sistema",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["skip",{"_index":58,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["software",{"_index":652,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{}}}],["src/.../auth.controller.ts",{"_index":726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../server.ts",{"_index":728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../token.middleware.ts",{"_index":727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/agency/agency.controller.ts",{"_index":6,"title":{},"body":{"controllers/AgencyController.html":{},"coverage.html":{}}}],["src/agency/agency.module.ts",{"_index":36,"title":{},"body":{"modules/AgencyModule.html":{}}}],["src/agency/agency.service.ts",{"_index":44,"title":{},"body":{"injectables/AgencyService.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller",{"_index":499,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:41",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/health.controller.ts",{"_index":273,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health.controller.ts:14",{"_index":278,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health.controller.ts:24",{"_index":280,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/interfaces/badrequest.interface.ts",{"_index":269,"title":{},"body":{"interfaces/BadRequest.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":561,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/middleware/router/unless.middleware.ts",{"_index":441,"title":{},"body":{"injectables/UnlessMiddleware.html":{},"coverage.html":{}}}],["src/middleware/router/unless.middleware.ts:6",{"_index":444,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["src/middleware/token/token.middleware.ts",{"_index":356,"title":{},"body":{"injectables/TokenMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/middleware/token/token.middleware.ts:9",{"_index":360,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["src/prisma/prisma.service.ts",{"_index":303,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:12",{"_index":308,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:7",{"_index":309,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/server.ts",{"_index":318,"title":{},"body":{"classes/Server.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server.ts:25",{"_index":319,"title":{},"body":{"classes/Server.html":{}}}],["src/user/user.controller.ts",{"_index":451,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:14",{"_index":466,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:22",{"_index":460,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:28",{"_index":463,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:34",{"_index":458,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:40",{"_index":469,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":495,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":500,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:103",{"_index":508,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:117",{"_index":509,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:13",{"_index":505,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:19",{"_index":531,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:27",{"_index":529,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:44",{"_index":506,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:68",{"_index":532,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:85",{"_index":533,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:97",{"_index":507,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/validator/user.validate.ts",{"_index":547,"title":{},"body":{"classes/UserValidator.html":{},"coverage.html":{}}}],["src/utils/validator/validator.module.ts",{"_index":549,"title":{},"body":{"modules/ValidatorModule.html":{}}}],["start",{"_index":613,"title":{},"body":{"index.html":{}}}],["started",{"_index":601,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["statements",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":276,"title":{},"body":{"controllers/HealthController.html":{}}}],["status(403",{"_index":404,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["string",{"_index":59,"title":{},"body":{"injectables/AgencyService.html":{},"interfaces/BadRequest.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["studioshortcuts",{"_index":638,"title":{},"body":{"index.html":{}}}],["sua",{"_index":420,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["subject",{"_index":673,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":666,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":680,"title":{},"body":{"license.html":{}}}],["suporte",{"_index":710,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":711,"title":{},"body":{"modules.html":{}}}],["table",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":60,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["tem",{"_index":438,"title":{},"body":{"injectables/TokenMiddleware.html":{},"modules.html":{}}}],["temacesso",{"_index":382,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["tente",{"_index":411,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["terminusmodule",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["this.$connect",{"_index":314,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":316,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.dns.pingcheck('zeta",{"_index":298,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.dns.pingcheck(process.env.npm_package_name",{"_index":296,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.getbyemail(email",{"_index":111,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.getbyuserwhereuniqueinput(data",{"_index":82,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.health.check",{"_index":295,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.prisma.$queryraw(`${select",{"_index":140,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.create",{"_index":91,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":128,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":65,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findone",{"_index":54,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":126,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.userservice.create(data",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.create(userdata",{"_index":478,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.delete",{"_index":488,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getbyemail(data.email",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.getmany(query",{"_index":482,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getone(id",{"_index":485,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update",{"_index":492,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":115,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["tipo",{"_index":272,"title":{},"body":{"interfaces/BadRequest.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todo",{"_index":393,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["todos",{"_index":524,"title":{},"body":{"injectables/UserService.html":{}}}],["token",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["tokenerror",{"_index":417,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["tokenmiddleware",{"_index":325,"title":{"injectables/TokenMiddleware.html":{}},"body":{"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenmiddleware.use",{"_index":338,"title":{},"body":{"classes/Server.html":{}}}],["tokenmiddleware\\n",{"_index":402,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["tort",{"_index":702,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":83,"title":{},"body":{"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["try",{"_index":76,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["ts",{"_index":616,"title":{},"body":{"index.html":{}}}],["type",{"_index":386,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["um",{"_index":522,"title":{},"body":{"injectables/UserService.html":{}}}],["uma",{"_index":513,"title":{},"body":{"injectables/UserService.html":{}}}],["unauthorizedlog",{"_index":400,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["undefined",{"_index":121,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["unique",{"_index":133,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["unless",{"_index":329,"title":{},"body":{"classes/Server.html":{},"miscellaneous/variables.html":{}}}],["unlessmiddleware",{"_index":323,"title":{"injectables/UnlessMiddleware.html":{}},"body":{"classes/Server.html":{},"injectables/UnlessMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":282,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["update",{"_index":455,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@body",{"_index":490,"title":{},"body":{"controllers/UserController.html":{}}}],["update(data",{"_index":467,"title":{},"body":{"controllers/UserController.html":{}}}],["update(params",{"_index":122,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["upto",{"_index":633,"title":{},"body":{"index.html":{}}}],["use",{"_index":357,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"license.html":{}}}],["use(@req",{"_index":373,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["use(middleware",{"_index":442,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["use(req",{"_index":358,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["useguards",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":110,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.controller",{"_index":496,"title":{},"body":{"modules/UserModule.html":{}}}],["user.cpf",{"_index":85,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["user.secret",{"_index":114,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":473,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.validate",{"_index":550,"title":{},"body":{"modules/ValidatorModule.html":{}}}],["user/user.module",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.service",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercontroller",{"_index":450,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercreated",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercreated.email",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercreated.id",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercreateinput",{"_index":75,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["userdata",{"_index":464,"title":{},"body":{"controllers/UserController.html":{}}}],["userloggedin",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["usermodel",{"_index":474,"title":{},"body":{"controllers/UserController.html":{}}}],["usermodule",{"_index":147,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userorderbyinput",{"_index":538,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":189,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdateinput",{"_index":123,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["uservalidator",{"_index":497,"title":{"classes/UserValidator.html":{}},"body":{"modules/UserModule.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{}}}],["userwhereinput",{"_index":537,"title":{},"body":{"injectables/UserService.html":{}}}],["userwhereuniqueinput",{"_index":124,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usuário",{"_index":379,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["usuários",{"_index":525,"title":{},"body":{"injectables/UserService.html":{}}}],["utc",{"_index":372,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["utils",{"_index":49,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["utils/validator/user.validate",{"_index":498,"title":{},"body":{"modules/UserModule.html":{}}}],["utils/validator/validator.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["vai",{"_index":433,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["validator",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["validatormodule",{"_index":148,"title":{"modules/ValidatorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ValidatorModule.html":{},"modules.html":{},"overview.html":{}}}],["valor",{"_index":510,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["valores",{"_index":519,"title":{},"body":{"injectables/UserService.html":{}}}],["variable",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":723,"title":{"miscellaneous/variables.html":{}},"body":{}}],["variáveis",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verifica",{"_index":541,"title":{},"body":{"injectables/UserService.html":{}}}],["verificação",{"_index":394,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["visão",{"_index":717,"title":{},"body":{"overview.html":{}}}],["voc",{"_index":437,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["void",{"_index":445,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["warning",{"_index":407,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["warranties",{"_index":686,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":682,"title":{},"body":{"license.html":{}}}],["whether",{"_index":699,"title":{},"body":{"license.html":{}}}],["without",{"_index":657,"title":{},"body":{"license.html":{}}}],["yarn",{"_index":612,"title":{},"body":{"index.html":{}}}],["yarnprisma",{"_index":623,"title":{},"body":{"index.html":{}}}],["yarnto",{"_index":610,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AgencyController.html":{"url":"controllers/AgencyController.html","title":"controller - AgencyController","body":"\n                   \n\n\n\n\n\n\n  Controladores\n  AgencyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Arquivo\n        \n        \n            src/agency/agency.controller.ts\n        \n\n            \n                Prefixo\n            \n            \n                agency\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('agency')\nexport class AgencyController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"modules/AgencyModule.html":{"url":"modules/AgencyModule.html","title":"module - AgencyModule","body":"\n                   \n\n\n\n\n    Módulos\n    AgencyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AgencyModule\n\n\n\ncluster_AgencyModule_providers\n\n\n\n\nAgencyService\n\nAgencyService\n\n\n\nAgencyModule\n\nAgencyModule\n\nAgencyModule -->\n\nAgencyService->AgencyModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAgencyModule -->\n\nPrismaService->AgencyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Resetar\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Arquivo\n        \n        \n            src/agency/agency.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AgencyService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controladores\n                    \n                        \n                            AgencyController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from '@prisma/prisma.service';\nimport { AgencyService } from './agency.service';\nimport { AgencyController } from './agency.controller';\n\n@Module({\n    imports: [],\n    controllers: [\n        // AgencyController\n    AgencyController],\n    providers: [\n        AgencyService,\n        PrismaService\n    ],\n})\nexport class AgencyModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"injectables/AgencyService.html":{"url":"injectables/AgencyService.html","title":"injectable - AgencyService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injetáveis\n  AgencyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Arquivo\n        \n        \n            src/agency/agency.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '@prisma/prisma.service';\n\n@Injectable()\nexport class AgencyService {\n\n    // constructor(\n    //     private readonly prisma: PrismaService,\n    //     private readonly utils: PrismaService,\n    // ) { }\n\n    // async getOne(id): Promise {\n    //     return this.prisma.user.findOne({\n    //         where: {\n    //             id: Number(id)\n    //         },\n    //     });\n    // }\n\n    // async getMany(query?: {\n    //     skip?: string\n    //     take?: string\n    //     orderBy?: any\n    // }): Promise {\n\n    //     const orderBy = query.orderBy ? query.orderBy.split(',') : []\n\n    //     return this.prisma.user.findMany({\n    //         skip: Number(query.skip) || 0,\n    //         take: Number(query.take) || 100,\n    //         orderBy: orderBy?.length ? { [orderBy[0]]: orderBy[1] } : {\n    //             id: 'asc'\n    //         }\n    //     });\n    // }\n\n    // async create(data: UserCreateInput): Promise {\n    //     try {\n    //         data.secret = await bcrypt.hash(data.secret, 10);\n    //         const existsUser = await this.getByUserWhereUniqueInput(data, true)\n    //         // existsUser.find(user => user.cpf === data.cpf);\n    //         console.log(`existsUser: ${existsUser.length ? true : false}`)\n    //         if (!existsUser.length) {\n    //             // const {  } = data\n    //             return await this.prisma.user.create({ data })\n    //         }\n\n    //         // existsUser.some(element => {\n    //         //     console.dir(element)\n    //         // })\n\n    //         return {\n    //             message: 'email, cpf, nickname devem ser únicos',\n    //             error: 'Chave única duplicada'\n    //         }\n    //     } catch (error) {\n    //         return error.message\n    //     }\n    // }\n\n    // public async sigin(email: string, hashedPassword: string) {\n    //     try {\n    //         const user = await this.getByEmail(email);\n    //         const isPasswordMatching = await bcrypt.compare(\n    //             hashedPassword,\n    //             user.secret\n    //         );\n    //         if (!isPasswordMatching) {\n    //             throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n    //         }\n    //         user.secret = undefined;\n    //         return user;\n    //     } catch (error) {\n    //         throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n    //     }\n    // }\n\n    // async update(params: {\n    //     data: UserUpdateInput;\n    //     where: UserWhereUniqueInput;\n    // }): Promise {\n    //     const { where, data } = params;\n    //     data.secret = await bcrypt.hash(data.secret, 10);\n    //     return this.prisma.user.update({\n    //         data,\n    //         where\n    //     });\n    // }\n\n    // async delete(where: UserWhereUniqueInput): Promise {\n    //     return this.prisma.user.delete({\n    //         where,\n    //     });\n    // }\n\n    // async getByEmail(email: string): Promise {\n    //     const getByEmail = await this.prisma.user.findOne({\n    //         where: { email },\n    //     })\n    //     return getByEmail\n    // }\n\n\n    // async getByUserWhereUniqueInput(unique: UserWhereUniqueInput, compareNullValues = false): Promise {\n    //     const { email, cpf, nickname } = unique\n    //     const select = 'SELECT * FROM public.\"User\"'\n\n    //     const andNotNicknameIsNull = compareNullValues ? 'AND NOT nickname ISNULL' : ''\n\n    //     const condition = `cpf = '${cpf}' OR email = '${email}' OR (nickname = '${nickname}' ${andNotNicknameIsNull})`\n    //     const getByUserWhereUniqueInput = await this.prisma.$queryRaw(`${select} WHERE ${condition};`)\n    //     console.log(`Query existsUser`)\n    //     console.dir(`${select} WHERE ${condition};`)\n\n    //     return getByUserWhereUniqueInput\n    // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Módulos\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAgencyModule\n\nAgencyModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAgencyModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nValidatorModule\n\nValidatorModule\n\nAppModule -->\n\nValidatorModule->AppModule\n\n\n\n\n\nAgencyService\n\nAgencyService\n\nAppModule -->\n\nAgencyService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Resetar\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Arquivo\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AgencyService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controladores\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AgencyModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            ValidatorModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { ConfigModule } from '@nestjs/config';\n\nimport configuration from './config/configuration';\nimport { PrismaService } from './prisma/prisma.service';\nimport { UserModule } from './user/user.module';\nimport { HealthController } from './health.controller';\nimport { ValidatorModule } from './utils/validator/validator.module';\nimport { AgencyService } from './agency/agency.service';\nimport { AgencyModule } from './agency/agency.module';\n\n@Module({\n    imports: [\n        UserModule,\n        TerminusModule,\n        ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configuration]\n        }),\n        ValidatorModule,\n        AgencyModule\n    ],\n    controllers: [HealthController],\n    providers: [PrismaService, AgencyService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controladores\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Arquivo\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefixo\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Métodos\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                autenticar\n                            \n                            \n                                    Public\n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Métodos\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            autenticar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    autenticar(res, data)\n                \n            \n\n            \n                \n                    Decoradores : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Definido em src/auth/auth.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        Não\n                                    \n\n\n                                \n                                \n                                    data\n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(res, data)\n                \n            \n\n            \n                \n                    Decoradores : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Definido em src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        Não\n                                    \n\n\n                                \n                                \n                                    data\n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Res, UseGuards } from '@nestjs/common'\nimport { UserService } from '../user/user.service'\n\nimport { User } from '@prisma/client'\nconst jwt = require('jsonwebtoken')\n\nconst bcrypt = require('bcrypt')\n\n@Controller('user')\nexport class AuthController {\n\n    constructor(\n        private userService: UserService,\n    ) { }\n\n\n    @Post('/signup')\n    public async signup(@Res() res, @Body() data): Promise {\n        // data.secret = bcrypt.hashSync(data.secret, 10);\n        const newUser = await this.userService.create(data)\n        console.log('newUser:')\n        console.dir(newUser)\n\n        if (newUser.hasOwnProperty('id')) return res.status(201).json({\n            id: newUser['id'],\n            fullname: newUser['fullname'],\n            email: newUser['email'],\n            cpf: newUser['cpf'],\n            role: newUser['role'],\n            datebirth: newUser['datebirth'],\n            nickname: newUser['nickname'],\n        })\n        return res.status(400).json(newUser)\n        // const userCreated = await this.userService.create(data)\n        // if\n        // return res.status(201).send({ id: userCreated.id, email: userCreated.email });\n    }\n\n\n    @Post('/signin')\n    public async autenticar(@Res() res, @Body() data): Promise {\n        console.dir(data)\n        if (data.email === '' || data.secret === '') {\n            return res.status(400).json({ auth: false, message: 'Os campos devem ser preenchidos corretamente' });\n        }\n\n        try {\n\n            const existsUser = await this.userService.getByEmail(data.email);\n            console.dir(existsUser)\n\n            if (existsUser?.email != null) {\n                const userLoggedIn = await bcrypt.compare(data.secret, existsUser.secret);\n                console.dir(userLoggedIn)\n                if (userLoggedIn) {\n                    const secret = process.env.SERVER_SECRET_TOKEN || 'Currículo→Único';\n                    const token = jwt.sign({ email: data.email, _id: data.id }, secret, { expiresIn: '2h' });\n\n                    console.log('\\nUsuario', data.email, 'acaba de fazer login no sistema');\n                    console.log(\"x-access-token:\", token, '\\n');\n\n                    res.status(200).json({\n                        auth: true,\n                        _id: data.id,\n                        email: data.email,\n                        expiresIn: '2h',\n                        token: token\n                    });\n\n                } else {\n                    console.log('Senha incorreta')\n                    res.status(401).json({ auth: false, message: 'Email ou senha não confere' });\n                }\n\n            } else {\n                console.log('Email não encontrado')\n                res.status(401).json({ auth: false, message: 'Email ou senha não confere' });\n            }\n\n            return data;\n\n        } catch (err) {\n            res.status(500).json({ auth: false, message: err });\n        }\n    }\n\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"interfaces/BadRequest.html":{"url":"interfaces/BadRequest.html","title":"interface - BadRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BadRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Arquivo\n        \n        \n            src/interfaces/badRequest.interface.ts\n        \n\n            \n                Descrição\n            \n            \n                interface BadRequest\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Propriedades\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Opcional\n                                        error\n                                \n                                \n                                            Opcional\n                                        message\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Propriedades\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Tipo :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Opcional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    error\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Tipo :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Opcional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    message\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface BadRequest {\n    /**\n     * message\n     */\n    message?: string\n    /**\n     * error\n     */\n    error?: any\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controladores\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Arquivo\n        \n        \n            src/health.controller.ts\n        \n\n            \n                Prefixo\n            \n            \n                health\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Métodos\n                    \n                \n                \n                    \n                        \n                            \n                                healthCheck\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Métodos\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            healthCheck\n                        \n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decoradores : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@HealthCheck()\n                \n            \n\n            \n                \n                    Definido em src/health.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Retorna :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            status\n                        \n                        \n                    \n                \n            \n            \n                \nstatus()\n                \n            \n\n            \n                \n                    Decoradores : \n                    \n                    @Get('status')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Definido em src/health.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Retorna :         { server: any; up: boolean; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Dependencies, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { HealthCheckService, DNSHealthIndicator, HealthCheck } from '@nestjs/terminus';\n@Controller('health')\n@Dependencies(HealthCheckService, DNSHealthIndicator)\nexport class HealthController {\n    constructor(\n        private health,\n        private dns,\n    ) { }\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @HealthCheck()\n    healthCheck() {\n        const port = process.env.PORT || 3333\n        return this.health.check([\n            async () =>  await this.dns.pingCheck(process.env.npm_package_NAME, `http://localhost:${port}/api/v1/health/status`),\n            async () => this.dns.pingCheck('zeta-analise', `http://zeta08.primusweb.com.br:${3017}/api/v1/health`),\n        ])\n    }\n    \n    @Get('status')\n    @HttpCode(HttpStatus.OK)\n    status() {\n        return {\n            server: process.env.npm_package_NAME,\n            up: true\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injetáveis\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Arquivo\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Extende\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Métodos\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Métodos\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onModuleDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Definido em src/prisma/prisma.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Retorna :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Definido em src/prisma/prisma.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Retorna :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n  \n  async onModuleInit() {\n    console.log('Prisma connected')\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    console.log('Prisma desconnected')\n    await this.$disconnect();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"classes/Server.html":{"url":"classes/Server.html","title":"class - Server","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Server\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Arquivo\n        \n        \n            src/server.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Métodos\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bootstrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Métodos\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    bootstrap()\n                \n            \n\n\n            \n                \n                    Definido em src/server.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Retorna :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { UnlessMiddleware } from './middleware/router/unless.middleware';\nimport { TokenMiddleware } from './middleware/token/token.middleware';\n/**\n * export const globalPrefix = '/api/v1'\n */\nexport const globalPrefix = '/api/v1'\n/**\n * unless Middleware\n */\nconst unlessMiddleware = new UnlessMiddleware()\n/**\n * token Middleware\n */\nconst tokenMiddleware = new TokenMiddleware()\n/**\n * hot reload\n */\ndeclare const module: any;\n\n\nexport class Server {\n\n    async bootstrap() {\n        const app = await NestFactory.create(AppModule);\n\n        app.setGlobalPrefix(globalPrefix);\n\n        app.use(unlessMiddleware.use(\n            tokenMiddleware.use,\n            `${globalPrefix}/user/signin`,\n            `${globalPrefix}/health/status`,\n        ))\n\n        const server = await app.listen(process.env.PORT || 3333, '0.0.0.0', () => {\n            console.clear()\n            // console.dir(server)\n            console.log(`\\n${process.env.npm_package_NAME} is running in http://localhost:${server.address().port + globalPrefix}`)\n            console.log(process.env.npm_package_DESCRIPTION)\n            console.log(`${new Date().toLocaleDateString()} - ${new Date().toLocaleTimeString()}\\n`);\n        });\n\n        if (module.hot) {\n            module.hot.accept();\n            module.hot.dispose(() => app.close());\n        }\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"injectables/TokenMiddleware.html":{"url":"injectables/TokenMiddleware.html","title":"injectable - TokenMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injetáveis\n  TokenMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Arquivo\n        \n        \n            src/middleware/token/token.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Métodos\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Métodos\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(req, res, next)\n                \n            \n\n\n            \n                \n                    Definido em src/middleware/token/token.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        Não\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        Não\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, Next, Req, Res } from '@nestjs/common';\nconst jwt = require('jsonwebtoken')\n\nconst dataUTC = new Date().getUTCFullYear() + '/' + (new Date().getUTCMonth() + 1) + '/' + new Date().getUTCDate();\nconst horaUTC = new Date().getUTCHours() + ':' + new Date().getUTCMinutes() + ':' + new Date().getUTCSeconds() + ' UTC';\n@Injectable()\nexport class TokenMiddleware implements NestMiddleware {\n\n    use(@Req() req, @Res() res, @Next() next) {\n\n        const authorizedLog = logedIn => {\n            console.log('\\nAcesso permitido ao usuário', logedIn.email)\n            console.log(\"by temAcesso\")\n\n            console.log(\"\\n\")\n            console.log(\"request:\", req.path, \"→ Type:\", req.method);\n            console.log(\"in:\", req.headers.referer);\n            console.log(\"on:\", dataUTC, 'at', horaUTC);\n            console.log(\"by AuthMiddleware\\n\");\n        }\n\n\n        const hasAccess = logedIn => {\n\n            // TODO: Verificação de acesso aos recursos\n\n            if (logedIn) {\n                authorizedLog(logedIn)\n                return true\n            }\n            console.log('\\nAcesso negado em:', req.headers.referer)\n            console.log(\"request:\", req.path, \"→ Type:\", req.method);\n            console.log(\"by temAcesso\");\n            return false\n        }\n\n        const unauthorizedLog = () => {\n            console.log(\"\\nUnauthorized\");\n            console.log(\"request:\", req.path, \"→ Type:\", req.method);\n            console.log(\"in:\", req.headers.referer);\n            console.log(\"on:\", dataUTC, 'at', horaUTC);\n            console.log(\"by TokenMiddleware\\n\");\n        }\n\n        const token = req.headers[\"x-access-token\"];\n\n        if (!token) {\n            return res\n                .status(403)\n                .send({\n                    auth: false,\n                    message: 'Nenhum token fornecido',\n                    warning: 'Realize o login e tente novamente'\n                });\n        }\n\n        const secret = process.env.SERVER_SECRET_TOKEN || 'Currículo→Único';\n        jwt.verify(token, secret, (err, decoded) => {\n            if (err) {\n                if (err.message === 'jwt expired') {\n                    const tokenError = {\n                        name: err.name,\n                        message: 'Sua sessão expirou. Efetue o login novamente',\n                        expiredAt: err.expiredAt\n                    }\n                    unauthorizedLog()\n\n                    return res.status(401).send(tokenError)\n                }\n\n                unauthorizedLog()\n\n                return res.status(403).send({\n                    auth: false,\n                    message: \"Falha ao autenticar o token.\",\n                    warning: 'Token fornecido está incorreto'\n                });\n            }\n            // ! No momento, sempre vai retornar true, TODO à fazer em temAcesso\n            if (hasAccess(decoded))\n                next();\n            else\n                return res.status(403).json({\n                    auth: false,\n                    message: \"Você não tem acesso à este recurso.\"\n                })\n        });\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"injectables/UnlessMiddleware.html":{"url":"injectables/UnlessMiddleware.html","title":"injectable - UnlessMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injetáveis\n  UnlessMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Arquivo\n        \n        \n            src/middleware/router/unless.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Métodos\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Métodos\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(middleware, ...paths: any[])\n                \n            \n\n\n            \n                \n                    Definido em src/middleware/router/unless.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Tipo\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    middleware\n                                    \n                                    \n\n                                    \n                                        Não\n                                    \n\n\n                                \n                                \n                                    paths\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     (req: any, res: any, next: any) => void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class UnlessMiddleware implements NestMiddleware {\n\n    use(middleware, ...paths) {\n        return (req, res, next) => {\n            const pathCheck = paths.some(path => path === req.path)\n            pathCheck ? next() : middleware(req, res, next)\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controladores\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Arquivo\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefixo\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Métodos\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getMany\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Métodos\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decoradores : \n                    \n                    @Delete('/:id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Definido em src/user/user.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Tipo\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMany(query)\n                \n            \n\n            \n                \n                    Decoradores : \n                    \n                    @Get('/')@HttpCode(200)\n                \n            \n\n            \n                \n                    Definido em src/user/user.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(id: UserWhereUniqueInput)\n                \n            \n\n            \n                \n                    Decoradores : \n                    \n                    @Get('/:id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Definido em src/user/user.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Tipo\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            UserWhereUniqueInput\n                                    \n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(res, userData)\n                \n            \n\n            \n                \n                    Decoradores : \n                    \n                    @Post('/')@HttpCode(201)\n                \n            \n\n            \n                \n                    Definido em src/user/user.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        Não\n                                    \n\n\n                                \n                                \n                                    userData\n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data, id: string)\n                \n            \n\n            \n                \n                    Decoradores : \n                    \n                    @Put('/:id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Definido em src/user/user.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Tipo\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        Não\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Response, Get, Param, Post, Body, Put, Delete, HttpCode, Query } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User as UserModel, UserWhereUniqueInput } from '@prisma/client';\n\n@Controller('user')\nexport class UserController {\n    constructor(\n        private readonly userService: UserService,\n        // private readonly postService: PostService,\n    ) { }\n\n    @Post('/')\n    @HttpCode(201)\n    async signup(@Response() res, @Body() userData): Promise {\n        const newUser = await this.userService.create(userData)\n        if (newUser.hasOwnProperty('id')) return res.status(201).json(newUser)\n        return res.status(400).json(newUser)\n    }\n\n    @Get('/')\n    @HttpCode(200)\n    async getMany(@Query() query): Promise {\n        return this.userService.getMany(query)\n    }\n\n    @Get('/:id')\n    @HttpCode(200)\n    async getOne(@Param('id') id: UserWhereUniqueInput): Promise {\n        return this.userService.getOne(id)\n    }\n\n    @Delete('/:id')\n    @HttpCode(200)\n    async delete(@Param('id') id: string): Promise {\n        return this.userService.delete({ id: Number(id) });\n    }\n\n    @Put('/:id')\n    @HttpCode(200)\n    async update(@Body() data, @Param('id') id: string): Promise {\n        return this.userService.update({\n            data: { ...data },\n            where: { id: Number(id) },\n        });\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Módulos\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaService\n\nPrismaService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Resetar\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Arquivo\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controladores\n                    \n                        \n                            UserController\n                        \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { PrismaService } from '../prisma/prisma.service';\n\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { UserValidator } from '@utils/validator/user.validate';\nimport { AuthController } from 'src/auth/auth.controller';\n\n@Module({\n    imports: [],\n    controllers: [\n        UserController,\n        AuthController\n    ],\n    providers: [\n        UserService,\n        PrismaService,\n        UserValidator,\n    ],\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injetáveis\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Arquivo\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Métodos\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getByUserWhereUniqueInput\n                            \n                            \n                                    Async\n                                getMany\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                    Public\n                                    Async\n                                sigin\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Construtor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, utils: PrismaService)\n                    \n                \n                        \n                            \n                                Definido em src/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parâmetros :\n                                    \n                                        \n                                            \n                                                Nome\n                                                    Tipo\n                                                Opcional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            Não\n                                                    \n                                                    \n                                                \n                                                \n                                                        utils\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            Não\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Métodos\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: UserCreateInput)\n                \n            \n\n\n            \n                \n                    Definido em src/user/user.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Tipo\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            UserCreateInput\n                                    \n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(where: UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Definido em src/user/user.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Tipo\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            UserWhereUniqueInput\n                                    \n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Definido em src/user/user.service.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Tipo\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByUserWhereUniqueInput\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByUserWhereUniqueInput(unique: UserWhereUniqueInput, compareNullValues)\n                \n            \n\n\n            \n                \n                    Definido em src/user/user.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Tipo\n                                    Opcional\n                                    Valor padrão\n                                    Descrição\n                                \n                            \n                            \n                                \n                                    unique\n                                    \n                                            UserWhereUniqueInput\n                                    \n\n                                    \n                                        Não\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Recebe os campos unique do usuário\n\n                                    \n                                \n                                \n                                    compareNullValues\n                                    \n                                    \n\n                                    \n                                        Não\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        Recebe uma condição para pesquisa que compara ou não valores nulos default: false\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     Promise\n\n                    \n                    \n                        Retorna um array de todos os usuários que estão nesta condição\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMany(query?: literal type)\n                \n            \n\n\n            \n                \n                    Definido em src/user/user.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Tipo\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Sim\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(id)\n                \n            \n\n\n            \n                \n                    Definido em src/user/user.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            sigin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sigin(email: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Definido em src/user/user.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Tipo\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Não\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(params: literal type)\n                \n            \n\n\n            \n                \n                    Definido em src/user/user.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parâmetros :\n                        \n                            \n                                \n                                    Nome\n                                    Tipo\n                                    Opcional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Não\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Retorna :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PrismaService } from '@prisma/prisma.service';\nimport { BadRequest } from '@interfaces/badRequest.interface';\nimport {\n    UserUpdateInput, User, UserCreateInput, UserWhereUniqueInput,\n    ProfileCreateOneWithoutUserInput,\n    UserWhereInput,\n    UserOrderByInput,\n} from '@prisma/client';\nimport * as bcrypt from 'bcrypt'\n\n@Injectable()\nexport class UserService {\n    constructor(\n        private readonly prisma: PrismaService,\n        private readonly utils: PrismaService,\n    ) { }\n\n    async getOne(id): Promise {\n        return this.prisma.user.findOne({\n            where: {\n                id: Number(id)\n            },\n        });\n    }\n\n    async getMany(query?: {\n        skip?: string\n        take?: string\n        orderBy?: any\n    }): Promise {\n\n        const orderBy = query.orderBy ? query.orderBy.split(',') : []\n\n        return this.prisma.user.findMany({\n            skip: Number(query.skip) || 0,\n            take: Number(query.take) || 100,\n            orderBy: orderBy?.length ? { [orderBy[0]]: orderBy[1] } : {\n                id: 'asc'\n            }\n        });\n    }\n\n    async create(data: UserCreateInput): Promise {\n        try {\n            data.secret = await bcrypt.hash(data.secret, 10);\n            const existsUser = await this.getByUserWhereUniqueInput(data, true)\n            // existsUser.find(user => user.cpf === data.cpf);\n            console.log(`existsUser: ${existsUser.length ? true : false}`)\n            if (!existsUser.length) {\n                // const {  } = data\n                return await this.prisma.user.create({ data })\n            }\n\n            // existsUser.some(element => {\n            //     console.dir(element)\n            // })\n\n            return {\n                message: 'email, cpf, nickname devem ser únicos',\n                error: 'Chave única duplicada'\n            }\n        } catch (error) {\n            return error.message\n        }\n    }\n\n    public async sigin(email: string, hashedPassword: string) {\n        try {\n            const user = await this.getByEmail(email);\n            const isPasswordMatching = await bcrypt.compare(\n                hashedPassword,\n                user.secret\n            );\n            if (!isPasswordMatching) {\n                throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n            }\n            user.secret = undefined;\n            return user;\n        } catch (error) {\n            throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    async update(params: {\n        data: UserUpdateInput;\n        where: UserWhereUniqueInput;\n    }): Promise {\n        const { where, data } = params;\n        data.secret = await bcrypt.hash(data.secret, 10);\n        return this.prisma.user.update({\n            data,\n            where\n        });\n    }\n\n    async delete(where: UserWhereUniqueInput): Promise {\n        return this.prisma.user.delete({\n            where,\n        });\n    }\n\n    async getByEmail(email: string): Promise {\n        const getByEmail = await this.prisma.user.findOne({\n            where: { email },\n        })\n        return getByEmail\n    }\n\n\n    /**\n     * @param unique Recebe os campos unique do usuário\n     * @param compareNullValues Recebe uma condição para pesquisa que compara ou não valores nulos `default: false`\n     * @description Este método verifica de acordo com os parâmetros, a existência desses usuários\n     * @returns Retorna um array de todos os usuários que estão nesta condição\n     * */\n    async getByUserWhereUniqueInput(unique: UserWhereUniqueInput, compareNullValues = false): Promise {\n        const { email, cpf, nickname } = unique\n        const select = 'SELECT * FROM public.\"User\"'\n\n        const andNotNicknameIsNull = compareNullValues ? 'AND NOT nickname ISNULL' : ''\n\n        const condition = `cpf = '${cpf}' OR email = '${email}' OR (nickname = '${nickname}' ${andNotNicknameIsNull})`\n        const getByUserWhereUniqueInput = await this.prisma.$queryRaw(`${select} WHERE ${condition};`)\n        console.log(`Query existsUser`)\n        console.dir(`${select} WHERE ${condition};`)\n\n        return getByUserWhereUniqueInput\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"classes/UserValidator.html":{"url":"classes/UserValidator.html","title":"class - UserValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Arquivo\n        \n        \n            src/utils/validator/user.validate.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserValidator {\n    // https://www.npmjs.com/package/validator.ts%20%20OR%20https://www.npmjs.com/package/validate\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"modules/ValidatorModule.html":{"url":"modules/ValidatorModule.html","title":"module - ValidatorModule","body":"\n                   \n\n\n\n\n    Módulos\n    ValidatorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Arquivo\n        \n        \n            src/utils/validator/validator.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserValidator } from './user.validate';\n\n@Module({\n    imports: [ ],\n    controllers: [ ],\n    providers: [\n        UserValidator\n    ],\n})\nexport class ValidatorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Cobertura da documentação\n\n\n\n    \n\n\n\n    \n        \n            Arquivo\n            Tipo\n            Identificador\n            Statements\n        \n    \n    \n        \n            \n                \n                src/agency/agency.controller.ts\n            \n            controller\n            AgencyController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/agency/agency.service.ts\n            \n            injectable\n            AgencyService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            variable\n            bcrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            variable\n            jwt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interfaces/badRequest.interface.ts\n            \n            interface\n            BadRequest\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/router/unless.middleware.ts\n            \n            injectable\n            UnlessMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middleware/token/token.middleware.ts\n            \n            injectable\n            TokenMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middleware/token/token.middleware.ts\n            \n            variable\n            dataUTC\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/token/token.middleware.ts\n            \n            variable\n            horaUTC\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/token/token.middleware.ts\n            \n            variable\n            jwt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            class\n            Server\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            variable\n            globalPrefix\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            variable\n            module\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            variable\n            tokenMiddleware\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            variable\n            unlessMiddleware\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/utils/validator/user.validate.ts\n            \n            class\n            UserValidator\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependências\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/terminus : ^7.0.1\n        \n            @nestjsplus/redirect : ^1.0.0\n        \n            @prisma/client : ^2.7.1\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            cookie-parser : ^1.4.5\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nCurrículo Único - NestJS + Prisma + Postgress\n\n\nMy new Description app\n    \n\n\n\n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n      \n  \n    \n   -->\n\n  \n      \n  \n  \n      \n  \n\n\n\n\n\n\nParticipants\n\n\n\n\n\n\n\n\n\n| Natan Cipriano\n\n\n\nGetting started\nTo install the dependencies\nyarnTo boot the server\nyarn start # to start in production mode\n#  OR\nyarn ts-dev # to start in development mode\nIf you don't have yarn installed:\nnpm install -g yarnPrisma:\nTo save changes to the database (./prisma/schema.prisma)\nyarn save\n# OR\nnpx prisma migrate save --name nameOfYourMigrate --experimentalTo apply changes\nyarn upTo generate the interfaces from the changes made\nyarn generateTo have access to a graphical interface of your database\nyarn studioShortcuts:\n# yarn save && yarn up && yarn generate\nyarn prisma\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2020 Natan Cipriano\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Módulos\n\n\n    \n            \n                \n                    \n                        AgencyModule\n                    \n                    \n                                \n                                    \n                                        Seu browser não tem suporte a SVG\n                                    \n                                \n                        \n                            Navegar\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Seu browser não tem suporte a SVG\n                                    \n                                \n                        \n                            Navegar\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Seu browser não tem suporte a SVG\n                                    \n                                \n                        \n                            Navegar\n                        \n                    \n                \n            \n            \n                \n                    \n                        ValidatorModule\n                    \n                    \n                                \n                                    Sem gráfico disponível.\n                                \n                        \n                            Navegar\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Visão geral\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AgencyModule\n\n\n\ncluster_AgencyModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAgencyService\n\nAgencyService\n\n\n\nAgencyModule\n\nAgencyModule\n\nAgencyModule -->\n\nAgencyService->AgencyModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAgencyService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAgencyModule -->\n\nPrismaService->AgencyModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\nAppModule -->\n\nAgencyModule->AppModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nValidatorModule\n\nValidatorModule\n\nAppModule -->\n\nValidatorModule->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Resetar\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Módulos\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controladores\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injetáveis\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscelânea\n  Variáveis\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bcrypt   (src/.../auth.controller.ts)\n                        \n                        \n                            dataUTC   (src/.../token.middleware.ts)\n                        \n                        \n                            globalPrefix   (src/.../server.ts)\n                        \n                        \n                            horaUTC   (src/.../token.middleware.ts)\n                        \n                        \n                            jwt   (src/.../auth.controller.ts)\n                        \n                        \n                            jwt   (src/.../token.middleware.ts)\n                        \n                        \n                            module   (src/.../server.ts)\n                        \n                        \n                            server   (src/.../main.ts)\n                        \n                        \n                            tokenMiddleware   (src/.../server.ts)\n                        \n                        \n                            unlessMiddleware   (src/.../server.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.controller.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            bcrypt\n                            \n                        \n                    \n                \n                    \n                        \n                            Valor padrão : require('bcrypt')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwt\n                            \n                        \n                    \n                \n                    \n                        \n                            Valor padrão : require('jsonwebtoken')\n                        \n                    \n\n\n            \n        \n\n    src/middleware/token/token.middleware.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            dataUTC\n                            \n                        \n                    \n                \n                    \n                        \n                            Valor padrão : new Date().getUTCFullYear() + '/' + (new Date().getUTCMonth() + 1) + '/' + new Date().getUTCDate()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            horaUTC\n                            \n                        \n                    \n                \n                    \n                        \n                            Valor padrão : new Date().getUTCHours() + ':' + new Date().getUTCMinutes() + ':' + new Date().getUTCSeconds() + ' UTC'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwt\n                            \n                        \n                    \n                \n                    \n                        \n                            Valor padrão : require('jsonwebtoken')\n                        \n                    \n\n\n            \n        \n\n    src/server.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            globalPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Tipo :         string\n\n                        \n                    \n                    \n                        \n                            Valor padrão : '/api/v1'\n                        \n                    \n\n                \n                    \n                        export const globalPrefix = '/api/v1'\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            module\n                            \n                        \n                    \n                \n                    \n                        \n                            Tipo :         any\n\n                        \n                    \n\n                \n                    \n                        hot reload\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tokenMiddleware\n                            \n                        \n                    \n                \n                    \n                        \n                            Valor padrão : new TokenMiddleware()\n                        \n                    \n\n                \n                    \n                        token Middleware\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            unlessMiddleware\n                            \n                        \n                    \n                \n                    \n                        \n                            Valor padrão : new UnlessMiddleware()\n                        \n                    \n\n                \n                    \n                        unless Middleware\n\n                    \n                \n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Valor padrão : new Server()\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        Nenhum resultado correspondente \"\"\n    \n\n"}}
}
