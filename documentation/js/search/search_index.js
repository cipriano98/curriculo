var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AgencyController.html",[0,0.958,1,1.731]],["body/controllers/AgencyController.html",[0,1.407,1,3.007,2,1.407,3,0.569,4,0.569,5,0.479,6,3.433,7,2.541,8,4.208,9,0.765,10,0.042,11,0.765,12,4.208,13,0.569,14,0.315,15,0.032,16,0.038,17,0.032]],["title/modules/AgencyModule.html",[18,0.674,19,1.523]],["body/modules/AgencyModule.html",[1,3.062,2,1.451,3,0.455,4,0.455,5,0.384,9,0.922,10,0.044,11,0.612,13,0.455,14,0.252,15,0.026,16,0.033,17,0.026,18,1.13,19,2.943,20,1.413,21,1.261,22,2.034,23,2.034,24,1.79,25,2.552,26,2.034,27,2.748,28,2.748,29,2.532,30,1.796,31,2.621,32,2.034,33,1.79,34,3.369,35,1.79,36,3.369,37,3.369,38,2.034]],["title/injectables/AgencyService.html",[29,1.35,39,0.761]],["body/injectables/AgencyService.html",[3,0.211,4,0.211,5,0.178,9,0.452,10,0.046,11,0.284,13,0.211,14,0.117,15,0.012,16,0.019,17,0.012,29,1.171,30,1.035,35,0.829,39,0.659,40,0.735,41,1.273,42,0.829,43,1.321,44,1.726,45,1.084,46,1.273,47,1.877,48,1.084,49,2.602,50,1.982,51,2.027,52,1.501,53,1.084,54,1.084,55,2.027,56,2.049,57,2.027,58,2.526,59,1.641,60,1.273,61,1.273,62,1.273,63,1.273,64,1.084,65,1.273,66,1.273,67,1.273,68,1.273,69,1.273,70,1.273,71,1.273,72,1.273,73,1.726,74,1.726,75,1.877,76,2.027,77,1.726,78,1.726,79,1.273,80,1.171,81,1.273,82,1.273,83,1.273,84,1.273,85,2.027,86,1.501,87,2.328,88,1.273,89,1.273,90,1.273,91,0.829,92,2.678,93,2.452,94,2.678,95,1.084,96,1.084,97,1.273,98,2.151,99,1.273,100,1.273,101,1.273,102,1.726,103,1.273,104,1.084,105,1.273,106,2.027,107,1.501,108,1.273,109,2.027,110,1.273,111,2.027,112,2.027,113,1.043,114,2.027,115,2.027,116,1.726,117,2.027,118,1.273,119,1.273,120,1.273,121,2.151,122,1.273,123,1.273,124,1.273,125,1.273,126,1.273,127,2.027,128,1.273,129,2.027,130,1.273,131,2.027,132,1.273,133,2.027,134,1.273,135,2.526,136,2.027,137,1.273,138,1.273,139,1.273]],["title/modules/AppModule.html",[18,0.674,140,1.523]],["body/modules/AppModule.html",[2,1.286,3,0.38,4,0.38,5,0.32,9,0.992,10,0.045,11,0.511,13,0.38,14,0.21,15,0.021,16,0.029,17,0.021,18,1.032,19,2.712,20,1.178,21,1.052,22,1.696,23,1.696,24,1.493,25,2.331,26,1.696,29,2.404,30,1.706,31,2.322,32,1.696,33,1.493,35,1.493,38,2.322,80,1.323,140,2.991,141,2.291,142,2.809,143,2.291,144,2.712,145,2.712,146,2.809,147,2.648,148,3.846,149,1.95,150,2.809,151,2.291,152,3.846,153,2.809,154,2.809,155,2.809,156,2.809,157,2.809,158,2.809,159,2.809,160,2.809,161,2.809]],["title/controllers/AuthController.html",[0,0.958,162,1.731]],["body/controllers/AuthController.html",[0,0.645,2,0.645,3,0.261,4,0.261,5,0.22,7,1.165,9,0.644,10,0.045,11,0.351,13,0.261,14,0.144,15,0.015,16,0.022,17,0.015,42,1.025,43,1.025,47,1.881,49,2.391,50,1.787,52,1.77,59,1.605,73,1.34,74,2.036,75,1.661,77,1.34,78,1.34,80,0.909,86,2.391,87,2.814,91,2.104,92,3.114,93,1.34,94,1.34,95,1.34,96,1.34,102,1.34,104,3.114,107,1.77,162,1.77,163,1.34,164,0.512,165,1.097,166,2.391,167,2.391,168,1.929,169,2.036,170,2.932,171,1.097,172,1.929,173,1.558,174,1.381,175,1.381,176,2.571,177,1.097,178,1.574,179,2.932,180,1.929,181,2.892,182,1.574,183,1.929,184,1.487,185,1.929,186,1.025,187,1.025,188,1.34,189,1.025,190,1.34,191,1.574,192,1.929,193,1.929,194,1.574,195,2.932,196,1.929,197,1.929,198,1.574,199,1.929,200,1.929,201,1.929,202,1.929,203,1.929,204,1.929,205,1.929,206,1.929,207,1.929,208,1.929,209,1.929,210,1.574,211,1.929,212,1.929,213,1.929,214,1.929,215,1.929,216,1.929,217,3.96,218,1.929,219,3.474,220,1.574,221,1.574,222,1.929,223,1.929,224,1.929,225,1.929,226,1.929,227,1.929,228,2.932,229,1.929,230,1.929,231,1.929,232,2.391,233,1.574,234,1.574,235,3.474,236,1.929,237,2.932,238,2.932,239,2.932,240,2.932,241,1.929,242,1.929,243,1.34,244,1.574,245,1.574,246,1.929,247,1.929,248,1.34,249,1.929,250,1.929,251,1.929,252,1.929,253,2.932,254,2.391,255,2.932,256,2.462,257,2.932,258,1.929,259,1.929,260,2.391,261,1.929]],["title/interfaces/BadRequest.html",[262,1.523,263,1.731]],["body/interfaces/BadRequest.html",[3,0.534,4,0.534,5,0.45,10,0.042,13,0.534,15,0.03,16,0.036,17,0.03,56,2.745,91,2.854,98,3.73,164,1.049,175,2.53,262,2.101,263,2.897,264,3.225,265,3.225,266,4.798,267,2.013]],["title/controllers/HealthController.html",[0,0.958,147,1.731]],["body/controllers/HealthController.html",[0,1.024,2,1.024,3,0.414,4,0.414,5,0.349,7,1.85,9,0.741,10,0.045,11,0.557,13,0.414,14,0.229,15,0.023,16,0.031,17,0.023,21,1.147,42,1.628,43,2.167,47,1.711,50,1.711,59,1.024,75,1.285,80,1.443,147,2.463,149,2.127,164,0.813,165,1.527,169,2.832,171,1.527,177,1.527,268,2.499,269,4.079,270,5.235,271,4.889,272,3.064,273,3.064,274,3.064,275,3.064,276,1.922,277,3.327,278,3.064,279,2.499,280,2.499,281,3.064,282,4.079,283,3.064,284,3.064,285,3.064,286,4.079,287,3.064,288,3.064,289,2.499,290,3.064,291,3.064,292,3.064,293,3.064,294,3.064,295,3.064,296,3.064,297,3.064]],["title/injectables/PrismaService.html",[30,0.958,39,0.761]],["body/injectables/PrismaService.html",[3,0.468,4,0.468,5,0.395,9,0.803,10,0.044,11,0.63,13,0.468,14,0.259,15,0.026,16,0.034,17,0.026,30,1.477,39,1.173,40,1.632,47,2.271,75,1.854,164,0.919,165,1.654,171,1.654,177,1.654,186,1.841,298,2.826,299,4.419,300,4.866,301,5.413,302,5.413,303,3.464,304,3.464,305,2.406,306,4.419,307,3.464,308,3.464,309,3.464,310,3.464]],["title/classes/Server.html",[14,0.215,276,1.35]],["body/classes/Server.html",[3,0.41,4,0.41,5,0.346,9,0.885,10,0.045,13,0.548,14,0.227,15,0.023,16,0.031,17,0.023,18,0.714,24,2.588,47,1.915,59,1.745,75,1.7,113,1.915,140,1.613,164,0.805,165,1.517,171,1.136,177,1.136,276,2.15,289,2.476,311,2.108,312,2.108,313,3.035,314,3.035,315,2.476,316,3.035,317,2.425,318,3.035,319,2.425,320,3.035,321,2.815,322,2.476,323,3.035,324,3.035,325,3.035,326,3.035,327,3.035,328,3.035,329,3.035,330,3.035,331,3.035,332,3.035,333,3.035,334,3.035,335,3.035,336,3.035,337,3.035,338,3.035,339,3.035,340,3.035,341,3.035,342,3.035,343,3.035,344,3.035,345,3.035]],["title/injectables/TokenMiddleware.html",[39,0.761,319,1.523]],["body/injectables/TokenMiddleware.html",[3,0.267,4,0.267,5,0.225,9,0.358,10,0.045,11,0.358,13,0.267,14,0.148,15,0.015,16,0.023,17,0.015,39,0.791,40,0.929,50,1.897,59,1.654,80,1.404,86,2.418,91,2.128,113,1.897,164,0.523,165,1.116,166,1.609,171,0.738,173,1.048,174,1.404,175,0.929,176,2.73,177,0.738,187,1.584,188,1.369,219,2.931,232,2.431,233,1.609,234,1.609,235,3.689,243,1.369,244,1.609,245,2.431,248,1.369,256,1.369,260,2.431,267,1.507,305,1.369,319,1.584,346,1.369,347,2.07,348,1.972,349,3.689,350,1.972,351,2.931,352,2.431,353,2.495,354,1.609,355,1.609,356,1.369,357,1.609,358,2.495,359,1.609,360,1.609,361,1.609,362,1.609,363,1.972,364,1.972,365,3.593,366,2.981,367,1.972,368,2.981,369,1.609,370,1.972,371,4.004,372,3.593,373,1.972,374,3.593,375,2.931,376,3.593,377,2.981,378,3.593,379,2.981,380,1.972,381,1.972,382,2.981,383,1.972,384,2.981,385,1.972,386,1.972,387,1.972,388,1.972,389,2.981,390,3.593,391,1.972,392,1.972,393,1.972,394,1.972,395,1.972,396,1.972,397,2.981,398,2.981,399,1.972,400,3.593,401,1.972,402,1.972,403,2.981,404,1.972,405,1.972,406,1.972,407,1.972,408,1.972,409,1.972,410,1.972,411,1.972,412,1.972,413,1.972,414,1.972,415,1.972,416,1.972,417,1.972,418,1.972,419,1.972,420,1.972,421,1.972,422,1.972,423,1.972,424,1.972,425,1.972,426,1.972,427,1.972,428,1.972,429,1.609,430,1.972]],["title/injectables/UnlessMiddleware.html",[39,0.761,317,1.523]],["body/injectables/UnlessMiddleware.html",[3,0.467,4,0.467,5,0.393,9,0.627,10,0.045,11,0.627,13,0.467,14,0.259,15,0.026,16,0.033,17,0.026,39,1.17,40,1.626,50,1.448,59,1.154,164,0.916,165,1.651,171,1.292,173,1.834,174,1.626,175,1.626,176,2.933,177,1.292,267,1.448,305,2.397,317,2.343,347,3.062,349,4.175,351,3.597,352,3.597,375,2.816,431,2.816,432,4.409,433,4.858,434,3.452,435,3.452,436,3.452,437,4.409,438,3.452,439,3.452,440,3.452]],["title/controllers/UserController.html",[0,0.958,441,1.731]],["body/controllers/UserController.html",[0,0.73,2,0.73,3,0.295,4,0.295,5,0.249,7,1.318,9,0.694,10,0.045,11,0.397,13,0.295,14,0.163,15,0.017,16,0.024,17,0.017,42,1.16,43,1.709,44,2.233,47,2.286,48,1.516,49,3.123,50,1.97,52,3.071,53,2.233,54,1.516,56,2.495,59,0.73,75,0.916,87,2.542,107,1.941,121,2.924,164,0.579,165,1.204,167,2.623,169,3.117,171,1.681,173,2.385,174,2.115,175,2.115,176,1.941,177,1.681,178,1.781,181,2.623,182,2.623,184,1.601,186,1.16,191,1.781,194,1.781,198,1.781,210,1.781,267,1.601,279,1.781,441,1.941,442,1.781,443,3.114,444,2.623,445,2.623,446,2.623,447,2.183,448,2.183,449,2.183,450,2.183,451,2.183,452,3.114,453,2.183,454,2.183,455,3.817,456,2.183,457,2.183,458,2.183,459,2.183,460,2.183,461,2.183,462,1.781,463,2.183,464,1.781,465,2.183,466,3.215,467,2.183,468,2.183,469,2.183,470,2.183,471,4.211,472,2.183,473,2.183,474,2.183,475,2.183,476,2.183,477,2.183,478,2.183,479,2.183,480,2.183,481,2.183,482,2.183,483,2.183]],["title/modules/UserModule.html",[18,0.674,144,1.523]],["body/modules/UserModule.html",[2,1.41,3,0.436,4,0.436,5,0.367,9,0.965,10,0.045,11,0.586,13,0.436,14,0.242,15,0.024,16,0.032,17,0.024,18,1.106,20,1.353,21,1.207,22,1.947,23,1.947,24,1.714,25,2.499,26,1.947,30,1.775,31,2.547,32,1.947,33,1.714,35,1.714,38,1.947,144,2.916,162,2.839,184,2.228,441,2.839,464,2.631,484,2.631,485,2.631,486,3.225,487,3.225,488,2.242,489,3.225,490,3.225]],["title/injectables/UserService.html",[39,0.761,184,1.203]],["body/injectables/UserService.html",[3,0.163,4,0.163,5,0.137,9,0.55,10,0.045,11,0.219,13,0.163,14,0.09,15,0.009,16,0.015,17,0.009,30,1.29,35,0.64,39,0.534,40,0.567,42,1.069,43,1.069,44,1.396,45,1.396,46,2.112,47,2.188,48,1.396,49,2.854,50,1.819,51,1.64,52,1.563,53,0.836,54,1.396,55,1.64,56,2.366,57,1.64,58,2.112,59,1.553,60,0.982,61,0.982,62,0.982,63,0.982,64,0.836,65,0.982,66,0.982,67,0.982,68,0.982,69,0.982,70,0.982,71,1.64,72,2.467,73,1.396,74,1.396,75,1.697,76,1.64,77,1.396,78,1.396,79,0.982,80,0.947,81,0.982,82,0.982,83,0.982,84,0.982,85,1.64,86,2.031,87,2.195,88,0.982,89,0.982,90,0.982,91,0.64,92,2.679,93,2.1,94,2.336,95,0.836,96,0.836,97,0.982,98,1.798,99,0.982,100,0.982,101,0.982,102,1.396,103,0.982,104,1.798,105,1.64,106,2.467,107,1.563,108,0.982,109,1.64,110,0.982,111,1.64,112,1.64,113,0.844,114,1.64,115,1.64,116,1.396,117,1.64,118,0.982,119,1.64,120,1.64,121,2.808,122,1.64,123,0.982,124,1.64,125,0.982,126,1.64,127,2.467,128,1.64,129,2.744,130,2.744,131,1.64,132,0.982,133,1.64,134,0.982,135,2.112,136,2.467,137,0.982,138,0.982,139,0.982,164,0.319,165,0.753,171,1.573,173,2.233,174,1.979,175,1.979,177,1.573,184,0.844,186,0.64,189,0.64,190,0.836,220,2.744,221,1.64,243,1.798,254,1.64,256,1.396,263,0.727,267,1.911,280,0.982,369,1.64,429,0.982,443,1.64,444,1.64,445,1.64,446,1.64,452,0.982,462,1.64,491,0.836,492,2.011,493,2.011,494,1.204,495,1.204,496,1.204,497,1.204,498,1.204,499,1.204,500,2.112,501,0.982,502,2.011,503,3.025,504,2.011,505,3.025,506,2.011,507,2.011,508,3.025,509,2.011,510,2.011,511,2.011,512,2.011,513,2.011,514,2.011,515,2.011,516,2.59,517,2.011,518,2.011,519,3.025,520,1.204,521,1.204,522,1.204,523,1.204,524,1.204,525,1.204,526,1.204,527,1.204,528,1.204,529,1.204,530,1.204,531,1.204,532,1.204,533,1.204,534,1.204,535,1.204,536,1.204]],["title/classes/UserValidator.html",[14,0.215,488,1.523]],["body/classes/UserValidator.html",[3,0.581,4,0.581,5,0.49,10,0.043,13,0.581,14,0.322,15,0.033,16,0.038,17,0.033,311,2.986,488,2.681,537,3.508,538,4.301]],["title/modules/ValidatorModule.html",[18,0.674,145,1.523]],["body/modules/ValidatorModule.html",[2,1.327,3,0.536,4,0.536,5,0.452,9,0.874,10,0.045,11,0.721,13,0.536,14,0.297,15,0.03,16,0.037,17,0.03,18,1.132,20,1.665,25,2.109,38,2.397,145,2.556,488,2.556,539,3.97,540,3.97]],["title/coverage.html",[541,3.182]],["body/coverage.html",[0,1.553,1,1.635,5,0.308,6,2.209,10,0.044,14,0.281,15,0.021,16,0.028,17,0.021,18,0.637,29,1.276,30,0.905,39,1.294,41,2.209,64,4.017,113,1.136,147,1.635,162,1.635,163,2.988,184,1.136,187,1.993,189,1.993,262,1.439,263,1.635,265,2.209,267,1.136,268,2.209,276,1.767,298,2.209,312,3.387,317,1.993,319,1.993,321,1.88,346,3.226,353,1.88,358,1.88,431,2.209,441,1.635,442,2.209,488,1.439,491,2.605,537,2.209,541,2.209,542,2.209,543,2.708,544,2.708,545,5.599,546,4.645,547,5.476,548,2.209,549,4.303,550,2.708,551,2.708,552,2.708,553,2.708]],["title/dependencies.html",[21,1.289,554,2.4]],["body/dependencies.html",[10,0.045,11,0.636,14,0.333,15,0.027,16,0.034,17,0.027,21,1.311,149,2.431,151,2.856,186,1.861,187,1.861,189,1.861,315,2.856,555,4.89,556,3.502,557,3.502,558,4.449,559,3.502,560,3.502,561,2.856,562,3.502,563,3.502,564,4.449,565,3.502,566,3.502,567,3.502,568,3.502,569,3.502,570,3.502,571,3.502,572,3.502,573,3.502,574,4.89,575,3.502,576,3.502,577,3.502,578,3.502,579,3.502,580,3.502,581,3.502,582,3.502,583,3.502,584,3.502]],["title/index.html",[164,0.637,585,1.666,586,1.666]],["body/index.html",[10,0.044,15,0.023,16,0.031,17,0.023,21,1.158,45,3.199,59,1.034,113,1.297,174,1.457,248,2.147,262,1.643,264,2.523,276,1.457,277,2.523,585,2.147,586,2.147,587,3.093,588,3.093,589,3.093,590,3.093,591,3.093,592,3.093,593,3.093,594,3.093,595,3.093,596,3.093,597,3.093,598,3.093,599,3.093,600,3.093,601,3.093,602,3.093,603,3.093,604,2.523,605,2.523,606,4.104,607,3.093,608,3.093,609,5.604,610,4.607,611,3.093,612,4.104,613,3.093,614,3.093,615,3.093,616,3.093,617,3.093,618,3.093,619,3.093,620,3.093,621,4.907,622,4.607,623,4.104,624,3.093,625,3.093,626,3.093,627,3.093,628,3.093,629,3.093,630,3.093,631,4.104,632,3.093,633,3.093,634,3.093,635,3.093]],["title/license.html",[585,1.666,586,1.666,636,1.957]],["body/license.html",[10,0.032,15,0.024,16,0.032,17,0.024,33,1.691,116,2.21,347,2.905,542,2.597,561,2.597,604,2.597,605,2.597,636,2.597,637,3.183,638,4.673,639,3.183,640,3.183,641,4.183,642,3.183,643,3.183,644,3.183,645,3.183,646,3.183,647,3.183,648,4.183,649,5.536,650,3.183,651,3.183,652,3.183,653,4.673,654,3.183,655,4.183,656,3.183,657,3.183,658,3.183,659,3.183,660,3.183,661,3.183,662,3.183,663,3.183,664,3.183,665,4.183,666,3.183,667,3.183,668,3.183,669,3.183,670,3.183,671,3.183,672,3.183,673,4.183,674,4.183,675,3.183,676,3.183,677,3.183,678,3.183,679,3.183,680,3.183,681,3.183,682,3.183,683,3.183,684,3.183,685,3.183,686,3.183,687,3.183,688,3.183,689,3.183,690,3.183,691,3.183,692,3.183,693,3.183,694,3.183,695,3.183,696,3.183,697,3.183,698,3.183,699,3.183,700,3.183,701,3.183,702,3.183]],["title/modules.html",[20,1.636]],["body/modules.html",[10,0.038,15,0.032,16,0.038,17,0.032,19,2.217,20,1.75,140,2.217,144,2.217,145,2.217,703,5.286,704,5.286,705,5.286,706,5.468,707,4.173,708,4.173]],["title/overview.html",[709,3.182]],["body/overview.html",[2,1.118,10,0.043,15,0.025,16,0.033,17,0.025,18,0.787,19,2.9,20,1.404,21,1.253,22,2.02,23,2.02,24,1.778,25,1.778,26,2.02,27,2.73,28,2.73,29,2.383,30,1.751,31,2.609,32,2.02,33,1.778,40,1.576,140,3.033,141,2.73,143,2.73,144,2.9,145,2.544,184,2.008,262,1.778,311,2.324,356,2.324,484,2.73,485,2.73,709,2.73,710,4.322,711,3.346,712,3.346]],["title/miscellaneous/variables.html",[713,1.957,714,2.81]],["body/miscellaneous/variables.html",[10,0.045,15,0.022,16,0.03,17,0.022,18,0.938,56,1.574,113,2.289,163,2.057,164,0.786,187,2.563,188,2.769,189,2.563,190,2.769,267,1.673,276,2.124,312,2.057,317,2.395,319,2.395,321,2.769,322,2.416,346,2.057,353,2.769,354,2.416,355,2.416,356,2.057,357,2.416,358,2.769,359,2.416,360,2.416,361,2.416,362,2.416,491,2.057,500,4.499,501,4.499,548,2.416,713,2.416,714,2.416,715,3.987,716,2.962,717,4.508,718,4.822,719,2.962]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":64,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.0.0.0",{"_index":332,"title":{},"body":{"classes/Server.html":{}}}],["0.1.13",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":545,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":549,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":546,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":550,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":356,"title":{},"body":{"injectables/TokenMiddleware.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":77,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["100",{"_index":66,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["2",{"_index":712,"title":{},"body":{"overview.html":{}}}],["2.7.1",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["2020",{"_index":640,"title":{},"body":{"license.html":{}}}],["2h",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["3.0.2",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["3333",{"_index":289,"title":{},"body":{"controllers/HealthController.html":{},"classes/Server.html":{}}}],["4",{"_index":710,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":711,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["7.0.1",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["above",{"_index":672,"title":{},"body":{"license.html":{}}}],["acaba",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"index.html":{}}}],["acesso",{"_index":384,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["acordo",{"_index":532,"title":{},"body":{"injectables/UserService.html":{}}}],["action",{"_index":696,"title":{},"body":{"license.html":{}}}],["agency",{"_index":8,"title":{},"body":{"controllers/AgencyController.html":{}}}],["agency.controller",{"_index":37,"title":{},"body":{"modules/AgencyModule.html":{}}}],["agency.service",{"_index":36,"title":{},"body":{"modules/AgencyModule.html":{}}}],["agency/agency.module",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["agency/agency.service",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["agencycontroller",{"_index":1,"title":{"controllers/AgencyController.html":{}},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"coverage.html":{}}}],["agencymodule",{"_index":19,"title":{"modules/AgencyModule.html":{}},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["agencyservice",{"_index":29,"title":{"injectables/AgencyService.html":{}},"body":{"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"coverage.html":{},"overview.html":{}}}],["analise",{"_index":294,"title":{},"body":{"controllers/HealthController.html":{}}}],["and/or",{"_index":663,"title":{},"body":{"license.html":{}}}],["andnotnicknameisnull",{"_index":133,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["ao",{"_index":368,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["aos",{"_index":385,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["api/v1",{"_index":322,"title":{},"body":{"classes/Server.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":324,"title":{},"body":{"classes/Server.html":{}}}],["app.close",{"_index":345,"title":{},"body":{"classes/Server.html":{}}}],["app.listen(process.env.port",{"_index":331,"title":{},"body":{"classes/Server.html":{}}}],["app.module",{"_index":316,"title":{},"body":{"classes/Server.html":{}}}],["app.setglobalprefix(globalprefix",{"_index":326,"title":{},"body":{"classes/Server.html":{}}}],["app.use(unlessmiddleware.use",{"_index":327,"title":{},"body":{"classes/Server.html":{}}}],["apply",{"_index":629,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":140,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"classes/Server.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":700,"title":{},"body":{"license.html":{}}}],["array",{"_index":514,"title":{},"body":{"injectables/UserService.html":{}}}],["asc",{"_index":70,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["associated",{"_index":650,"title":{},"body":{"license.html":{}}}],["async",{"_index":47,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["autenticar",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["autenticar(@res",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["autenticar(res",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["authcontroller",{"_index":162,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["authmiddleware\\n",{"_index":380,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["authorizedlog",{"_index":364,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["authorizedlog(logedin",{"_index":387,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["authors",{"_index":689,"title":{},"body":{"license.html":{}}}],["available",{"_index":708,"title":{},"body":{"modules.html":{}}}],["await",{"_index":75,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["badrequest",{"_index":263,"title":{"interfaces/BadRequest.html":{}},"body":{"interfaces/BadRequest.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["bcrypt",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["bcrypt.compare",{"_index":110,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["bcrypt.compare(data.secret",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["bcrypt.hash(data.secret",{"_index":76,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["bcrypt.hashsync(data.secret",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["body",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":278,"title":{},"body":{"controllers/HealthController.html":{}}}],["boot",{"_index":608,"title":{},"body":{"index.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"classes/Server.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["browse",{"_index":706,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":703,"title":{},"body":{"modules.html":{}}}],["c",{"_index":639,"title":{},"body":{"license.html":{}}}],["campos",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["catch",{"_index":102,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["changes",{"_index":622,"title":{},"body":{"index.html":{}}}],["charge",{"_index":645,"title":{},"body":{"license.html":{}}}],["chave",{"_index":99,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["cipriano",{"_index":605,"title":{},"body":{"index.html":{},"license.html":{}}}],["claim",{"_index":692,"title":{},"body":{"license.html":{}}}],["class",{"_index":14,"title":{"classes/Server.html":{},"classes/UserValidator.html":{}},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":311,"title":{},"body":{"classes/Server.html":{},"classes/UserValidator.html":{},"overview.html":{}}}],["cluster_agencymodule",{"_index":27,"title":{},"body":{"modules/AgencyModule.html":{},"overview.html":{}}}],["cluster_agencymodule_providers",{"_index":28,"title":{},"body":{"modules/AgencyModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_usermodule",{"_index":484,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":485,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["com",{"_index":533,"title":{},"body":{"injectables/UserService.html":{}}}],["compara",{"_index":509,"title":{},"body":{"injectables/UserService.html":{}}}],["comparenullvalues",{"_index":129,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["condition",{"_index":135,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["conditions",{"_index":671,"title":{},"body":{"license.html":{}}}],["condição",{"_index":505,"title":{},"body":{"injectables/UserService.html":{}}}],["confere",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["config/configuration",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["connected",{"_index":307,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connection",{"_index":701,"title":{},"body":{"license.html":{}}}],["console.clear",{"_index":333,"title":{},"body":{"classes/Server.html":{}}}],["console.dir(`${select",{"_index":139,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["console.dir(data",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.dir(element",{"_index":90,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["console.dir(existsuser",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.dir(json.description",{"_index":593,"title":{},"body":{"index.html":{}}}],["console.dir(newuser",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.dir(server",{"_index":334,"title":{},"body":{"classes/Server.html":{}}}],["console.dir(userloggedin",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"\\n",{"_index":373,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"\\nunauthorized",{"_index":391,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"by",{"_index":371,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"in",{"_index":377,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"on",{"_index":379,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"request",{"_index":374,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"x",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('\\nacesso",{"_index":366,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log('\\nusuario",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('email",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('newuser",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('prisma",{"_index":306,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log('senha",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(`${new",{"_index":339,"title":{},"body":{"classes/Server.html":{}}}],["console.log(`\\n${process.env.npm_package_name",{"_index":335,"title":{},"body":{"classes/Server.html":{}}}],["console.log(`existsuser",{"_index":84,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["console.log(`query",{"_index":138,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["console.log(process.env.npm_package_description",{"_index":338,"title":{},"body":{"classes/Server.html":{}}}],["const",{"_index":59,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(prisma",{"_index":494,"title":{},"body":{"injectables/UserService.html":{}}}],["contract",{"_index":697,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AgencyController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AgencyController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('agency",{"_index":12,"title":{},"body":{"controllers/AgencyController.html":{}}}],["controller('health",{"_index":283,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('user",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{},"overview.html":{}}}],["cookie",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["copies",{"_index":665,"title":{},"body":{"license.html":{}}}],["copy",{"_index":648,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":638,"title":{},"body":{"license.html":{}}}],["corretamente",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["coverage",{"_index":541,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpf",{"_index":93,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["create",{"_index":492,"title":{},"body":{"injectables/UserService.html":{}}}],["create(data",{"_index":71,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["credentials",{"_index":115,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["currículo",{"_index":598,"title":{},"body":{"index.html":{}}}],["currículo→único",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["damages",{"_index":693,"title":{},"body":{"license.html":{}}}],["data",{"_index":87,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["data.cpf",{"_index":83,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["data.email",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["data.id",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["data.secret",{"_index":74,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["database",{"_index":623,"title":{},"body":{"index.html":{}}}],["datautc",{"_index":353,"title":{},"body":{"injectables/TokenMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["date().getutcdate",{"_index":357,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutcfullyear",{"_index":354,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutchours",{"_index":359,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutcminutes",{"_index":360,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutcmonth",{"_index":355,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutcseconds",{"_index":361,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().tolocaledatestring",{"_index":340,"title":{},"body":{"classes/Server.html":{}}}],["date().tolocaletimestring()}\\n",{"_index":341,"title":{},"body":{"classes/Server.html":{}}}],["datebirth",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["de",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["deal",{"_index":652,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":702,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["declare",{"_index":323,"title":{},"body":{"classes/Server.html":{}}}],["decoded",{"_index":405,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["decorators",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":500,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":443,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete('/:id",{"_index":477,"title":{},"body":{"controllers/UserController.html":{}}}],["delete('/:id')@httpcode(200",{"_index":448,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(@param('id",{"_index":478,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(id",{"_index":447,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(where",{"_index":124,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependencies(healthcheckservice",{"_index":284,"title":{},"body":{"controllers/HealthController.html":{}}}],["desconnected",{"_index":309,"title":{},"body":{"injectables/PrismaService.html":{}}}],["description",{"_index":502,"title":{},"body":{"injectables/UserService.html":{}}}],["desses",{"_index":536,"title":{},"body":{"injectables/UserService.html":{}}}],["dev",{"_index":614,"title":{},"body":{"index.html":{}}}],["development",{"_index":615,"title":{},"body":{"index.html":{}}}],["devem",{"_index":95,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["distribute",{"_index":661,"title":{},"body":{"license.html":{}}}],["dns",{"_index":285,"title":{},"body":{"controllers/HealthController.html":{}}}],["dnshealthindicator",{"_index":282,"title":{},"body":{"controllers/HealthController.html":{}}}],["document.getelementbyid(\"description\").innerhtml",{"_index":594,"title":{},"body":{"index.html":{}}}],["document.getelementbyid(\"name\").innerhtml",{"_index":596,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":542,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["don't",{"_index":616,"title":{},"body":{"index.html":{}}}],["duplicada",{"_index":101,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["e",{"_index":401,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["efetue",{"_index":413,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["em",{"_index":389,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["email",{"_index":92,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["encontrado",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["err",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["err.expiredat",{"_index":415,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["err.message",{"_index":406,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["err.name",{"_index":409,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["error",{"_index":98,"title":{},"body":{"injectables/AgencyService.html":{},"interfaces/BadRequest.html":{},"injectables/UserService.html":{}}}],["error.message",{"_index":103,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["est",{"_index":419,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["este",{"_index":429,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["estão",{"_index":517,"title":{},"body":{"injectables/UserService.html":{}}}],["event",{"_index":688,"title":{},"body":{"license.html":{}}}],["existsuser",{"_index":78,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["existsuser.find(user",{"_index":81,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["existsuser.length",{"_index":85,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["existsuser.secret",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["existsuser.some(element",{"_index":89,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["existsuser?.email",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["existência",{"_index":535,"title":{},"body":{"injectables/UserService.html":{}}}],["experimentalto",{"_index":628,"title":{},"body":{"index.html":{}}}],["expired",{"_index":407,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["expiredat",{"_index":414,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["expiresin",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["expirou",{"_index":412,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["export",{"_index":13,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":561,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":299,"title":{},"body":{"injectables/PrismaService.html":{}}}],["falha",{"_index":418,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["false",{"_index":86,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["fazer",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["fetch(myrequest",{"_index":589,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{}}}],["files",{"_index":651,"title":{},"body":{"license.html":{}}}],["fitness",{"_index":684,"title":{},"body":{"license.html":{}}}],["following",{"_index":670,"title":{},"body":{"license.html":{}}}],["fornecido",{"_index":397,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["free",{"_index":644,"title":{},"body":{"license.html":{}}}],["fullname",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["furnished",{"_index":668,"title":{},"body":{"license.html":{}}}],["g",{"_index":619,"title":{},"body":{"index.html":{}}}],["generate",{"_index":631,"title":{},"body":{"index.html":{}}}],["generateto",{"_index":633,"title":{},"body":{"index.html":{}}}],["get('/')@httpcode(200",{"_index":450,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:id",{"_index":474,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:id')@httpcode(200",{"_index":453,"title":{},"body":{"controllers/UserController.html":{}}}],["get('status",{"_index":296,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('status')@httpcode(httpstatus.ok",{"_index":274,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@httpcode(httpstatus.ok)@healthcheck",{"_index":272,"title":{},"body":{"controllers/HealthController.html":{}}}],["getbyemail",{"_index":127,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["getbyemail(email",{"_index":126,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["getbyuserwhereuniqueinput",{"_index":136,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["getbyuserwhereuniqueinput(unique",{"_index":128,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["getmany",{"_index":444,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getmany(@query",{"_index":472,"title":{},"body":{"controllers/UserController.html":{}}}],["getmany(query",{"_index":54,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getone",{"_index":445,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getone(@param('id",{"_index":475,"title":{},"body":{"controllers/UserController.html":{}}}],["getone(id",{"_index":48,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getting",{"_index":585,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["globalprefix",{"_index":321,"title":{},"body":{"classes/Server.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["globalprefix}/health/status",{"_index":330,"title":{},"body":{"classes/Server.html":{}}}],["globalprefix}/user/signin",{"_index":329,"title":{},"body":{"classes/Server.html":{}}}],["granted",{"_index":643,"title":{},"body":{"license.html":{}}}],["graph",{"_index":707,"title":{},"body":{"modules.html":{}}}],["graphical",{"_index":634,"title":{},"body":{"index.html":{}}}],["hasaccess",{"_index":381,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["hasaccess(decoded",{"_index":425,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["hashedpassword",{"_index":106,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["health",{"_index":269,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":270,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":281,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":147,"title":{"controllers/HealthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["hereby",{"_index":642,"title":{},"body":{"license.html":{}}}],["holders",{"_index":690,"title":{},"body":{"license.html":{}}}],["horautc",{"_index":358,"title":{},"body":{"injectables/TokenMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:${port}/api/v1/health/status",{"_index":292,"title":{},"body":{"controllers/HealthController.html":{}}}],["http://localhost:${server.address().port",{"_index":337,"title":{},"body":{"classes/Server.html":{}}}],["http://zeta08.primusweb.com.br:${3017}/api/v1/health",{"_index":295,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpcode",{"_index":279,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["httpcode(200",{"_index":471,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(201",{"_index":467,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":286,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpexception",{"_index":525,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexception('wrong",{"_index":114,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["https://www.npmjs.com/package/validator.ts%20%20or%20https://www.npmjs.com/package/validate",{"_index":538,"title":{},"body":{"classes/UserValidator.html":{}}}],["httpstatus",{"_index":280,"title":{},"body":{"controllers/HealthController.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":117,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["id",{"_index":52,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":543,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":305,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["implied",{"_index":680,"title":{},"body":{"license.html":{}}}],["import",{"_index":9,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidatorModule.html":{}}}],["imports",{"_index":38,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{}}}],["included",{"_index":675,"title":{},"body":{"license.html":{}}}],["including",{"_index":655,"title":{},"body":{"license.html":{}}}],["incorreta",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["incorreto",{"_index":420,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["index",{"_index":164,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{}}}],["injectable",{"_index":39,"title":{"injectables/AgencyService.html":{},"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"injectables/UserService.html":{}},"body":{"injectables/AgencyService.html":{},"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":40,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["install",{"_index":606,"title":{},"body":{"index.html":{}}}],["installed",{"_index":617,"title":{},"body":{"index.html":{}}}],["interface",{"_index":262,"title":{"interfaces/BadRequest.html":{}},"body":{"interfaces/BadRequest.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["interfaces",{"_index":264,"title":{},"body":{"interfaces/BadRequest.html":{},"index.html":{}}}],["interfaces/badrequest.interface",{"_index":526,"title":{},"body":{"injectables/UserService.html":{}}}],["isglobal",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["isnull",{"_index":134,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["ispasswordmatching",{"_index":109,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["json.description",{"_index":595,"title":{},"body":{"index.html":{}}}],["json.name",{"_index":597,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.sign",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt.verify(token",{"_index":404,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["kind",{"_index":679,"title":{},"body":{"license.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["liability",{"_index":694,"title":{},"body":{"license.html":{}}}],["liable",{"_index":691,"title":{},"body":{"license.html":{}}}],["license",{"_index":636,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":656,"title":{},"body":{"license.html":{}}}],["limited",{"_index":681,"title":{},"body":{"license.html":{}}}],["literal",{"_index":519,"title":{},"body":{"injectables/UserService.html":{}}}],["load",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["logedin",{"_index":365,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["logedin.email",{"_index":370,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["login",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["made",{"_index":632,"title":{},"body":{"index.html":{}}}],["matching",{"_index":16,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":683,"title":{},"body":{"license.html":{}}}],["merge",{"_index":659,"title":{},"body":{"license.html":{}}}],["message",{"_index":91,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["metadata",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["middleware",{"_index":435,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["middleware(req",{"_index":440,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["middleware/router/unless.middleware",{"_index":318,"title":{},"body":{"classes/Server.html":{}}}],["middleware/token/token.middleware",{"_index":320,"title":{},"body":{"classes/Server.html":{}}}],["migrate",{"_index":626,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":713,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":637,"title":{},"body":{"license.html":{}}}],["mode",{"_index":612,"title":{},"body":{"index.html":{}}}],["modify",{"_index":658,"title":{},"body":{"license.html":{}}}],["module",{"_index":18,"title":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{}},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"classes/Server.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["module.hot",{"_index":342,"title":{},"body":{"classes/Server.html":{}}}],["module.hot.accept",{"_index":343,"title":{},"body":{"classes/Server.html":{}}}],["module.hot.dispose",{"_index":344,"title":{},"body":{"classes/Server.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{},"modules.html":{},"overview.html":{}}}],["momento",{"_index":421,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["myrequest",{"_index":587,"title":{},"body":{"index.html":{}}}],["método",{"_index":530,"title":{},"body":{"injectables/UserService.html":{}}}],["n",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["name",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["nameofyourmigrate",{"_index":627,"title":{},"body":{"index.html":{}}}],["natan",{"_index":604,"title":{},"body":{"index.html":{},"license.html":{}}}],["negado",{"_index":388,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["nenhum",{"_index":396,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["nesta",{"_index":518,"title":{},"body":{"injectables/UserService.html":{}}}],["nestfactory",{"_index":314,"title":{},"body":{"classes/Server.html":{}}}],["nestfactory.create(appmodule",{"_index":325,"title":{},"body":{"classes/Server.html":{}}}],["nestjs",{"_index":600,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":11,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidatorModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":315,"title":{},"body":{"classes/Server.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["nestjs/terminus",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjsplus/redirect",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["nestmiddleware",{"_index":352,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["new",{"_index":113,"title":{},"body":{"injectables/AgencyService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["newuser.hasownproperty('id",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["newuser['cpf",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['datebirth",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['email",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['fullname",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['id",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['nickname",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['role",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["next",{"_index":349,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["nica",{"_index":100,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["nickname",{"_index":94,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["nico",{"_index":599,"title":{},"body":{"index.html":{}}}],["nicos",{"_index":97,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["noninfringement",{"_index":687,"title":{},"body":{"license.html":{}}}],["notice",{"_index":673,"title":{},"body":{"license.html":{}}}],["novamente",{"_index":403,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["npm",{"_index":618,"title":{},"body":{"index.html":{}}}],["npx",{"_index":625,"title":{},"body":{"index.html":{}}}],["null",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["nulos",{"_index":511,"title":{},"body":{"injectables/UserService.html":{}}}],["number(id",{"_index":53,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number(query.skip",{"_index":63,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["number(query.take",{"_index":65,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["não",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["o",{"_index":400,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["obtaining",{"_index":647,"title":{},"body":{"license.html":{}}}],["onmoduledestroy",{"_index":301,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":302,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["orderby",{"_index":58,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["orderby?.length",{"_index":67,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["orderby[0",{"_index":68,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["orderby[1",{"_index":69,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["os",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["otherwise",{"_index":699,"title":{},"body":{"license.html":{}}}],["ou",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["out",{"_index":33,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":709,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":554,"title":{"dependencies.html":{}},"body":{}}],["para",{"_index":506,"title":{},"body":{"injectables/UserService.html":{}}}],["param",{"_index":462,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param('id",{"_index":482,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["params",{"_index":122,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["parser",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["participants",{"_index":603,"title":{},"body":{"index.html":{}}}],["particular",{"_index":685,"title":{},"body":{"license.html":{}}}],["parâmetros",{"_index":534,"title":{},"body":{"injectables/UserService.html":{}}}],["passport",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["path",{"_index":439,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["pathcheck",{"_index":437,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["paths",{"_index":433,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["paths.some(path",{"_index":438,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["permission",{"_index":641,"title":{},"body":{"license.html":{}}}],["permit",{"_index":666,"title":{},"body":{"license.html":{}}}],["permitido",{"_index":367,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["person",{"_index":646,"title":{},"body":{"license.html":{}}}],["persons",{"_index":667,"title":{},"body":{"license.html":{}}}],["pesquisa",{"_index":507,"title":{},"body":{"injectables/UserService.html":{}}}],["port",{"_index":287,"title":{},"body":{"controllers/HealthController.html":{}}}],["portions",{"_index":677,"title":{},"body":{"license.html":{}}}],["post",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post('/')@httpcode(201",{"_index":456,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/signin",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgress",{"_index":601,"title":{},"body":{"index.html":{}}}],["postservice",{"_index":466,"title":{},"body":{"controllers/UserController.html":{}}}],["preenchidos",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AgencyController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":45,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["prisma/client",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/prisma.service",{"_index":35,"title":{},"body":{"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["prisma/schema.prisma",{"_index":624,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":300,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaservice",{"_index":30,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":43,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["process.env.npm_package_name",{"_index":297,"title":{},"body":{"controllers/HealthController.html":{}}}],["process.env.port",{"_index":288,"title":{},"body":{"controllers/HealthController.html":{}}}],["process.env.server_secret_token",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["production",{"_index":611,"title":{},"body":{"index.html":{}}}],["profilecreateonewithoutuserinput",{"_index":527,"title":{},"body":{"injectables/UserService.html":{}}}],["promise",{"_index":49,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":266,"title":{},"body":{"interfaces/BadRequest.html":{}}}],["provided",{"_index":116,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{},"overview.html":{}}}],["public",{"_index":104,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["public.\"user",{"_index":132,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["publish",{"_index":660,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":686,"title":{},"body":{"license.html":{}}}],["put",{"_index":463,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/:id",{"_index":480,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/:id')@httpcode(200",{"_index":459,"title":{},"body":{"controllers/UserController.html":{}}}],["que",{"_index":508,"title":{},"body":{"injectables/UserService.html":{}}}],["query",{"_index":452,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["query.orderby",{"_index":60,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["query.orderby.split",{"_index":61,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["readonly",{"_index":44,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["realize",{"_index":399,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["recebe",{"_index":503,"title":{},"body":{"injectables/UserService.html":{}}}],["recurso",{"_index":430,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["recursos",{"_index":386,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["reflect",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["req",{"_index":351,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["req.headers.referer",{"_index":378,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["req.headers[\"x",{"_index":393,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["req.method",{"_index":376,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["req.path",{"_index":375,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["request('./package.json",{"_index":588,"title":{},"body":{"index.html":{}}}],["require('bcrypt",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["require('jsonwebtoken",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{}}}],["res.status(200).json",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(201).json",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(201).json(newuser",{"_index":470,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(201).send",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(400).json",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(400).json(newuser",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["res.status(401).json",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(401).send(tokenerror",{"_index":416,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["res.status(403).json",{"_index":426,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["res.status(403).send",{"_index":417,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["res.status(500).json",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":32,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":461,"title":{},"body":{"controllers/UserController.html":{}}}],["response.json",{"_index":591,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":654,"title":{},"body":{"license.html":{}}}],["result",{"_index":15,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":17,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retorna",{"_index":512,"title":{},"body":{"injectables/UserService.html":{}}}],["retornar",{"_index":424,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["return",{"_index":50,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rights",{"_index":657,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["running",{"_index":336,"title":{},"body":{"classes/Server.html":{}}}],["rxjs",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":621,"title":{},"body":{"index.html":{}}}],["secret",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["select",{"_index":131,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["sell",{"_index":664,"title":{},"body":{"license.html":{}}}],["sempre",{"_index":422,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["send",{"_index":395,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["senha",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["ser",{"_index":96,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["server",{"_index":276,"title":{"classes/Server.html":{}},"body":{"controllers/HealthController.html":{},"classes/Server.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sessão",{"_index":411,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["shall",{"_index":674,"title":{},"body":{"license.html":{}}}],["sigin",{"_index":493,"title":{},"body":{"injectables/UserService.html":{}}}],["sigin(email",{"_index":105,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["signup",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["signup(@res",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(@response",{"_index":468,"title":{},"body":{"controllers/UserController.html":{}}}],["signup(res",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["sistema",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["skip",{"_index":55,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["software",{"_index":649,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{}}}],["src/.../auth.controller.ts",{"_index":715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../server.ts",{"_index":718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../token.middleware.ts",{"_index":717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.service.ts",{"_index":716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/agency/agency.controller.ts",{"_index":6,"title":{},"body":{"controllers/AgencyController.html":{},"coverage.html":{}}}],["src/agency/agency.module.ts",{"_index":34,"title":{},"body":{"modules/AgencyModule.html":{}}}],["src/agency/agency.service.ts",{"_index":41,"title":{},"body":{"injectables/AgencyService.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller",{"_index":490,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:41",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/health.controller.ts",{"_index":268,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health.controller.ts:14",{"_index":273,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health.controller.ts:24",{"_index":275,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/interfaces/badrequest.interface.ts",{"_index":265,"title":{},"body":{"interfaces/BadRequest.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":548,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/middleware/router/unless.middleware.ts",{"_index":431,"title":{},"body":{"injectables/UnlessMiddleware.html":{},"coverage.html":{}}}],["src/middleware/router/unless.middleware.ts:6",{"_index":434,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["src/middleware/token/token.middleware.ts",{"_index":346,"title":{},"body":{"injectables/TokenMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/middleware/token/token.middleware.ts:9",{"_index":350,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["src/prisma/prisma.service.ts",{"_index":298,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:12",{"_index":303,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:7",{"_index":304,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/server.ts",{"_index":312,"title":{},"body":{"classes/Server.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server.ts:15",{"_index":313,"title":{},"body":{"classes/Server.html":{}}}],["src/user/user.controller.ts",{"_index":442,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:14",{"_index":457,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:22",{"_index":451,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:28",{"_index":454,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:34",{"_index":449,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:40",{"_index":460,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":486,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":491,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/user.service.ts:104",{"_index":498,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:118",{"_index":499,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:14",{"_index":495,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:20",{"_index":522,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:28",{"_index":520,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:45",{"_index":496,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:69",{"_index":523,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:86",{"_index":524,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:98",{"_index":497,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/validator/user.validate.ts",{"_index":537,"title":{},"body":{"classes/UserValidator.html":{},"coverage.html":{}}}],["src/utils/validator/validator.module.ts",{"_index":539,"title":{},"body":{"modules/ValidatorModule.html":{}}}],["start",{"_index":610,"title":{},"body":{"index.html":{}}}],["started",{"_index":586,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["statements",{"_index":544,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":271,"title":{},"body":{"controllers/HealthController.html":{}}}],["status(403",{"_index":394,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["string",{"_index":56,"title":{},"body":{"injectables/AgencyService.html":{},"interfaces/BadRequest.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["studioshortcuts",{"_index":635,"title":{},"body":{"index.html":{}}}],["sua",{"_index":410,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["subject",{"_index":669,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":662,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":676,"title":{},"body":{"license.html":{}}}],["support",{"_index":704,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":705,"title":{},"body":{"modules.html":{}}}],["table",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":57,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["tem",{"_index":428,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["temacesso",{"_index":372,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["tente",{"_index":402,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["terminusmodule",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["testesdadsad",{"_index":602,"title":{},"body":{"index.html":{}}}],["then(json",{"_index":592,"title":{},"body":{"index.html":{}}}],["then(response",{"_index":590,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":308,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":310,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.dns.pingcheck('zeta",{"_index":293,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.dns.pingcheck(process.env.npm_package_name",{"_index":291,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.getbyemail(email",{"_index":108,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.getbyuserwhereuniqueinput(data",{"_index":79,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.health.check",{"_index":290,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.prisma.$queryraw(`${select",{"_index":137,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.create",{"_index":88,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":125,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":62,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findone",{"_index":51,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":123,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.userservice.create(data",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.create(userdata",{"_index":469,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.delete",{"_index":479,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getbyemail(data.email",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.getmany(query",{"_index":473,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getone(id",{"_index":476,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update",{"_index":483,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":112,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["todo",{"_index":382,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["todos",{"_index":515,"title":{},"body":{"injectables/UserService.html":{}}}],["token",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["tokenerror",{"_index":408,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["tokenmiddleware",{"_index":319,"title":{"injectables/TokenMiddleware.html":{}},"body":{"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenmiddleware.use",{"_index":328,"title":{},"body":{"classes/Server.html":{}}}],["tokenmiddleware\\n",{"_index":392,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["tort",{"_index":698,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":80,"title":{},"body":{"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["try",{"_index":73,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["ts",{"_index":613,"title":{},"body":{"index.html":{}}}],["type",{"_index":267,"title":{},"body":{"interfaces/BadRequest.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["um",{"_index":513,"title":{},"body":{"injectables/UserService.html":{}}}],["uma",{"_index":504,"title":{},"body":{"injectables/UserService.html":{}}}],["unauthorizedlog",{"_index":390,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["undefined",{"_index":118,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["unique",{"_index":130,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["unlessmiddleware",{"_index":317,"title":{"injectables/UnlessMiddleware.html":{}},"body":{"classes/Server.html":{},"injectables/UnlessMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":277,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["update",{"_index":446,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@body",{"_index":481,"title":{},"body":{"controllers/UserController.html":{}}}],["update(data",{"_index":458,"title":{},"body":{"controllers/UserController.html":{}}}],["update(params",{"_index":119,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["upto",{"_index":630,"title":{},"body":{"index.html":{}}}],["use",{"_index":347,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"license.html":{}}}],["use(@req",{"_index":363,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["use(middleware",{"_index":432,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["use(req",{"_index":348,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["useguards",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":107,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.controller",{"_index":487,"title":{},"body":{"modules/UserModule.html":{}}}],["user.cpf",{"_index":82,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["user.secret",{"_index":111,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":464,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.validate",{"_index":540,"title":{},"body":{"modules/ValidatorModule.html":{}}}],["user/user.module",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.service",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercontroller",{"_index":441,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercreated",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercreated.email",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercreated.id",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercreateinput",{"_index":72,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["userdata",{"_index":455,"title":{},"body":{"controllers/UserController.html":{}}}],["userloggedin",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["usermodel",{"_index":465,"title":{},"body":{"controllers/UserController.html":{}}}],["usermodule",{"_index":144,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userorderbyinput",{"_index":529,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":184,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdateinput",{"_index":120,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["uservalidator",{"_index":488,"title":{"classes/UserValidator.html":{}},"body":{"modules/UserModule.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{}}}],["userwhereinput",{"_index":528,"title":{},"body":{"injectables/UserService.html":{}}}],["userwhereuniqueinput",{"_index":121,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usuário",{"_index":369,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["usuários",{"_index":516,"title":{},"body":{"injectables/UserService.html":{}}}],["utc",{"_index":362,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["utils",{"_index":46,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["utils/validator/user.validate",{"_index":489,"title":{},"body":{"modules/UserModule.html":{}}}],["utils/validator/validator.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["vai",{"_index":423,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["validator",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["validatormodule",{"_index":145,"title":{"modules/ValidatorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ValidatorModule.html":{},"modules.html":{},"overview.html":{}}}],["valores",{"_index":510,"title":{},"body":{"injectables/UserService.html":{}}}],["value",{"_index":501,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":547,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":714,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifica",{"_index":531,"title":{},"body":{"injectables/UserService.html":{}}}],["verificação",{"_index":383,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["voc",{"_index":427,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["void",{"_index":436,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["warning",{"_index":398,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["warranties",{"_index":682,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":678,"title":{},"body":{"license.html":{}}}],["whether",{"_index":695,"title":{},"body":{"license.html":{}}}],["without",{"_index":653,"title":{},"body":{"license.html":{}}}],["yarn",{"_index":609,"title":{},"body":{"index.html":{}}}],["yarnprisma",{"_index":620,"title":{},"body":{"index.html":{}}}],["yarnto",{"_index":607,"title":{},"body":{"index.html":{}}}],["yes",{"_index":521,"title":{},"body":{"injectables/UserService.html":{}}}],["zoom",{"_index":31,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AgencyController.html":{"url":"controllers/AgencyController.html","title":"controller - AgencyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AgencyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/agency/agency.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                agency\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('agency')\nexport class AgencyController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AgencyModule.html":{"url":"modules/AgencyModule.html","title":"module - AgencyModule","body":"\n                   \n\n\n\n\n    Modules\n    AgencyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AgencyModule\n\n\n\ncluster_AgencyModule_providers\n\n\n\n\nAgencyService\n\nAgencyService\n\n\n\nAgencyModule\n\nAgencyModule\n\nAgencyModule -->\n\nAgencyService->AgencyModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAgencyModule -->\n\nPrismaService->AgencyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/agency/agency.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AgencyService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AgencyController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from '@prisma/prisma.service';\nimport { AgencyService } from './agency.service';\nimport { AgencyController } from './agency.controller';\n\n@Module({\n    imports: [],\n    controllers: [\n        // AgencyController\n    AgencyController],\n    providers: [\n        AgencyService,\n        PrismaService\n    ],\n})\nexport class AgencyModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AgencyService.html":{"url":"injectables/AgencyService.html","title":"injectable - AgencyService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AgencyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/agency/agency.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '@prisma/prisma.service';\n\n@Injectable()\nexport class AgencyService {\n\n    // constructor(\n    //     private readonly prisma: PrismaService,\n    //     private readonly utils: PrismaService,\n    // ) { }\n\n    // async getOne(id): Promise {\n    //     return this.prisma.user.findOne({\n    //         where: {\n    //             id: Number(id)\n    //         },\n    //     });\n    // }\n\n    // async getMany(query?: {\n    //     skip?: string\n    //     take?: string\n    //     orderBy?: any\n    // }): Promise {\n\n    //     const orderBy = query.orderBy ? query.orderBy.split(',') : []\n\n    //     return this.prisma.user.findMany({\n    //         skip: Number(query.skip) || 0,\n    //         take: Number(query.take) || 100,\n    //         orderBy: orderBy?.length ? { [orderBy[0]]: orderBy[1] } : {\n    //             id: 'asc'\n    //         }\n    //     });\n    // }\n\n    // async create(data: UserCreateInput): Promise {\n    //     try {\n    //         data.secret = await bcrypt.hash(data.secret, 10);\n    //         const existsUser = await this.getByUserWhereUniqueInput(data, true)\n    //         // existsUser.find(user => user.cpf === data.cpf);\n    //         console.log(`existsUser: ${existsUser.length ? true : false}`)\n    //         if (!existsUser.length) {\n    //             // const {  } = data\n    //             return await this.prisma.user.create({ data })\n    //         }\n\n    //         // existsUser.some(element => {\n    //         //     console.dir(element)\n    //         // })\n\n    //         return {\n    //             message: 'email, cpf, nickname devem ser únicos',\n    //             error: 'Chave única duplicada'\n    //         }\n    //     } catch (error) {\n    //         return error.message\n    //     }\n    // }\n\n    // public async sigin(email: string, hashedPassword: string) {\n    //     try {\n    //         const user = await this.getByEmail(email);\n    //         const isPasswordMatching = await bcrypt.compare(\n    //             hashedPassword,\n    //             user.secret\n    //         );\n    //         if (!isPasswordMatching) {\n    //             throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n    //         }\n    //         user.secret = undefined;\n    //         return user;\n    //     } catch (error) {\n    //         throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n    //     }\n    // }\n\n    // async update(params: {\n    //     data: UserUpdateInput;\n    //     where: UserWhereUniqueInput;\n    // }): Promise {\n    //     const { where, data } = params;\n    //     data.secret = await bcrypt.hash(data.secret, 10);\n    //     return this.prisma.user.update({\n    //         data,\n    //         where\n    //     });\n    // }\n\n    // async delete(where: UserWhereUniqueInput): Promise {\n    //     return this.prisma.user.delete({\n    //         where,\n    //     });\n    // }\n\n    // async getByEmail(email: string): Promise {\n    //     const getByEmail = await this.prisma.user.findOne({\n    //         where: { email },\n    //     })\n    //     return getByEmail\n    // }\n\n\n    // async getByUserWhereUniqueInput(unique: UserWhereUniqueInput, compareNullValues = false): Promise {\n    //     const { email, cpf, nickname } = unique\n    //     const select = 'SELECT * FROM public.\"User\"'\n\n    //     const andNotNicknameIsNull = compareNullValues ? 'AND NOT nickname ISNULL' : ''\n\n    //     const condition = `cpf = '${cpf}' OR email = '${email}' OR (nickname = '${nickname}' ${andNotNicknameIsNull})`\n    //     const getByUserWhereUniqueInput = await this.prisma.$queryRaw(`${select} WHERE ${condition};`)\n    //     console.log(`Query existsUser`)\n    //     console.dir(`${select} WHERE ${condition};`)\n\n    //     return getByUserWhereUniqueInput\n    // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAgencyModule\n\nAgencyModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAgencyModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nValidatorModule\n\nValidatorModule\n\nAppModule -->\n\nValidatorModule->AppModule\n\n\n\n\n\nAgencyService\n\nAgencyService\n\nAppModule -->\n\nAgencyService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AgencyService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AgencyModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            ValidatorModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { ConfigModule } from '@nestjs/config';\n\nimport configuration from './config/configuration';\nimport { PrismaService } from './prisma/prisma.service';\nimport { UserModule } from './user/user.module';\nimport { HealthController } from './health.controller';\nimport { ValidatorModule } from './utils/validator/validator.module';\nimport { AgencyService } from './agency/agency.service';\nimport { AgencyModule } from './agency/agency.module';\n\n@Module({\n    imports: [\n        UserModule,\n        TerminusModule,\n        ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configuration]\n        }),\n        ValidatorModule,\n        AgencyModule\n    ],\n    controllers: [HealthController],\n    providers: [PrismaService, AgencyService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                autenticar\n                            \n                            \n                                    Public\n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            autenticar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    autenticar(res, data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(res, data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Res, UseGuards } from '@nestjs/common'\nimport { UserService } from '../user/user.service'\n\nimport { User } from '@prisma/client'\nconst jwt = require('jsonwebtoken')\n\nconst bcrypt = require('bcrypt')\n\n@Controller('user')\nexport class AuthController {\n\n    constructor(\n        private userService: UserService,\n    ) { }\n\n\n    @Post('/signup')\n    public async signup(@Res() res, @Body() data): Promise {\n        // data.secret = bcrypt.hashSync(data.secret, 10);\n        const newUser = await this.userService.create(data)\n        console.log('newUser:')\n        console.dir(newUser)\n\n        if (newUser.hasOwnProperty('id')) return res.status(201).json({\n            id: newUser['id'],\n            fullname: newUser['fullname'],\n            email: newUser['email'],\n            cpf: newUser['cpf'],\n            role: newUser['role'],\n            datebirth: newUser['datebirth'],\n            nickname: newUser['nickname'],\n        })\n        return res.status(400).json(newUser)\n        // const userCreated = await this.userService.create(data)\n        // if\n        // return res.status(201).send({ id: userCreated.id, email: userCreated.email });\n    }\n\n\n    @Post('/signin')\n    public async autenticar(@Res() res, @Body() data): Promise {\n        console.dir(data)\n        if (data.email === '' || data.secret === '') {\n            return res.status(400).json({ auth: false, message: 'Os campos devem ser preenchidos corretamente' });\n        }\n\n        try {\n\n            const existsUser = await this.userService.getByEmail(data.email);\n            console.dir(existsUser)\n\n            if (existsUser?.email != null) {\n                const userLoggedIn = await bcrypt.compare(data.secret, existsUser.secret);\n                console.dir(userLoggedIn)\n                if (userLoggedIn) {\n                    const secret = process.env.SERVER_SECRET_TOKEN || 'Currículo→Único';\n                    const token = jwt.sign({ email: data.email, _id: data.id }, secret, { expiresIn: '2h' });\n\n                    console.log('\\nUsuario', data.email, 'acaba de fazer login no sistema');\n                    console.log(\"x-access-token:\", token, '\\n');\n\n                    res.status(200).json({\n                        auth: true,\n                        _id: data.id,\n                        email: data.email,\n                        expiresIn: '2h',\n                        token: token\n                    });\n\n                } else {\n                    console.log('Senha incorreta')\n                    res.status(401).json({ auth: false, message: 'Email ou senha não confere' });\n                }\n\n            } else {\n                console.log('Email não encontrado')\n                res.status(401).json({ auth: false, message: 'Email ou senha não confere' });\n            }\n\n            return data;\n\n        } catch (err) {\n            res.status(500).json({ auth: false, message: err });\n        }\n    }\n\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BadRequest.html":{"url":"interfaces/BadRequest.html","title":"interface - BadRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BadRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/badRequest.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        message\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BadRequest {\n    message?: string\n    error?: any\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                healthCheck\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            healthCheck\n                        \n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            status\n                        \n                        \n                    \n                \n            \n            \n                \nstatus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/health.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { server: any; up: boolean; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Dependencies, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { HealthCheckService, DNSHealthIndicator, HealthCheck } from '@nestjs/terminus';\n@Controller('health')\n@Dependencies(HealthCheckService, DNSHealthIndicator)\nexport class HealthController {\n    constructor(\n        private health,\n        private dns,\n    ) { }\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @HealthCheck()\n    healthCheck() {\n        const port = process.env.PORT || 3333\n        return this.health.check([\n            async () =>  await this.dns.pingCheck(process.env.npm_package_NAME, `http://localhost:${port}/api/v1/health/status`),\n            async () => this.dns.pingCheck('zeta-analise', `http://zeta08.primusweb.com.br:${3017}/api/v1/health`),\n        ])\n    }\n    \n    @Get('status')\n    @HttpCode(HttpStatus.OK)\n    status() {\n        return {\n            server: process.env.npm_package_NAME,\n            up: true\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onModuleDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n  \n  async onModuleInit() {\n    console.log('Prisma connected')\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    console.log('Prisma desconnected')\n    await this.$disconnect();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Server.html":{"url":"classes/Server.html","title":"class - Server","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Server\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bootstrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    bootstrap()\n                \n            \n\n\n            \n                \n                    Defined in src/server.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { UnlessMiddleware } from './middleware/router/unless.middleware';\nimport { TokenMiddleware } from './middleware/token/token.middleware';\n\nexport const globalPrefix = '/api/v1'\nconst unlessMiddleware = new UnlessMiddleware()\nconst tokenMiddleware = new TokenMiddleware()\n\ndeclare const module: any;\n\n\nexport class Server {\n\n    async bootstrap() {\n        const app = await NestFactory.create(AppModule);\n    \n        app.setGlobalPrefix(globalPrefix);\n    \n        app.use(unlessMiddleware.use(\n            tokenMiddleware.use,\n            `${globalPrefix}/user/signin`,\n            `${globalPrefix}/health/status`,\n        ))\n    \n        const server = await app.listen(process.env.PORT || 3333, '0.0.0.0', () => {\n            console.clear()\n            // console.dir(server)\n            console.log(`\\n${process.env.npm_package_NAME} is running in http://localhost:${server.address().port + globalPrefix}`)\n            console.log(process.env.npm_package_DESCRIPTION)\n            console.log(`${new Date().toLocaleDateString()} - ${new Date().toLocaleTimeString()}\\n`);\n        });\n    \n        if (module.hot) {\n            module.hot.accept();\n            module.hot.dispose(() => app.close());\n        }\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenMiddleware.html":{"url":"injectables/TokenMiddleware.html","title":"injectable - TokenMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TokenMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/token/token.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(req, res, next)\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/token/token.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, Next, Req, Res } from '@nestjs/common';\nconst jwt = require('jsonwebtoken')\n\nconst dataUTC = new Date().getUTCFullYear() + '/' + (new Date().getUTCMonth() + 1) + '/' + new Date().getUTCDate();\nconst horaUTC = new Date().getUTCHours() + ':' + new Date().getUTCMinutes() + ':' + new Date().getUTCSeconds() + ' UTC';\n@Injectable()\nexport class TokenMiddleware implements NestMiddleware {\n\n    use(@Req() req, @Res() res, @Next() next) {\n\n        const authorizedLog = logedIn => {\n            console.log('\\nAcesso permitido ao usuário', logedIn.email)\n            console.log(\"by temAcesso\")\n\n            console.log(\"\\n\")\n            console.log(\"request:\", req.path, \"→ Type:\", req.method);\n            console.log(\"in:\", req.headers.referer);\n            console.log(\"on:\", dataUTC, 'at', horaUTC);\n            console.log(\"by AuthMiddleware\\n\");\n        }\n\n\n        const hasAccess = logedIn => {\n\n            // TODO: Verificação de acesso aos recursos\n\n            if (logedIn) {\n                authorizedLog(logedIn)\n                return true\n            }\n            console.log('\\nAcesso negado em:', req.headers.referer)\n            console.log(\"request:\", req.path, \"→ Type:\", req.method);\n            console.log(\"by temAcesso\");\n            return false\n        }\n\n        const unauthorizedLog = () => {\n            console.log(\"\\nUnauthorized\");\n            console.log(\"request:\", req.path, \"→ Type:\", req.method);\n            console.log(\"in:\", req.headers.referer);\n            console.log(\"on:\", dataUTC, 'at', horaUTC);\n            console.log(\"by TokenMiddleware\\n\");\n        }\n\n        const token = req.headers[\"x-access-token\"];\n\n        if (!token) {\n            return res\n                .status(403)\n                .send({\n                    auth: false,\n                    message: 'Nenhum token fornecido',\n                    warning: 'Realize o login e tente novamente'\n                });\n        }\n\n        const secret = process.env.SERVER_SECRET_TOKEN || 'Currículo→Único';\n        jwt.verify(token, secret, (err, decoded) => {\n            if (err) {\n                if (err.message === 'jwt expired') {\n                    const tokenError = {\n                        name: err.name,\n                        message: 'Sua sessão expirou. Efetue o login novamente',\n                        expiredAt: err.expiredAt\n                    }\n                    unauthorizedLog()\n\n                    return res.status(401).send(tokenError)\n                }\n\n                unauthorizedLog()\n\n                return res.status(403).send({\n                    auth: false,\n                    message: \"Falha ao autenticar o token.\",\n                    warning: 'Token fornecido está incorreto'\n                });\n            }\n            // ! No momento, sempre vai retornar true, TODO à fazer em temAcesso\n            if (hasAccess(decoded))\n                next();\n            else\n                return res.status(403).json({\n                    auth: false,\n                    message: \"Você não tem acesso à este recurso.\"\n                })\n        });\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UnlessMiddleware.html":{"url":"injectables/UnlessMiddleware.html","title":"injectable - UnlessMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UnlessMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/router/unless.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(middleware, ...paths: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/router/unless.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    middleware\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paths\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     (req: any, res: any, next: any) => void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class UnlessMiddleware implements NestMiddleware {\n\n    use(middleware, ...paths) {\n        return (req, res, next) => {\n            const pathCheck = paths.some(path => path === req.path)\n            pathCheck ? next() : middleware(req, res, next)\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getMany\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMany(query)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(id: UserWhereUniqueInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(res, userData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@HttpCode(201)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userData\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Response, Get, Param, Post, Body, Put, Delete, HttpCode, Query } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User as UserModel, UserWhereUniqueInput } from '@prisma/client';\n\n@Controller('user')\nexport class UserController {\n    constructor(\n        private readonly userService: UserService,\n        // private readonly postService: PostService,\n    ) { }\n\n    @Post('/')\n    @HttpCode(201)\n    async signup(@Response() res, @Body() userData): Promise {\n        const newUser = await this.userService.create(userData)\n        if (newUser.hasOwnProperty('id')) return res.status(201).json(newUser)\n        return res.status(400).json(newUser)\n    }\n\n    @Get('/')\n    @HttpCode(200)\n    async getMany(@Query() query): Promise {\n        return this.userService.getMany(query)\n    }\n\n    @Get('/:id')\n    @HttpCode(200)\n    async getOne(@Param('id') id: UserWhereUniqueInput): Promise {\n        return this.userService.getOne(id)\n    }\n\n    @Delete('/:id')\n    @HttpCode(200)\n    async delete(@Param('id') id: string): Promise {\n        return this.userService.delete({ id: Number(id) });\n    }\n\n    @Put('/:id')\n    @HttpCode(200)\n    async update(@Body() data, @Param('id') id: string): Promise {\n        return this.userService.update({\n            data: { ...data },\n            where: { id: Number(id) },\n        });\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaService\n\nPrismaService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { PrismaService } from '../prisma/prisma.service';\n\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { UserValidator } from '@utils/validator/user.validate';\nimport { AuthController } from 'src/auth/auth.controller';\n\n@Module({\n    imports: [],\n    controllers: [\n        UserController,\n        AuthController\n    ],\n    providers: [\n        UserService,\n        PrismaService,\n        UserValidator,\n    ],\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getByUserWhereUniqueInput\n                            \n                            \n                                    Async\n                                getMany\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                    Public\n                                    Async\n                                sigin\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, utils: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utils\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: UserCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(where: UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByUserWhereUniqueInput\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByUserWhereUniqueInput(unique: UserWhereUniqueInput, compareNullValues)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    unique\n                                    \n                                            UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Recebe os campos unique do usuário\n\n                                    \n                                \n                                \n                                    compareNullValues\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        Recebe uma condição para pesquisa que compara ou não valores nulos default: false\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Retorna um array de todos os usuários que estão nesta condição\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMany(query?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(id)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            sigin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sigin(email: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PrismaService } from '@prisma/prisma.service';\nimport { BadRequest } from '@interfaces/badRequest.interface';\nimport {\n    UserUpdateInput, User, UserCreateInput, UserWhereUniqueInput,\n    ProfileCreateOneWithoutUserInput,\n    UserWhereInput,\n    UserOrderByInput,\n} from '@prisma/client';\n\nconst bcrypt = require('bcrypt');\n\n@Injectable()\nexport class UserService {\n    constructor(\n        private readonly prisma: PrismaService,\n        private readonly utils: PrismaService,\n    ) { }\n\n    async getOne(id): Promise {\n        return this.prisma.user.findOne({\n            where: {\n                id: Number(id)\n            },\n        });\n    }\n\n    async getMany(query?: {\n        skip?: string\n        take?: string\n        orderBy?: any\n    }): Promise {\n\n        const orderBy = query.orderBy ? query.orderBy.split(',') : []\n\n        return this.prisma.user.findMany({\n            skip: Number(query.skip) || 0,\n            take: Number(query.take) || 100,\n            orderBy: orderBy?.length ? { [orderBy[0]]: orderBy[1] } : {\n                id: 'asc'\n            }\n        });\n    }\n\n    async create(data: UserCreateInput): Promise {\n        try {\n            data.secret = await bcrypt.hash(data.secret, 10);\n            const existsUser = await this.getByUserWhereUniqueInput(data, true)\n            // existsUser.find(user => user.cpf === data.cpf);\n            console.log(`existsUser: ${existsUser.length ? true : false}`)\n            if (!existsUser.length) {\n                // const {  } = data\n                return await this.prisma.user.create({ data })\n            }\n\n            // existsUser.some(element => {\n            //     console.dir(element)\n            // })\n\n            return {\n                message: 'email, cpf, nickname devem ser únicos',\n                error: 'Chave única duplicada'\n            }\n        } catch (error) {\n            return error.message\n        }\n    }\n\n    public async sigin(email: string, hashedPassword: string) {\n        try {\n            const user = await this.getByEmail(email);\n            const isPasswordMatching = await bcrypt.compare(\n                hashedPassword,\n                user.secret\n            );\n            if (!isPasswordMatching) {\n                throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n            }\n            user.secret = undefined;\n            return user;\n        } catch (error) {\n            throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    async update(params: {\n        data: UserUpdateInput;\n        where: UserWhereUniqueInput;\n    }): Promise {\n        const { where, data } = params;\n        data.secret = await bcrypt.hash(data.secret, 10);\n        return this.prisma.user.update({\n            data,\n            where\n        });\n    }\n\n    async delete(where: UserWhereUniqueInput): Promise {\n        return this.prisma.user.delete({\n            where,\n        });\n    }\n\n    async getByEmail(email: string): Promise {\n        const getByEmail = await this.prisma.user.findOne({\n            where: { email },\n        })\n        return getByEmail\n    }\n\n\n    /**\n     * @param unique Recebe os campos unique do usuário\n     * @param compareNullValues Recebe uma condição para pesquisa que compara ou não valores nulos `default: false`\n     * @description Este método verifica de acordo com os parâmetros, a existência desses usuários\n     * @returns Retorna um array de todos os usuários que estão nesta condição\n     * */\n    async getByUserWhereUniqueInput(unique: UserWhereUniqueInput, compareNullValues = false): Promise {\n        const { email, cpf, nickname } = unique\n        const select = 'SELECT * FROM public.\"User\"'\n\n        const andNotNicknameIsNull = compareNullValues ? 'AND NOT nickname ISNULL' : ''\n\n        const condition = `cpf = '${cpf}' OR email = '${email}' OR (nickname = '${nickname}' ${andNotNicknameIsNull})`\n        const getByUserWhereUniqueInput = await this.prisma.$queryRaw(`${select} WHERE ${condition};`)\n        console.log(`Query existsUser`)\n        console.dir(`${select} WHERE ${condition};`)\n\n        return getByUserWhereUniqueInput\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserValidator.html":{"url":"classes/UserValidator.html","title":"class - UserValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validator/user.validate.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserValidator {\n    // https://www.npmjs.com/package/validator.ts%20%20OR%20https://www.npmjs.com/package/validate\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ValidatorModule.html":{"url":"modules/ValidatorModule.html","title":"module - ValidatorModule","body":"\n                   \n\n\n\n\n    Modules\n    ValidatorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/utils/validator/validator.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserValidator } from './user.validate';\n\n@Module({\n    imports: [ ],\n    controllers: [ ],\n    providers: [\n        UserValidator\n    ],\n})\nexport class ValidatorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/agency/agency.controller.ts\n            \n            controller\n            AgencyController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/agency/agency.service.ts\n            \n            injectable\n            AgencyService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            variable\n            bcrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            variable\n            jwt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interfaces/badRequest.interface.ts\n            \n            interface\n            BadRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/router/unless.middleware.ts\n            \n            injectable\n            UnlessMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middleware/token/token.middleware.ts\n            \n            injectable\n            TokenMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middleware/token/token.middleware.ts\n            \n            variable\n            dataUTC\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/token/token.middleware.ts\n            \n            variable\n            horaUTC\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/token/token.middleware.ts\n            \n            variable\n            jwt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            class\n            Server\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            variable\n            globalPrefix\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            variable\n            tokenMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            variable\n            unlessMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            variable\n            bcrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/validator/user.validate.ts\n            \n            class\n            UserValidator\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/terminus : ^7.0.1\n        \n            @nestjsplus/redirect : ^1.0.0\n        \n            @prisma/client : ^2.7.1\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            cookie-parser : ^1.4.5\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n    const myRequest = new Request('./package.json');\n    fetch(myRequest)\n        .then(response => response.json())\n        .then(json => {\n            console.dir(json.description);\n            document.getElementById(\"description\").innerHTML = json.description;\n            document.getElementById(\"name\").innerHTML = json.name;\n        });\n\n\n\n\nCurrículo Único - NestJS + Prisma + Postgress\n\n\ntestesdadsad\n    \n\n\n\n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n      \n  \n   -->\n\n  \n      \n  \n  \n      \n  \n\n\n\n\n\n\nParticipants\n\n\n\n\n\n\n\n\n\n| Natan Cipriano\n\n\n\nGetting started\nTo install the dependencies\nyarnTo boot the server\nyarn start # to start in production mode\n#  OR\nyarn ts-dev # to start in development mode\nIf you don't have yarn installed:\nnpm install -g yarnPrisma:\nTo save changes to the database (./prisma/schema.prisma)\nyarn save\n# OR\nnpx prisma migrate save --name nameOfYourMigrate --experimentalTo apply changes\nyarn upTo generate the interfaces from the changes made\nyarn generateTo have access to a graphical interface of your database\nyarn studioShortcuts:\n# yarn save && yarn up && yarn generate\nyarn prisma\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2020 Natan Cipriano\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AgencyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ValidatorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AgencyModule\n\n\n\ncluster_AgencyModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAgencyService\n\nAgencyService\n\n\n\nAgencyModule\n\nAgencyModule\n\nAgencyModule -->\n\nAgencyService->AgencyModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAgencyService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAgencyModule -->\n\nPrismaService->AgencyModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\nAppModule -->\n\nAgencyModule->AppModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nValidatorModule\n\nValidatorModule\n\nAppModule -->\n\nValidatorModule->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bcrypt   (src/.../auth.controller.ts)\n                        \n                        \n                            bcrypt   (src/.../user.service.ts)\n                        \n                        \n                            dataUTC   (src/.../token.middleware.ts)\n                        \n                        \n                            globalPrefix   (src/.../server.ts)\n                        \n                        \n                            horaUTC   (src/.../token.middleware.ts)\n                        \n                        \n                            jwt   (src/.../auth.controller.ts)\n                        \n                        \n                            jwt   (src/.../token.middleware.ts)\n                        \n                        \n                            module   (src/.../server.ts)\n                        \n                        \n                            server   (src/.../main.ts)\n                        \n                        \n                            tokenMiddleware   (src/.../server.ts)\n                        \n                        \n                            unlessMiddleware   (src/.../server.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.controller.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            bcrypt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('bcrypt')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('jsonwebtoken')\n                        \n                    \n\n\n            \n        \n\n    src/user/user.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            bcrypt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('bcrypt')\n                        \n                    \n\n\n            \n        \n\n    src/middleware/token/token.middleware.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            dataUTC\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Date().getUTCFullYear() + '/' + (new Date().getUTCMonth() + 1) + '/' + new Date().getUTCDate()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            horaUTC\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Date().getUTCHours() + ':' + new Date().getUTCMinutes() + ':' + new Date().getUTCSeconds() + ' UTC'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('jsonwebtoken')\n                        \n                    \n\n\n            \n        \n\n    src/server.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            globalPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/api/v1'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            module\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tokenMiddleware\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new TokenMiddleware()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            unlessMiddleware\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new UnlessMiddleware()\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Server()\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
