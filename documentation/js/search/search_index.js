var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AgencyController.html",[0,0.958,1,1.731]],["body/controllers/AgencyController.html",[0,1.403,1,3.002,2,1.403,3,0.567,4,0.567,5,0.478,6,3.424,7,2.534,8,4.197,9,0.763,10,0.042,11,0.763,12,4.197,13,0.567,14,0.314,15,0.032,16,0.038,17,0.032]],["title/modules/AgencyModule.html",[18,0.674,19,1.523]],["body/modules/AgencyModule.html",[1,3.054,2,1.444,3,0.452,4,0.452,5,0.381,9,0.919,10,0.044,11,0.608,13,0.452,14,0.251,15,0.025,16,0.033,17,0.025,18,1.126,19,2.939,20,1.403,21,1.252,22,2.02,23,2.02,24,1.777,25,2.543,26,2.02,27,2.729,28,2.729,29,2.527,30,1.793,31,2.609,32,2.02,33,1.777,34,3.345,35,1.777,36,3.345,37,3.345,38,2.02]],["title/injectables/AgencyService.html",[29,1.35,39,0.761]],["body/injectables/AgencyService.html",[3,0.207,4,0.207,5,0.175,9,0.446,10,0.046,11,0.279,13,0.207,14,0.115,15,0.012,16,0.019,17,0.012,29,1.155,30,1.024,35,0.815,39,0.651,40,0.723,41,1.252,42,0.815,43,1.303,44,1.703,45,1.065,46,1.252,47,1.865,48,1.065,49,2.584,50,1.972,51,2,52,1.48,53,1.065,54,1.065,55,2,56,2.032,57,2,58,2.498,59,1.634,60,1.252,61,1.252,62,1.252,63,1.252,64,1.065,65,1.252,66,1.252,67,1.252,68,1.252,69,1.252,70,1.252,71,1.252,72,1.252,73,1.703,74,1.703,75,1.865,76,2,77,1.703,78,1.703,79,1.252,80,1.155,81,1.252,82,1.252,83,1.252,84,1.252,85,2,86,1.48,87,2.309,88,1.252,89,1.252,90,1.252,91,0.815,92,2.655,93,2.429,94,2.655,95,1.065,96,1.065,97,1.252,98,2.127,99,1.252,100,1.252,101,1.252,102,1.703,103,1.252,104,1.065,105,1.252,106,2,107,1.48,108,1.252,109,2,110,1.252,111,2,112,2,113,1.029,114,2,115,2,116,1.703,117,2,118,1.252,119,1.252,120,1.252,121,2.127,122,1.252,123,1.252,124,1.252,125,1.252,126,1.252,127,2,128,1.252,129,2,130,1.252,131,2,132,1.252,133,2,134,1.252,135,2.498,136,2,137,1.252,138,1.252,139,1.252]],["title/modules/AppModule.html",[18,0.674,140,1.523]],["body/modules/AppModule.html",[2,1.277,3,0.376,4,0.376,5,0.317,9,0.99,10,0.045,11,0.505,13,0.376,14,0.208,15,0.021,16,0.029,17,0.021,18,1.027,19,2.703,20,1.166,21,1.041,22,1.679,23,1.679,24,1.477,25,2.319,26,1.679,29,2.397,30,1.701,31,2.306,32,1.679,33,1.477,35,1.477,38,2.306,80,1.31,140,2.987,141,2.268,142,2.78,143,2.268,144,2.703,145,2.703,146,2.78,147,2.634,148,3.82,149,1.931,150,2.78,151,2.268,152,3.82,153,2.78,154,2.78,155,2.78,156,2.78,157,2.78,158,2.78,159,2.78,160,2.78,161,2.78]],["title/controllers/AuthController.html",[0,0.958,162,1.731]],["body/controllers/AuthController.html",[0,0.635,2,0.635,3,0.257,4,0.257,5,0.217,7,1.148,9,0.638,10,0.045,11,0.345,13,0.257,14,0.142,15,0.014,16,0.022,17,0.014,42,1.01,43,1.01,47,1.87,49,2.372,50,1.775,52,1.75,59,1.598,73,1.32,74,2.013,75,1.649,77,1.32,78,1.32,80,0.896,86,2.372,87,2.799,91,2.088,92,3.096,93,1.32,94,1.32,95,1.32,96,1.32,102,1.32,104,3.096,107,1.75,162,1.75,163,1.32,164,0.504,165,1.085,166,2.364,167,2.364,168,1.901,169,2.013,170,2.898,171,1.085,172,1.901,173,1.54,174,1.365,175,1.365,176,2.554,177,1.085,178,1.551,179,2.898,180,1.901,181,2.866,182,1.551,183,1.901,184,1.474,185,1.901,186,1.01,187,1.01,188,1.32,189,1.01,190,1.32,191,1.551,192,1.901,193,1.901,194,1.551,195,2.898,196,1.901,197,1.901,198,1.551,199,1.901,200,1.901,201,1.901,202,1.901,203,1.901,204,1.901,205,1.901,206,1.901,207,1.901,208,1.901,209,1.901,210,1.551,211,1.901,212,1.901,213,1.901,214,1.901,215,1.901,216,1.901,217,3.93,218,1.901,219,3.451,220,1.901,221,1.901,222,1.901,223,1.901,224,1.901,225,1.901,226,1.901,227,1.901,228,2.898,229,1.901,230,1.901,231,1.901,232,2.364,233,1.551,234,1.551,235,3.451,236,1.901,237,2.898,238,2.898,239,2.898,240,2.898,241,1.901,242,1.901,243,1.551,244,1.551,245,1.551,246,1.901,247,1.901,248,1.32,249,1.901,250,1.901,251,1.901,252,1.901,253,2.898,254,2.898,255,2.898,256,2.866,257,2.898,258,1.901,259,1.901,260,2.364,261,1.901]],["title/interfaces/BadRequest.html",[262,1.523,263,1.731]],["body/interfaces/BadRequest.html",[3,0.532,4,0.532,5,0.449,10,0.042,13,0.532,15,0.03,16,0.036,17,0.03,56,2.74,91,2.85,98,3.724,164,1.045,175,2.527,262,2.092,263,2.89,264,3.212,265,3.212,266,4.786,267,2.008]],["title/controllers/HealthController.html",[0,0.958,147,1.731]],["body/controllers/HealthController.html",[0,1.015,2,1.015,3,0.41,4,0.41,5,0.346,7,1.833,9,0.737,10,0.045,11,0.552,13,0.41,14,0.227,15,0.023,16,0.031,17,0.023,21,1.137,42,1.614,43,2.155,47,1.701,50,1.701,59,1.015,75,1.274,80,1.431,147,2.448,149,2.109,164,0.806,165,1.518,169,2.816,171,1.518,177,1.518,268,2.477,269,4.055,270,5.222,271,4.871,272,3.037,273,3.037,274,3.037,275,3.037,276,1.91,277,3.308,278,3.037,279,2.477,280,2.477,281,3.037,282,4.055,283,3.037,284,3.037,285,3.037,286,4.055,287,3.037,288,3.037,289,2.477,290,3.037,291,3.037,292,3.037,293,3.037,294,3.037,295,3.037,296,3.037,297,3.037]],["title/injectables/PrismaService.html",[30,0.958,39,0.761]],["body/injectables/PrismaService.html",[3,0.465,4,0.465,5,0.392,9,0.8,10,0.044,11,0.625,13,0.465,14,0.258,15,0.026,16,0.033,17,0.026,30,1.471,39,1.168,40,1.621,47,2.267,75,1.846,164,0.913,165,1.647,171,1.647,177,1.647,186,1.829,298,2.807,299,4.4,300,4.851,301,5.404,302,5.404,303,3.441,304,3.441,305,2.39,306,4.4,307,3.441,308,3.441,309,3.441,310,3.441]],["title/classes/Server.html",[14,0.215,276,1.35]],["body/classes/Server.html",[3,0.406,4,0.406,5,0.343,9,0.882,10,0.045,13,0.544,14,0.225,15,0.023,16,0.031,17,0.023,18,0.708,24,2.579,47,1.906,59,1.741,75,1.69,113,1.906,140,1.598,164,0.798,165,1.508,171,1.126,177,1.126,276,2.14,289,2.454,311,2.089,312,2.089,313,3.008,314,3.008,315,2.454,316,3.008,317,2.414,318,3.008,319,2.414,320,3.008,321,2.798,322,2.454,323,3.008,324,3.008,325,3.008,326,3.008,327,3.008,328,3.008,329,3.008,330,3.008,331,3.008,332,3.008,333,3.008,334,3.008,335,3.008,336,3.008,337,3.008,338,3.008,339,3.008,340,3.008,341,3.008,342,3.008,343,3.008,344,3.008,345,3.008]],["title/injectables/TokenMiddleware.html",[39,0.761,319,1.523]],["body/injectables/TokenMiddleware.html",[3,0.263,4,0.263,5,0.221,9,0.353,10,0.045,11,0.353,13,0.263,14,0.146,15,0.015,16,0.022,17,0.015,39,0.782,40,0.916,50,1.886,59,1.647,80,1.389,86,2.4,91,2.112,113,1.886,164,0.516,165,1.103,166,1.585,171,0.728,173,1.033,174,1.389,175,0.916,176,2.715,177,0.728,187,1.566,188,1.349,219,2.905,232,2.404,233,1.585,234,1.585,235,3.668,243,1.585,244,1.585,245,2.404,248,1.349,256,1.585,260,2.404,267,1.494,305,1.349,319,1.566,346,1.349,347,2.047,348,1.943,349,3.668,350,1.943,351,2.905,352,2.404,353,2.473,354,1.585,355,1.585,356,1.349,357,1.585,358,2.473,359,1.585,360,1.585,361,1.585,362,1.585,363,1.943,364,1.943,365,3.561,366,2.948,367,1.943,368,2.948,369,1.943,370,1.943,371,3.974,372,3.561,373,1.943,374,3.561,375,2.905,376,3.561,377,2.948,378,3.561,379,2.948,380,1.943,381,1.943,382,2.948,383,1.943,384,2.948,385,1.943,386,1.943,387,1.943,388,1.943,389,2.948,390,3.561,391,1.943,392,1.943,393,1.943,394,1.943,395,1.943,396,1.943,397,2.948,398,2.948,399,1.943,400,3.561,401,1.943,402,1.943,403,2.948,404,1.943,405,1.943,406,1.943,407,1.943,408,1.943,409,1.943,410,1.943,411,1.943,412,1.943,413,1.943,414,1.943,415,1.943,416,1.943,417,1.943,418,1.943,419,1.943,420,1.943,421,1.943,422,1.943,423,1.943,424,1.943,425,1.943,426,1.943,427,1.943,428,1.943,429,1.943,430,1.943]],["title/injectables/UnlessMiddleware.html",[39,0.761,317,1.523]],["body/injectables/UnlessMiddleware.html",[3,0.463,4,0.463,5,0.391,9,0.623,10,0.044,11,0.623,13,0.463,14,0.257,15,0.026,16,0.033,17,0.026,39,1.165,40,1.615,50,1.439,59,1.146,164,0.91,165,1.644,171,1.284,173,1.822,174,1.615,175,1.615,176,2.924,177,1.284,267,1.439,305,2.381,317,2.333,347,3.048,349,4.165,351,3.581,352,3.581,375,2.797,431,2.797,432,4.39,433,4.842,434,3.429,435,3.429,436,3.429,437,4.39,438,3.429,439,3.429,440,3.429]],["title/controllers/UserController.html",[0,0.958,441,1.731]],["body/controllers/UserController.html",[0,0.72,2,0.72,3,0.291,4,0.291,5,0.245,7,1.3,9,0.688,10,0.045,11,0.391,13,0.291,14,0.161,15,0.016,16,0.024,17,0.016,42,1.144,43,1.692,44,2.21,47,2.28,48,1.495,49,3.112,50,1.96,52,3.06,53,2.21,54,1.495,56,2.483,59,0.72,75,0.903,87,2.526,107,1.922,121,2.905,164,0.571,165,1.192,167,2.597,169,3.1,171,1.671,173,2.372,174,2.103,175,2.103,176,1.922,177,1.671,178,1.757,181,2.597,182,2.597,184,1.589,186,1.144,191,1.757,194,1.757,198,1.757,210,1.757,267,1.589,279,1.757,441,1.922,442,1.757,443,3.089,444,2.597,445,2.597,446,2.597,447,2.154,448,2.154,449,2.154,450,2.154,451,2.154,452,3.089,453,2.154,454,2.154,455,3.787,456,2.154,457,2.154,458,2.154,459,2.154,460,2.154,461,2.154,462,2.154,463,2.154,464,1.757,465,2.154,466,3.183,467,2.154,468,2.154,469,2.154,470,2.154,471,4.183,472,2.154,473,2.154,474,2.154,475,2.154,476,2.154,477,2.154,478,2.154,479,2.154,480,2.154,481,2.154,482,2.154,483,2.154]],["title/modules/UserModule.html",[18,0.674,144,1.523]],["body/modules/UserModule.html",[2,1.403,3,0.432,4,0.432,5,0.364,9,0.963,10,0.045,11,0.581,13,0.432,14,0.24,15,0.024,16,0.032,17,0.024,18,1.102,20,1.342,21,1.198,22,1.932,23,1.932,24,1.7,25,2.489,26,1.932,30,1.771,31,2.534,32,1.932,33,1.7,35,1.7,38,1.932,144,2.911,162,2.828,184,2.223,441,2.828,464,2.61,484,2.61,485,2.61,486,3.199,487,3.199,488,2.23,489,3.199,490,3.199]],["title/injectables/UserService.html",[39,0.761,184,1.203]],["body/injectables/UserService.html",[3,0.178,4,0.178,5,0.15,9,0.581,10,0.045,11,0.239,13,0.178,14,0.099,15,0.01,16,0.016,17,0.01,30,1.342,35,0.7,39,0.575,40,0.62,42,1.151,43,1.151,44,1.504,45,1.504,46,2.251,47,2.223,48,1.504,49,2.924,50,1.877,51,1.767,52,1.666,53,0.914,54,1.504,55,1.767,56,2.437,57,1.767,58,2.251,59,1.594,60,1.074,61,1.074,62,1.074,63,1.074,64,0.914,65,1.074,66,1.074,67,1.074,68,1.074,69,1.074,70,1.074,71,1.767,72,2.608,73,1.504,74,1.504,75,1.76,76,1.767,77,1.504,78,1.504,79,1.074,80,1.02,81,1.074,82,1.074,83,1.074,84,1.074,85,1.767,86,1.666,87,2.294,88,1.074,89,1.074,90,1.074,91,0.7,92,2.788,93,2.22,94,2.453,95,0.914,96,0.914,97,1.074,98,1.916,99,1.074,100,1.074,101,1.074,102,1.504,103,1.074,104,1.916,105,1.767,106,2.608,107,1.666,108,1.074,109,1.767,110,1.074,111,1.767,112,1.767,113,0.909,114,1.767,115,1.767,116,1.504,117,1.767,118,1.074,119,1.767,120,1.767,121,2.913,122,1.767,123,1.074,124,1.767,125,1.074,126,1.767,127,2.608,128,1.767,129,2.608,130,1.767,131,1.767,132,1.074,133,1.767,134,1.074,135,2.251,136,2.608,137,1.074,138,1.074,139,1.074,164,0.349,165,0.811,171,1.627,173,2.309,174,2.047,175,2.047,177,1.57,184,0.909,186,0.7,189,0.7,190,0.914,263,0.795,267,1.964,280,1.074,443,1.767,444,1.767,445,1.767,446,1.767,452,1.074,491,0.914,492,2.166,493,2.166,494,1.317,495,1.317,496,1.317,497,1.317,498,1.317,499,1.317,500,1.074,501,1.074,502,3.197,503,1.317,504,1.317,505,1.317,506,1.317,507,1.317,508,1.317,509,1.317,510,1.317,511,1.317,512,1.317]],["title/classes/UserValidator.html",[14,0.215,488,1.523]],["body/classes/UserValidator.html",[3,0.58,4,0.58,5,0.489,10,0.043,13,0.58,14,0.321,15,0.033,16,0.038,17,0.033,311,2.98,488,2.677,513,3.501,514,4.292]],["title/modules/ValidatorModule.html",[18,0.674,145,1.523]],["body/modules/ValidatorModule.html",[2,1.322,3,0.534,4,0.534,5,0.45,9,0.872,10,0.045,11,0.719,13,0.534,14,0.296,15,0.03,16,0.036,17,0.03,18,1.129,20,1.659,25,2.101,38,2.387,145,2.55,488,2.55,515,3.954,516,3.954]],["title/coverage.html",[517,3.182]],["body/coverage.html",[0,1.546,1,1.617,5,0.305,6,2.185,10,0.044,14,0.279,15,0.02,16,0.028,17,0.02,18,0.63,29,1.262,30,0.895,39,1.289,41,2.185,64,4.013,113,1.124,147,1.617,162,1.617,163,2.971,184,1.124,187,1.978,189,1.978,262,1.424,263,1.617,265,2.185,267,1.124,268,2.185,276,1.754,298,2.185,312,3.374,317,1.978,319,1.978,321,1.86,346,3.211,353,1.86,358,1.86,431,2.185,441,1.617,442,2.185,488,1.424,491,2.585,513,2.185,517,2.185,518,2.185,519,2.679,520,2.679,521,5.59,522,4.624,523,5.465,524,2.185,525,4.279,526,2.679,527,2.679,528,2.679,529,2.679]],["title/dependencies.html",[21,1.289,530,2.4]],["body/dependencies.html",[10,0.045,11,0.632,14,0.332,15,0.026,16,0.034,17,0.026,21,1.302,149,2.416,151,2.838,186,1.849,187,1.849,189,1.849,315,2.838,531,4.875,532,3.479,533,3.479,534,4.431,535,3.479,536,3.479,537,2.838,538,3.479,539,3.479,540,4.431,541,3.479,542,3.479,543,3.479,544,3.479,545,3.479,546,3.479,547,3.479,548,3.479,549,3.479,550,4.875,551,3.479,552,3.479,553,3.479,554,3.479,555,3.479,556,3.479,557,3.479,558,3.479,559,3.479,560,3.479]],["title/index.html",[164,0.637,561,1.666,562,1.666]],["body/index.html",[10,0.044,15,0.023,16,0.031,17,0.023,21,1.148,45,3.185,59,1.025,113,1.286,174,1.444,248,2.129,262,1.629,264,2.501,276,1.444,277,2.501,561,2.129,562,2.129,563,3.066,564,3.066,565,3.066,566,3.066,567,3.066,568,3.066,569,3.066,570,3.066,571,3.066,572,3.066,573,3.066,574,3.066,575,3.066,576,3.066,577,3.066,578,3.066,579,3.066,580,2.501,581,2.501,582,4.081,583,3.066,584,3.066,585,5.596,586,4.587,587,3.066,588,4.081,589,3.066,590,3.066,591,3.066,592,3.066,593,3.066,594,3.066,595,3.066,596,3.066,597,4.89,598,4.587,599,4.081,600,3.066,601,3.066,602,3.066,603,3.066,604,3.066,605,3.066,606,3.066,607,4.081,608,3.066,609,3.066,610,3.066,611,3.066]],["title/license.html",[561,1.666,562,1.666,612,1.957]],["body/license.html",[10,0.032,15,0.024,16,0.032,17,0.024,33,1.678,116,2.192,347,2.889,518,2.575,537,2.575,580,2.575,581,2.575,612,2.575,613,3.157,614,4.654,615,3.157,616,3.157,617,4.161,618,3.157,619,3.157,620,3.157,621,3.157,622,3.157,623,3.157,624,4.161,625,5.527,626,3.157,627,3.157,628,3.157,629,4.654,630,3.157,631,4.161,632,3.157,633,3.157,634,3.157,635,3.157,636,3.157,637,3.157,638,3.157,639,3.157,640,3.157,641,4.161,642,3.157,643,3.157,644,3.157,645,3.157,646,3.157,647,3.157,648,3.157,649,4.161,650,4.161,651,3.157,652,3.157,653,3.157,654,3.157,655,3.157,656,3.157,657,3.157,658,3.157,659,3.157,660,3.157,661,3.157,662,3.157,663,3.157,664,3.157,665,3.157,666,3.157,667,3.157,668,3.157,669,3.157,670,3.157,671,3.157,672,3.157,673,3.157,674,3.157,675,3.157,676,3.157,677,3.157,678,3.157]],["title/modules.html",[20,1.636]],["body/modules.html",[10,0.038,15,0.032,16,0.038,17,0.032,19,2.211,20,1.746,140,2.211,144,2.211,145,2.211,679,5.28,680,5.28,681,5.28,682,5.463,683,4.161,684,4.161]],["title/overview.html",[685,3.182]],["body/overview.html",[2,1.11,10,0.043,15,0.025,16,0.033,17,0.025,18,0.782,19,2.895,20,1.393,21,1.244,22,2.005,23,2.005,24,1.765,25,1.765,26,2.005,27,2.71,28,2.71,29,2.377,30,1.747,31,2.597,32,2.005,33,1.765,40,1.565,140,3.03,141,2.71,143,2.71,144,2.895,145,2.535,184,2.001,262,1.765,311,2.307,356,2.307,484,2.71,485,2.71,685,2.71,686,4.301,687,3.322,688,3.322]],["title/miscellaneous/variables.html",[689,1.957,690,2.81]],["body/miscellaneous/variables.html",[10,0.045,15,0.022,16,0.03,17,0.022,18,0.932,56,1.559,113,2.285,163,2.037,164,0.779,187,2.553,188,2.751,189,2.553,190,2.751,267,1.662,276,2.114,312,2.037,317,2.384,319,2.384,321,2.751,322,2.393,346,2.037,353,2.751,354,2.393,355,2.393,356,2.037,357,2.393,358,2.751,359,2.393,360,2.393,361,2.393,362,2.393,491,2.037,500,4.491,501,4.491,524,2.393,689,2.393,690,2.393,691,3.962,692,2.934,693,4.486,694,4.804,695,2.934]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":64,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.0.0.0",{"_index":332,"title":{},"body":{"classes/Server.html":{}}}],["0.1.13",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":526,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":356,"title":{},"body":{"injectables/TokenMiddleware.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":77,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["100",{"_index":66,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["2",{"_index":688,"title":{},"body":{"overview.html":{}}}],["2.7.1",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["2020",{"_index":616,"title":{},"body":{"license.html":{}}}],["2h",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["3.0.2",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["3333",{"_index":289,"title":{},"body":{"controllers/HealthController.html":{},"classes/Server.html":{}}}],["4",{"_index":686,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":687,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["7.0.1",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["above",{"_index":648,"title":{},"body":{"license.html":{}}}],["acaba",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"index.html":{}}}],["acesso",{"_index":384,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["action",{"_index":672,"title":{},"body":{"license.html":{}}}],["agency",{"_index":8,"title":{},"body":{"controllers/AgencyController.html":{}}}],["agency.controller",{"_index":37,"title":{},"body":{"modules/AgencyModule.html":{}}}],["agency.service",{"_index":36,"title":{},"body":{"modules/AgencyModule.html":{}}}],["agency/agency.module",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["agency/agency.service",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["agencycontroller",{"_index":1,"title":{"controllers/AgencyController.html":{}},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"coverage.html":{}}}],["agencymodule",{"_index":19,"title":{"modules/AgencyModule.html":{}},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["agencyservice",{"_index":29,"title":{"injectables/AgencyService.html":{}},"body":{"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"coverage.html":{},"overview.html":{}}}],["analise",{"_index":294,"title":{},"body":{"controllers/HealthController.html":{}}}],["and/or",{"_index":639,"title":{},"body":{"license.html":{}}}],["andnotnicknameisnull",{"_index":133,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["ao",{"_index":368,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["aos",{"_index":385,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["api/v1",{"_index":322,"title":{},"body":{"classes/Server.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":324,"title":{},"body":{"classes/Server.html":{}}}],["app.close",{"_index":345,"title":{},"body":{"classes/Server.html":{}}}],["app.listen(process.env.port",{"_index":331,"title":{},"body":{"classes/Server.html":{}}}],["app.module",{"_index":316,"title":{},"body":{"classes/Server.html":{}}}],["app.setglobalprefix(globalprefix",{"_index":326,"title":{},"body":{"classes/Server.html":{}}}],["app.use(unlessmiddleware.use",{"_index":327,"title":{},"body":{"classes/Server.html":{}}}],["apply",{"_index":605,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":140,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"classes/Server.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":676,"title":{},"body":{"license.html":{}}}],["asc",{"_index":70,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["associated",{"_index":626,"title":{},"body":{"license.html":{}}}],["async",{"_index":47,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["autenticar",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["autenticar(@res",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["autenticar(res",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["authcontroller",{"_index":162,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["authmiddleware\\n",{"_index":380,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["authorizedlog",{"_index":364,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["authorizedlog(logedin",{"_index":387,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["authors",{"_index":665,"title":{},"body":{"license.html":{}}}],["available",{"_index":684,"title":{},"body":{"modules.html":{}}}],["await",{"_index":75,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["badrequest",{"_index":263,"title":{"interfaces/BadRequest.html":{}},"body":{"interfaces/BadRequest.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["bcrypt",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["bcrypt.compare",{"_index":110,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["bcrypt.compare(data.secret",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["bcrypt.hash(data.secret",{"_index":76,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["bcrypt.hashsync(data.secret",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["body",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":278,"title":{},"body":{"controllers/HealthController.html":{}}}],["boot",{"_index":584,"title":{},"body":{"index.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"classes/Server.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["browse",{"_index":682,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":679,"title":{},"body":{"modules.html":{}}}],["c",{"_index":615,"title":{},"body":{"license.html":{}}}],["campos",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["catch",{"_index":102,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["changes",{"_index":598,"title":{},"body":{"index.html":{}}}],["charge",{"_index":621,"title":{},"body":{"license.html":{}}}],["chave",{"_index":99,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["cipriano",{"_index":581,"title":{},"body":{"index.html":{},"license.html":{}}}],["claim",{"_index":668,"title":{},"body":{"license.html":{}}}],["class",{"_index":14,"title":{"classes/Server.html":{},"classes/UserValidator.html":{}},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":311,"title":{},"body":{"classes/Server.html":{},"classes/UserValidator.html":{},"overview.html":{}}}],["cluster_agencymodule",{"_index":27,"title":{},"body":{"modules/AgencyModule.html":{},"overview.html":{}}}],["cluster_agencymodule_providers",{"_index":28,"title":{},"body":{"modules/AgencyModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_usermodule",{"_index":484,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":485,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["comparenullvalues",{"_index":129,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["condition",{"_index":135,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["conditions",{"_index":647,"title":{},"body":{"license.html":{}}}],["confere",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["config/configuration",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["connected",{"_index":307,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connection",{"_index":677,"title":{},"body":{"license.html":{}}}],["console.clear",{"_index":333,"title":{},"body":{"classes/Server.html":{}}}],["console.dir(`${select",{"_index":139,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["console.dir(data",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.dir(element",{"_index":90,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["console.dir(existsuser",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.dir(json.description",{"_index":569,"title":{},"body":{"index.html":{}}}],["console.dir(newuser",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.dir(server",{"_index":334,"title":{},"body":{"classes/Server.html":{}}}],["console.dir(userloggedin",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"\\n",{"_index":373,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"\\nunauthorized",{"_index":391,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"by",{"_index":371,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"in",{"_index":377,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"on",{"_index":379,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"request",{"_index":374,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log(\"x",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('\\nacesso",{"_index":366,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["console.log('\\nusuario",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('email",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('newuser",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('prisma",{"_index":306,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log('senha",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(`${new",{"_index":339,"title":{},"body":{"classes/Server.html":{}}}],["console.log(`\\n${process.env.npm_package_name",{"_index":335,"title":{},"body":{"classes/Server.html":{}}}],["console.log(`existsuser",{"_index":84,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["console.log(`query",{"_index":138,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["console.log(process.env.npm_package_description",{"_index":338,"title":{},"body":{"classes/Server.html":{}}}],["const",{"_index":59,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(prisma",{"_index":494,"title":{},"body":{"injectables/UserService.html":{}}}],["contract",{"_index":673,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AgencyController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AgencyController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('agency",{"_index":12,"title":{},"body":{"controllers/AgencyController.html":{}}}],["controller('health",{"_index":283,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('user",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{},"overview.html":{}}}],["cookie",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["copies",{"_index":641,"title":{},"body":{"license.html":{}}}],["copy",{"_index":624,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":614,"title":{},"body":{"license.html":{}}}],["corretamente",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["coverage",{"_index":517,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpf",{"_index":93,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["create",{"_index":492,"title":{},"body":{"injectables/UserService.html":{}}}],["create(data",{"_index":71,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["credentials",{"_index":115,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["currículo",{"_index":574,"title":{},"body":{"index.html":{}}}],["currículo→único",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["damages",{"_index":669,"title":{},"body":{"license.html":{}}}],["data",{"_index":87,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["data.cpf",{"_index":83,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["data.email",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["data.id",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["data.secret",{"_index":74,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["database",{"_index":599,"title":{},"body":{"index.html":{}}}],["datautc",{"_index":353,"title":{},"body":{"injectables/TokenMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["date().getutcdate",{"_index":357,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutcfullyear",{"_index":354,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutchours",{"_index":359,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutcminutes",{"_index":360,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutcmonth",{"_index":355,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().getutcseconds",{"_index":361,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["date().tolocaledatestring",{"_index":340,"title":{},"body":{"classes/Server.html":{}}}],["date().tolocaletimestring()}\\n",{"_index":341,"title":{},"body":{"classes/Server.html":{}}}],["datebirth",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["de",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["deal",{"_index":628,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":678,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["declare",{"_index":323,"title":{},"body":{"classes/Server.html":{}}}],["decoded",{"_index":405,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["decorators",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":500,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":443,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete('/:id",{"_index":477,"title":{},"body":{"controllers/UserController.html":{}}}],["delete('/:id')@httpcode(200",{"_index":448,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(@param('id",{"_index":478,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(id",{"_index":447,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(where",{"_index":124,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependencies(healthcheckservice",{"_index":284,"title":{},"body":{"controllers/HealthController.html":{}}}],["desconnected",{"_index":309,"title":{},"body":{"injectables/PrismaService.html":{}}}],["dev",{"_index":590,"title":{},"body":{"index.html":{}}}],["development",{"_index":591,"title":{},"body":{"index.html":{}}}],["devem",{"_index":95,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["distribute",{"_index":637,"title":{},"body":{"license.html":{}}}],["dns",{"_index":285,"title":{},"body":{"controllers/HealthController.html":{}}}],["dnshealthindicator",{"_index":282,"title":{},"body":{"controllers/HealthController.html":{}}}],["document.getelementbyid(\"description\").innerhtml",{"_index":570,"title":{},"body":{"index.html":{}}}],["document.getelementbyid(\"name\").innerhtml",{"_index":572,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":518,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["don't",{"_index":592,"title":{},"body":{"index.html":{}}}],["duplicada",{"_index":101,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["e",{"_index":401,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["efetue",{"_index":413,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["em",{"_index":389,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["email",{"_index":92,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["encontrado",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["err",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["err.expiredat",{"_index":415,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["err.message",{"_index":406,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["err.name",{"_index":409,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["error",{"_index":98,"title":{},"body":{"injectables/AgencyService.html":{},"interfaces/BadRequest.html":{},"injectables/UserService.html":{}}}],["error.message",{"_index":103,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["est",{"_index":419,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["este",{"_index":429,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["event",{"_index":664,"title":{},"body":{"license.html":{}}}],["existsuser",{"_index":78,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["existsuser.find(user",{"_index":81,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["existsuser.length",{"_index":85,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["existsuser.secret",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["existsuser.some(element",{"_index":89,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["existsuser?.email",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["experimentalto",{"_index":604,"title":{},"body":{"index.html":{}}}],["expired",{"_index":407,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["expiredat",{"_index":414,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["expiresin",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["expirou",{"_index":412,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["export",{"_index":13,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":537,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":299,"title":{},"body":{"injectables/PrismaService.html":{}}}],["falha",{"_index":418,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["false",{"_index":86,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["fazer",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["fetch(myrequest",{"_index":565,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{}}}],["files",{"_index":627,"title":{},"body":{"license.html":{}}}],["fitness",{"_index":660,"title":{},"body":{"license.html":{}}}],["following",{"_index":646,"title":{},"body":{"license.html":{}}}],["fornecido",{"_index":397,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["free",{"_index":620,"title":{},"body":{"license.html":{}}}],["fullname",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["furnished",{"_index":644,"title":{},"body":{"license.html":{}}}],["g",{"_index":595,"title":{},"body":{"index.html":{}}}],["generate",{"_index":607,"title":{},"body":{"index.html":{}}}],["generateto",{"_index":609,"title":{},"body":{"index.html":{}}}],["get('/')@httpcode(200",{"_index":450,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:id",{"_index":474,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:id')@httpcode(200",{"_index":453,"title":{},"body":{"controllers/UserController.html":{}}}],["get('status",{"_index":296,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('status')@httpcode(httpstatus.ok",{"_index":274,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@httpcode(httpstatus.ok)@healthcheck",{"_index":272,"title":{},"body":{"controllers/HealthController.html":{}}}],["getbyemail",{"_index":127,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["getbyemail(email",{"_index":126,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["getbyuserwhereuniqueinput",{"_index":136,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["getbyuserwhereuniqueinput(unique",{"_index":128,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["getmany",{"_index":444,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getmany(@query",{"_index":472,"title":{},"body":{"controllers/UserController.html":{}}}],["getmany(query",{"_index":54,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getone",{"_index":445,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getone(@param('id",{"_index":475,"title":{},"body":{"controllers/UserController.html":{}}}],["getone(id",{"_index":48,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getting",{"_index":561,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["globalprefix",{"_index":321,"title":{},"body":{"classes/Server.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["globalprefix}/health/status",{"_index":330,"title":{},"body":{"classes/Server.html":{}}}],["globalprefix}/user/signin",{"_index":329,"title":{},"body":{"classes/Server.html":{}}}],["granted",{"_index":619,"title":{},"body":{"license.html":{}}}],["graph",{"_index":683,"title":{},"body":{"modules.html":{}}}],["graphical",{"_index":610,"title":{},"body":{"index.html":{}}}],["hasaccess",{"_index":381,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["hasaccess(decoded",{"_index":425,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["hashedpassword",{"_index":106,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["health",{"_index":269,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":270,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":281,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":147,"title":{"controllers/HealthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["hereby",{"_index":618,"title":{},"body":{"license.html":{}}}],["holders",{"_index":666,"title":{},"body":{"license.html":{}}}],["horautc",{"_index":358,"title":{},"body":{"injectables/TokenMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:${port}/api/v1/health/status",{"_index":292,"title":{},"body":{"controllers/HealthController.html":{}}}],["http://localhost:${server.address().port",{"_index":337,"title":{},"body":{"classes/Server.html":{}}}],["http://zeta08.primusweb.com.br:${3017}/api/v1/health",{"_index":295,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpcode",{"_index":279,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["httpcode(200",{"_index":471,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(201",{"_index":467,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":286,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpexception",{"_index":508,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexception('wrong",{"_index":114,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["https://www.npmjs.com/package/validator.ts%20%20or%20https://www.npmjs.com/package/validate",{"_index":514,"title":{},"body":{"classes/UserValidator.html":{}}}],["httpstatus",{"_index":280,"title":{},"body":{"controllers/HealthController.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":117,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["id",{"_index":52,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":519,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":305,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["implied",{"_index":656,"title":{},"body":{"license.html":{}}}],["import",{"_index":9,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidatorModule.html":{}}}],["imports",{"_index":38,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{}}}],["included",{"_index":651,"title":{},"body":{"license.html":{}}}],["including",{"_index":631,"title":{},"body":{"license.html":{}}}],["incorreta",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["incorreto",{"_index":420,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["index",{"_index":164,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{}}}],["injectable",{"_index":39,"title":{"injectables/AgencyService.html":{},"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"injectables/UserService.html":{}},"body":{"injectables/AgencyService.html":{},"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":40,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["install",{"_index":582,"title":{},"body":{"index.html":{}}}],["installed",{"_index":593,"title":{},"body":{"index.html":{}}}],["interface",{"_index":262,"title":{"interfaces/BadRequest.html":{}},"body":{"interfaces/BadRequest.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["interfaces",{"_index":264,"title":{},"body":{"interfaces/BadRequest.html":{},"index.html":{}}}],["interfaces/badrequest.interface",{"_index":509,"title":{},"body":{"injectables/UserService.html":{}}}],["isglobal",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["isnull",{"_index":134,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["ispasswordmatching",{"_index":109,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["json.description",{"_index":571,"title":{},"body":{"index.html":{}}}],["json.name",{"_index":573,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.sign",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt.verify(token",{"_index":404,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["kind",{"_index":655,"title":{},"body":{"license.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["liability",{"_index":670,"title":{},"body":{"license.html":{}}}],["liable",{"_index":667,"title":{},"body":{"license.html":{}}}],["license",{"_index":612,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":632,"title":{},"body":{"license.html":{}}}],["limited",{"_index":657,"title":{},"body":{"license.html":{}}}],["literal",{"_index":502,"title":{},"body":{"injectables/UserService.html":{}}}],["load",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["logedin",{"_index":365,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["logedin.email",{"_index":370,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["login",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["made",{"_index":608,"title":{},"body":{"index.html":{}}}],["matching",{"_index":16,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":659,"title":{},"body":{"license.html":{}}}],["merge",{"_index":635,"title":{},"body":{"license.html":{}}}],["message",{"_index":91,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["metadata",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["middleware",{"_index":435,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["middleware(req",{"_index":440,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["middleware/router/unless.middleware",{"_index":318,"title":{},"body":{"classes/Server.html":{}}}],["middleware/token/token.middleware",{"_index":320,"title":{},"body":{"classes/Server.html":{}}}],["migrate",{"_index":602,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":689,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":613,"title":{},"body":{"license.html":{}}}],["mode",{"_index":588,"title":{},"body":{"index.html":{}}}],["modify",{"_index":634,"title":{},"body":{"license.html":{}}}],["module",{"_index":18,"title":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{}},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"classes/Server.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["module.hot",{"_index":342,"title":{},"body":{"classes/Server.html":{}}}],["module.hot.accept",{"_index":343,"title":{},"body":{"classes/Server.html":{}}}],["module.hot.dispose",{"_index":344,"title":{},"body":{"classes/Server.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{},"modules.html":{},"overview.html":{}}}],["momento",{"_index":421,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["myrequest",{"_index":563,"title":{},"body":{"index.html":{}}}],["n",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["name",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["nameofyourmigrate",{"_index":603,"title":{},"body":{"index.html":{}}}],["natan",{"_index":580,"title":{},"body":{"index.html":{},"license.html":{}}}],["negado",{"_index":388,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["nenhum",{"_index":396,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["nestfactory",{"_index":314,"title":{},"body":{"classes/Server.html":{}}}],["nestfactory.create(appmodule",{"_index":325,"title":{},"body":{"classes/Server.html":{}}}],["nestjs",{"_index":576,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":11,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidatorModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":315,"title":{},"body":{"classes/Server.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["nestjs/terminus",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjsplus/redirect",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["nestmiddleware",{"_index":352,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["new",{"_index":113,"title":{},"body":{"injectables/AgencyService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["newuser.hasownproperty('id",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["newuser['cpf",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['datebirth",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['email",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['fullname",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['id",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['nickname",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser['role",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["next",{"_index":349,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["nica",{"_index":100,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["nickname",{"_index":94,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["nico",{"_index":575,"title":{},"body":{"index.html":{}}}],["nicos",{"_index":97,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["noninfringement",{"_index":663,"title":{},"body":{"license.html":{}}}],["notice",{"_index":649,"title":{},"body":{"license.html":{}}}],["novamente",{"_index":403,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["npm",{"_index":594,"title":{},"body":{"index.html":{}}}],["npx",{"_index":601,"title":{},"body":{"index.html":{}}}],["null",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["number(id",{"_index":53,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number(query.skip",{"_index":63,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["number(query.take",{"_index":65,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["não",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["o",{"_index":400,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["obtaining",{"_index":623,"title":{},"body":{"license.html":{}}}],["onmoduledestroy",{"_index":301,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":302,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["orderby",{"_index":58,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["orderby?.length",{"_index":67,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["orderby[0",{"_index":68,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["orderby[1",{"_index":69,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["os",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["otherwise",{"_index":675,"title":{},"body":{"license.html":{}}}],["ou",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["out",{"_index":33,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":685,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":530,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":462,"title":{},"body":{"controllers/UserController.html":{}}}],["param('id",{"_index":482,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["params",{"_index":122,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["parser",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["participants",{"_index":579,"title":{},"body":{"index.html":{}}}],["particular",{"_index":661,"title":{},"body":{"license.html":{}}}],["passport",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["path",{"_index":439,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["pathcheck",{"_index":437,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["paths",{"_index":433,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["paths.some(path",{"_index":438,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["permission",{"_index":617,"title":{},"body":{"license.html":{}}}],["permit",{"_index":642,"title":{},"body":{"license.html":{}}}],["permitido",{"_index":367,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["person",{"_index":622,"title":{},"body":{"license.html":{}}}],["persons",{"_index":643,"title":{},"body":{"license.html":{}}}],["port",{"_index":287,"title":{},"body":{"controllers/HealthController.html":{}}}],["portions",{"_index":653,"title":{},"body":{"license.html":{}}}],["post",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post('/')@httpcode(201",{"_index":456,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/signin",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgress",{"_index":577,"title":{},"body":{"index.html":{}}}],["postservice",{"_index":466,"title":{},"body":{"controllers/UserController.html":{}}}],["preenchidos",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AgencyController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":45,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["prisma/client",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/prisma.service",{"_index":35,"title":{},"body":{"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["prisma/schema.prisma",{"_index":600,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":300,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaservice",{"_index":30,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":43,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["process.env.npm_package_name",{"_index":297,"title":{},"body":{"controllers/HealthController.html":{}}}],["process.env.port",{"_index":288,"title":{},"body":{"controllers/HealthController.html":{}}}],["process.env.server_secret_token",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["production",{"_index":587,"title":{},"body":{"index.html":{}}}],["profilecreateonewithoutuserinput",{"_index":510,"title":{},"body":{"injectables/UserService.html":{}}}],["promise",{"_index":49,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":266,"title":{},"body":{"interfaces/BadRequest.html":{}}}],["provided",{"_index":116,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/ValidatorModule.html":{},"overview.html":{}}}],["public",{"_index":104,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["public.\"user",{"_index":132,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["publish",{"_index":636,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":662,"title":{},"body":{"license.html":{}}}],["put",{"_index":463,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/:id",{"_index":480,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/:id')@httpcode(200",{"_index":459,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":452,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["query.orderby",{"_index":60,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["query.orderby.split",{"_index":61,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["readonly",{"_index":44,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["realize",{"_index":399,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["recurso",{"_index":430,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["recursos",{"_index":386,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["reflect",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["req",{"_index":351,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["req.headers.referer",{"_index":378,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["req.headers[\"x",{"_index":393,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["req.method",{"_index":376,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["req.path",{"_index":375,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{}}}],["request('./package.json",{"_index":564,"title":{},"body":{"index.html":{}}}],["require('bcrypt",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["require('jsonwebtoken",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{}}}],["res.status(200).json",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(201).json",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(201).json(newuser",{"_index":470,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(201).send",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(400).json",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(400).json(newuser",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["res.status(401).json",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(401).send(tokenerror",{"_index":416,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["res.status(403).json",{"_index":426,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["res.status(403).send",{"_index":417,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["res.status(500).json",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":32,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":461,"title":{},"body":{"controllers/UserController.html":{}}}],["response.json",{"_index":567,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":630,"title":{},"body":{"license.html":{}}}],["result",{"_index":15,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":17,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retornar",{"_index":424,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["return",{"_index":50,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rights",{"_index":633,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["running",{"_index":336,"title":{},"body":{"classes/Server.html":{}}}],["rxjs",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":597,"title":{},"body":{"index.html":{}}}],["secret",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["select",{"_index":131,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["sell",{"_index":640,"title":{},"body":{"license.html":{}}}],["sempre",{"_index":422,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["send",{"_index":395,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["senha",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["ser",{"_index":96,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["server",{"_index":276,"title":{"classes/Server.html":{}},"body":{"controllers/HealthController.html":{},"classes/Server.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sessão",{"_index":411,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["shall",{"_index":650,"title":{},"body":{"license.html":{}}}],["sigin",{"_index":493,"title":{},"body":{"injectables/UserService.html":{}}}],["sigin(email",{"_index":105,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["signup",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["signup(@res",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(@response",{"_index":468,"title":{},"body":{"controllers/UserController.html":{}}}],["signup(res",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["sistema",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["skip",{"_index":55,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["software",{"_index":625,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AgencyController.html":{},"modules/AgencyModule.html":{},"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BadRequest.html":{},"controllers/HealthController.html":{},"injectables/PrismaService.html":{},"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{}}}],["src/.../auth.controller.ts",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../server.ts",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../token.middleware.ts",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.service.ts",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/agency/agency.controller.ts",{"_index":6,"title":{},"body":{"controllers/AgencyController.html":{},"coverage.html":{}}}],["src/agency/agency.module.ts",{"_index":34,"title":{},"body":{"modules/AgencyModule.html":{}}}],["src/agency/agency.service.ts",{"_index":41,"title":{},"body":{"injectables/AgencyService.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller",{"_index":490,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:41",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/health.controller.ts",{"_index":268,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health.controller.ts:14",{"_index":273,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health.controller.ts:24",{"_index":275,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/interfaces/badrequest.interface.ts",{"_index":265,"title":{},"body":{"interfaces/BadRequest.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":524,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/middleware/router/unless.middleware.ts",{"_index":431,"title":{},"body":{"injectables/UnlessMiddleware.html":{},"coverage.html":{}}}],["src/middleware/router/unless.middleware.ts:6",{"_index":434,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["src/middleware/token/token.middleware.ts",{"_index":346,"title":{},"body":{"injectables/TokenMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/middleware/token/token.middleware.ts:9",{"_index":350,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["src/prisma/prisma.service.ts",{"_index":298,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:12",{"_index":303,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:7",{"_index":304,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/server.ts",{"_index":312,"title":{},"body":{"classes/Server.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server.ts:15",{"_index":313,"title":{},"body":{"classes/Server.html":{}}}],["src/user/user.controller.ts",{"_index":442,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:14",{"_index":457,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:22",{"_index":451,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:28",{"_index":454,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:34",{"_index":449,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:40",{"_index":460,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":486,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":491,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/user.service.ts:104",{"_index":498,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:112",{"_index":499,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:14",{"_index":495,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:20",{"_index":505,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:28",{"_index":503,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:45",{"_index":496,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:69",{"_index":506,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:86",{"_index":507,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:98",{"_index":497,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/validator/user.validate.ts",{"_index":513,"title":{},"body":{"classes/UserValidator.html":{},"coverage.html":{}}}],["src/utils/validator/validator.module.ts",{"_index":515,"title":{},"body":{"modules/ValidatorModule.html":{}}}],["start",{"_index":586,"title":{},"body":{"index.html":{}}}],["started",{"_index":562,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["statements",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":271,"title":{},"body":{"controllers/HealthController.html":{}}}],["status(403",{"_index":394,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["string",{"_index":56,"title":{},"body":{"injectables/AgencyService.html":{},"interfaces/BadRequest.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["studioshortcuts",{"_index":611,"title":{},"body":{"index.html":{}}}],["sua",{"_index":410,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["subject",{"_index":645,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":638,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":652,"title":{},"body":{"license.html":{}}}],["support",{"_index":680,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":681,"title":{},"body":{"modules.html":{}}}],["table",{"_index":529,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":528,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":57,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["tem",{"_index":428,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["temacesso",{"_index":372,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["tente",{"_index":402,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["terminusmodule",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["testesdadsad",{"_index":578,"title":{},"body":{"index.html":{}}}],["then(json",{"_index":568,"title":{},"body":{"index.html":{}}}],["then(response",{"_index":566,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":308,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":310,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.dns.pingcheck('zeta",{"_index":293,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.dns.pingcheck(process.env.npm_package_name",{"_index":291,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.getbyemail(email",{"_index":108,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.getbyuserwhereuniqueinput(data",{"_index":79,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.health.check",{"_index":290,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.prisma.$queryraw(`${select",{"_index":137,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.create",{"_index":88,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":125,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":62,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findone",{"_index":51,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":123,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["this.userservice.create(data",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.create(userdata",{"_index":469,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.delete",{"_index":479,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getbyemail(data.email",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.getmany(query",{"_index":473,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getone(id",{"_index":476,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update",{"_index":483,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":112,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["todo",{"_index":382,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["token",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{}}}],["tokenerror",{"_index":408,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["tokenmiddleware",{"_index":319,"title":{"injectables/TokenMiddleware.html":{}},"body":{"classes/Server.html":{},"injectables/TokenMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenmiddleware.use",{"_index":328,"title":{},"body":{"classes/Server.html":{}}}],["tokenmiddleware\\n",{"_index":392,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["tort",{"_index":674,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":80,"title":{},"body":{"injectables/AgencyService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{}}}],["try",{"_index":73,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["ts",{"_index":589,"title":{},"body":{"index.html":{}}}],["type",{"_index":267,"title":{},"body":{"interfaces/BadRequest.html":{},"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedlog",{"_index":390,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["undefined",{"_index":118,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["unique",{"_index":130,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["unlessmiddleware",{"_index":317,"title":{"injectables/UnlessMiddleware.html":{}},"body":{"classes/Server.html":{},"injectables/UnlessMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":277,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["update",{"_index":446,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@body",{"_index":481,"title":{},"body":{"controllers/UserController.html":{}}}],["update(data",{"_index":458,"title":{},"body":{"controllers/UserController.html":{}}}],["update(params",{"_index":119,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["upto",{"_index":606,"title":{},"body":{"index.html":{}}}],["use",{"_index":347,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UnlessMiddleware.html":{},"license.html":{}}}],["use(@req",{"_index":363,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["use(middleware",{"_index":432,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["use(req",{"_index":348,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["useguards",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":107,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.controller",{"_index":487,"title":{},"body":{"modules/UserModule.html":{}}}],["user.cpf",{"_index":82,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["user.secret",{"_index":111,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":464,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.validate",{"_index":516,"title":{},"body":{"modules/ValidatorModule.html":{}}}],["user/user.module",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.service",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercontroller",{"_index":441,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercreated",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercreated.email",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercreated.id",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercreateinput",{"_index":72,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["userdata",{"_index":455,"title":{},"body":{"controllers/UserController.html":{}}}],["userloggedin",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["usermodel",{"_index":465,"title":{},"body":{"controllers/UserController.html":{}}}],["usermodule",{"_index":144,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userorderbyinput",{"_index":512,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":184,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdateinput",{"_index":120,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["uservalidator",{"_index":488,"title":{"classes/UserValidator.html":{}},"body":{"modules/UserModule.html":{},"classes/UserValidator.html":{},"modules/ValidatorModule.html":{},"coverage.html":{}}}],["userwhereinput",{"_index":511,"title":{},"body":{"injectables/UserService.html":{}}}],["userwhereuniqueinput",{"_index":121,"title":{},"body":{"injectables/AgencyService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usuário",{"_index":369,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["utc",{"_index":362,"title":{},"body":{"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["utils",{"_index":46,"title":{},"body":{"injectables/AgencyService.html":{},"injectables/UserService.html":{}}}],["utils/validator/user.validate",{"_index":489,"title":{},"body":{"modules/UserModule.html":{}}}],["utils/validator/validator.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["vai",{"_index":423,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["validator",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["validatormodule",{"_index":145,"title":{"modules/ValidatorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ValidatorModule.html":{},"modules.html":{},"overview.html":{}}}],["value",{"_index":501,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":690,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verificação",{"_index":383,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["voc",{"_index":427,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["void",{"_index":436,"title":{},"body":{"injectables/UnlessMiddleware.html":{}}}],["warning",{"_index":398,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["warranties",{"_index":658,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":654,"title":{},"body":{"license.html":{}}}],["whether",{"_index":671,"title":{},"body":{"license.html":{}}}],["without",{"_index":629,"title":{},"body":{"license.html":{}}}],["yarn",{"_index":585,"title":{},"body":{"index.html":{}}}],["yarnprisma",{"_index":596,"title":{},"body":{"index.html":{}}}],["yarnto",{"_index":583,"title":{},"body":{"index.html":{}}}],["yes",{"_index":504,"title":{},"body":{"injectables/UserService.html":{}}}],["zoom",{"_index":31,"title":{},"body":{"modules/AgencyModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AgencyController.html":{"url":"controllers/AgencyController.html","title":"controller - AgencyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AgencyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/agency/agency.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                agency\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('agency')\nexport class AgencyController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AgencyModule.html":{"url":"modules/AgencyModule.html","title":"module - AgencyModule","body":"\n                   \n\n\n\n\n    Modules\n    AgencyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AgencyModule\n\n\n\ncluster_AgencyModule_providers\n\n\n\n\nAgencyService\n\nAgencyService\n\n\n\nAgencyModule\n\nAgencyModule\n\nAgencyModule -->\n\nAgencyService->AgencyModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAgencyModule -->\n\nPrismaService->AgencyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/agency/agency.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AgencyService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AgencyController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from '@prisma/prisma.service';\nimport { AgencyService } from './agency.service';\nimport { AgencyController } from './agency.controller';\n\n@Module({\n    imports: [],\n    controllers: [\n        // AgencyController\n    AgencyController],\n    providers: [\n        AgencyService,\n        PrismaService\n    ],\n})\nexport class AgencyModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AgencyService.html":{"url":"injectables/AgencyService.html","title":"injectable - AgencyService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AgencyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/agency/agency.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '@prisma/prisma.service';\n\n@Injectable()\nexport class AgencyService {\n\n    // constructor(\n    //     private readonly prisma: PrismaService,\n    //     private readonly utils: PrismaService,\n    // ) { }\n\n    // async getOne(id): Promise {\n    //     return this.prisma.user.findOne({\n    //         where: {\n    //             id: Number(id)\n    //         },\n    //     });\n    // }\n\n    // async getMany(query?: {\n    //     skip?: string\n    //     take?: string\n    //     orderBy?: any\n    // }): Promise {\n\n    //     const orderBy = query.orderBy ? query.orderBy.split(',') : []\n\n    //     return this.prisma.user.findMany({\n    //         skip: Number(query.skip) || 0,\n    //         take: Number(query.take) || 100,\n    //         orderBy: orderBy?.length ? { [orderBy[0]]: orderBy[1] } : {\n    //             id: 'asc'\n    //         }\n    //     });\n    // }\n\n    // async create(data: UserCreateInput): Promise {\n    //     try {\n    //         data.secret = await bcrypt.hash(data.secret, 10);\n    //         const existsUser = await this.getByUserWhereUniqueInput(data, true)\n    //         // existsUser.find(user => user.cpf === data.cpf);\n    //         console.log(`existsUser: ${existsUser.length ? true : false}`)\n    //         if (!existsUser.length) {\n    //             // const {  } = data\n    //             return await this.prisma.user.create({ data })\n    //         }\n\n    //         // existsUser.some(element => {\n    //         //     console.dir(element)\n    //         // })\n\n    //         return {\n    //             message: 'email, cpf, nickname devem ser únicos',\n    //             error: 'Chave única duplicada'\n    //         }\n    //     } catch (error) {\n    //         return error.message\n    //     }\n    // }\n\n    // public async sigin(email: string, hashedPassword: string) {\n    //     try {\n    //         const user = await this.getByEmail(email);\n    //         const isPasswordMatching = await bcrypt.compare(\n    //             hashedPassword,\n    //             user.secret\n    //         );\n    //         if (!isPasswordMatching) {\n    //             throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n    //         }\n    //         user.secret = undefined;\n    //         return user;\n    //     } catch (error) {\n    //         throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n    //     }\n    // }\n\n    // async update(params: {\n    //     data: UserUpdateInput;\n    //     where: UserWhereUniqueInput;\n    // }): Promise {\n    //     const { where, data } = params;\n    //     data.secret = await bcrypt.hash(data.secret, 10);\n    //     return this.prisma.user.update({\n    //         data,\n    //         where\n    //     });\n    // }\n\n    // async delete(where: UserWhereUniqueInput): Promise {\n    //     return this.prisma.user.delete({\n    //         where,\n    //     });\n    // }\n\n    // async getByEmail(email: string): Promise {\n    //     const getByEmail = await this.prisma.user.findOne({\n    //         where: { email },\n    //     })\n    //     return getByEmail\n    // }\n\n\n    // async getByUserWhereUniqueInput(unique: UserWhereUniqueInput, compareNullValues = false): Promise {\n    //     const { email, cpf, nickname } = unique\n    //     const select = 'SELECT * FROM public.\"User\"'\n\n    //     const andNotNicknameIsNull = compareNullValues ? 'AND NOT nickname ISNULL' : ''\n\n    //     const condition = `cpf = '${cpf}' OR email = '${email}' OR (nickname = '${nickname}' ${andNotNicknameIsNull})`\n    //     const getByUserWhereUniqueInput = await this.prisma.$queryRaw(`${select} WHERE ${condition};`)\n    //     console.log(`Query existsUser`)\n    //     console.dir(`${select} WHERE ${condition};`)\n\n    //     return getByUserWhereUniqueInput\n    // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAgencyModule\n\nAgencyModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAgencyModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nValidatorModule\n\nValidatorModule\n\nAppModule -->\n\nValidatorModule->AppModule\n\n\n\n\n\nAgencyService\n\nAgencyService\n\nAppModule -->\n\nAgencyService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AgencyService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AgencyModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            ValidatorModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { ConfigModule } from '@nestjs/config';\n\nimport configuration from './config/configuration';\nimport { PrismaService } from './prisma/prisma.service';\nimport { UserModule } from './user/user.module';\nimport { HealthController } from './health.controller';\nimport { ValidatorModule } from './utils/validator/validator.module';\nimport { AgencyService } from './agency/agency.service';\nimport { AgencyModule } from './agency/agency.module';\n\n@Module({\n    imports: [\n        UserModule,\n        TerminusModule,\n        ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configuration]\n        }),\n        ValidatorModule,\n        AgencyModule\n    ],\n    controllers: [HealthController],\n    providers: [PrismaService, AgencyService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                autenticar\n                            \n                            \n                                    Public\n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            autenticar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    autenticar(res, data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(res, data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Res, UseGuards } from '@nestjs/common'\nimport { UserService } from '../user/user.service'\n\nimport { User } from '@prisma/client'\nconst jwt = require('jsonwebtoken')\n\nconst bcrypt = require('bcrypt')\n\n@Controller('user')\nexport class AuthController {\n\n    constructor(\n        private userService: UserService,\n    ) { }\n\n\n    @Post('/signup')\n    public async signup(@Res() res, @Body() data): Promise {\n        // data.secret = bcrypt.hashSync(data.secret, 10);\n        const newUser = await this.userService.create(data)\n        console.log('newUser:')\n        console.dir(newUser)\n\n        if (newUser.hasOwnProperty('id')) return res.status(201).json({\n            id: newUser['id'],\n            fullname: newUser['fullname'],\n            email: newUser['email'],\n            cpf: newUser['cpf'],\n            role: newUser['role'],\n            datebirth: newUser['datebirth'],\n            nickname: newUser['nickname'],\n        })\n        return res.status(400).json(newUser)\n        // const userCreated = await this.userService.create(data)\n        // if\n        // return res.status(201).send({ id: userCreated.id, email: userCreated.email });\n    }\n\n\n    @Post('/signin')\n    public async autenticar(@Res() res, @Body() data): Promise {\n        console.dir(data)\n        if (data.email === '' || data.secret === '') {\n            return res.status(400).json({ auth: false, message: 'Os campos devem ser preenchidos corretamente' });\n        }\n\n        try {\n\n            const existsUser = await this.userService.getByEmail(data.email);\n            console.dir(existsUser)\n\n            if (existsUser?.email != null) {\n                const userLoggedIn = await bcrypt.compare(data.secret, existsUser.secret);\n                console.dir(userLoggedIn)\n                if (userLoggedIn) {\n                    const secret = process.env.SERVER_SECRET_TOKEN || 'Currículo→Único';\n                    const token = jwt.sign({ email: data.email, _id: data.id }, secret, { expiresIn: '2h' });\n\n                    console.log('\\nUsuario', data.email, 'acaba de fazer login no sistema');\n                    console.log(\"x-access-token:\", token, '\\n');\n\n                    res.status(200).json({\n                        auth: true,\n                        _id: data.id,\n                        email: data.email,\n                        expiresIn: '2h',\n                        token: token\n                    });\n\n                } else {\n                    console.log('Senha incorreta')\n                    res.status(401).json({ auth: false, message: 'Email ou senha não confere' });\n                }\n\n            } else {\n                console.log('Email não encontrado')\n                res.status(401).json({ auth: false, message: 'Email ou senha não confere' });\n            }\n\n            return data;\n\n        } catch (err) {\n            res.status(500).json({ auth: false, message: err });\n        }\n    }\n\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BadRequest.html":{"url":"interfaces/BadRequest.html","title":"interface - BadRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BadRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/badRequest.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        message\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BadRequest {\n    message?: string\n    error?: any\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                healthCheck\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            healthCheck\n                        \n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            status\n                        \n                        \n                    \n                \n            \n            \n                \nstatus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/health.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { server: any; up: boolean; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Dependencies, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { HealthCheckService, DNSHealthIndicator, HealthCheck } from '@nestjs/terminus';\n@Controller('health')\n@Dependencies(HealthCheckService, DNSHealthIndicator)\nexport class HealthController {\n    constructor(\n        private health,\n        private dns,\n    ) { }\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @HealthCheck()\n    healthCheck() {\n        const port = process.env.PORT || 3333\n        return this.health.check([\n            async () =>  await this.dns.pingCheck(process.env.npm_package_NAME, `http://localhost:${port}/api/v1/health/status`),\n            async () => this.dns.pingCheck('zeta-analise', `http://zeta08.primusweb.com.br:${3017}/api/v1/health`),\n        ])\n    }\n    \n    @Get('status')\n    @HttpCode(HttpStatus.OK)\n    status() {\n        return {\n            server: process.env.npm_package_NAME,\n            up: true\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onModuleDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n  \n  async onModuleInit() {\n    console.log('Prisma connected')\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    console.log('Prisma desconnected')\n    await this.$disconnect();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Server.html":{"url":"classes/Server.html","title":"class - Server","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Server\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bootstrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    bootstrap()\n                \n            \n\n\n            \n                \n                    Defined in src/server.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { UnlessMiddleware } from './middleware/router/unless.middleware';\nimport { TokenMiddleware } from './middleware/token/token.middleware';\n\nexport const globalPrefix = '/api/v1'\nconst unlessMiddleware = new UnlessMiddleware()\nconst tokenMiddleware = new TokenMiddleware()\n\ndeclare const module: any;\n\n\nexport class Server {\n\n    async bootstrap() {\n        const app = await NestFactory.create(AppModule);\n    \n        app.setGlobalPrefix(globalPrefix);\n    \n        app.use(unlessMiddleware.use(\n            tokenMiddleware.use,\n            `${globalPrefix}/user/signin`,\n            `${globalPrefix}/health/status`,\n        ))\n    \n        const server = await app.listen(process.env.PORT || 3333, '0.0.0.0', () => {\n            console.clear()\n            // console.dir(server)\n            console.log(`\\n${process.env.npm_package_NAME} is running in http://localhost:${server.address().port + globalPrefix}`)\n            console.log(process.env.npm_package_DESCRIPTION)\n            console.log(`${new Date().toLocaleDateString()} - ${new Date().toLocaleTimeString()}\\n`);\n        });\n    \n        if (module.hot) {\n            module.hot.accept();\n            module.hot.dispose(() => app.close());\n        }\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenMiddleware.html":{"url":"injectables/TokenMiddleware.html","title":"injectable - TokenMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TokenMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/token/token.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(req, res, next)\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/token/token.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, Next, Req, Res } from '@nestjs/common';\nconst jwt = require('jsonwebtoken')\n\nconst dataUTC = new Date().getUTCFullYear() + '/' + (new Date().getUTCMonth() + 1) + '/' + new Date().getUTCDate();\nconst horaUTC = new Date().getUTCHours() + ':' + new Date().getUTCMinutes() + ':' + new Date().getUTCSeconds() + ' UTC';\n@Injectable()\nexport class TokenMiddleware implements NestMiddleware {\n\n    use(@Req() req, @Res() res, @Next() next) {\n\n        const authorizedLog = logedIn => {\n            console.log('\\nAcesso permitido ao usuário', logedIn.email)\n            console.log(\"by temAcesso\")\n\n            console.log(\"\\n\")\n            console.log(\"request:\", req.path, \"→ Type:\", req.method);\n            console.log(\"in:\", req.headers.referer);\n            console.log(\"on:\", dataUTC, 'at', horaUTC);\n            console.log(\"by AuthMiddleware\\n\");\n        }\n\n\n        const hasAccess = logedIn => {\n\n            // TODO: Verificação de acesso aos recursos\n\n            if (logedIn) {\n                authorizedLog(logedIn)\n                return true\n            }\n            console.log('\\nAcesso negado em:', req.headers.referer)\n            console.log(\"request:\", req.path, \"→ Type:\", req.method);\n            console.log(\"by temAcesso\");\n            return false\n        }\n\n        const unauthorizedLog = () => {\n            console.log(\"\\nUnauthorized\");\n            console.log(\"request:\", req.path, \"→ Type:\", req.method);\n            console.log(\"in:\", req.headers.referer);\n            console.log(\"on:\", dataUTC, 'at', horaUTC);\n            console.log(\"by TokenMiddleware\\n\");\n        }\n\n        const token = req.headers[\"x-access-token\"];\n\n        if (!token) {\n            return res\n                .status(403)\n                .send({\n                    auth: false,\n                    message: 'Nenhum token fornecido',\n                    warning: 'Realize o login e tente novamente'\n                });\n        }\n\n        const secret = process.env.SERVER_SECRET_TOKEN || 'Currículo→Único';\n        jwt.verify(token, secret, (err, decoded) => {\n            if (err) {\n                if (err.message === 'jwt expired') {\n                    const tokenError = {\n                        name: err.name,\n                        message: 'Sua sessão expirou. Efetue o login novamente',\n                        expiredAt: err.expiredAt\n                    }\n                    unauthorizedLog()\n\n                    return res.status(401).send(tokenError)\n                }\n\n                unauthorizedLog()\n\n                return res.status(403).send({\n                    auth: false,\n                    message: \"Falha ao autenticar o token.\",\n                    warning: 'Token fornecido está incorreto'\n                });\n            }\n            // ! No momento, sempre vai retornar true, TODO à fazer em temAcesso\n            if (hasAccess(decoded))\n                next();\n            else\n                return res.status(403).json({\n                    auth: false,\n                    message: \"Você não tem acesso à este recurso.\"\n                })\n        });\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UnlessMiddleware.html":{"url":"injectables/UnlessMiddleware.html","title":"injectable - UnlessMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UnlessMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/router/unless.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(middleware, ...paths: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/router/unless.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    middleware\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paths\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     (req: any, res: any, next: any) => void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class UnlessMiddleware implements NestMiddleware {\n\n    use(middleware, ...paths) {\n        return (req, res, next) => {\n            const pathCheck = paths.some(path => path === req.path)\n            pathCheck ? next() : middleware(req, res, next)\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getMany\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMany(query)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(id: UserWhereUniqueInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(res, userData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@HttpCode(201)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userData\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Response, Get, Param, Post, Body, Put, Delete, HttpCode, Query } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User as UserModel, UserWhereUniqueInput } from '@prisma/client';\n\n@Controller('user')\nexport class UserController {\n    constructor(\n        private readonly userService: UserService,\n        // private readonly postService: PostService,\n    ) { }\n\n    @Post('/')\n    @HttpCode(201)\n    async signup(@Response() res, @Body() userData): Promise {\n        const newUser = await this.userService.create(userData)\n        if (newUser.hasOwnProperty('id')) return res.status(201).json(newUser)\n        return res.status(400).json(newUser)\n    }\n\n    @Get('/')\n    @HttpCode(200)\n    async getMany(@Query() query): Promise {\n        return this.userService.getMany(query)\n    }\n\n    @Get('/:id')\n    @HttpCode(200)\n    async getOne(@Param('id') id: UserWhereUniqueInput): Promise {\n        return this.userService.getOne(id)\n    }\n\n    @Delete('/:id')\n    @HttpCode(200)\n    async delete(@Param('id') id: string): Promise {\n        return this.userService.delete({ id: Number(id) });\n    }\n\n    @Put('/:id')\n    @HttpCode(200)\n    async update(@Body() data, @Param('id') id: string): Promise {\n        return this.userService.update({\n            data: { ...data },\n            where: { id: Number(id) },\n        });\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaService\n\nPrismaService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { PrismaService } from '../prisma/prisma.service';\n\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { UserValidator } from '@utils/validator/user.validate';\nimport { AuthController } from 'src/auth/auth.controller';\n\n@Module({\n    imports: [],\n    controllers: [\n        UserController,\n        AuthController\n    ],\n    providers: [\n        UserService,\n        PrismaService,\n        UserValidator,\n    ],\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getByUserWhereUniqueInput\n                            \n                            \n                                    Async\n                                getMany\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                    Public\n                                    Async\n                                sigin\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, utils: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utils\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: UserCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(where: UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByUserWhereUniqueInput\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByUserWhereUniqueInput(unique: UserWhereUniqueInput, compareNullValues)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    unique\n                                    \n                                            UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    compareNullValues\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMany(query?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(id)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            sigin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sigin(email: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PrismaService } from '@prisma/prisma.service';\nimport { BadRequest } from '@interfaces/badRequest.interface';\nimport {\n    UserUpdateInput, User, UserCreateInput, UserWhereUniqueInput,\n    ProfileCreateOneWithoutUserInput,\n    UserWhereInput,\n    UserOrderByInput,\n} from '@prisma/client';\n\nconst bcrypt = require('bcrypt');\n\n@Injectable()\nexport class UserService {\n    constructor(\n        private readonly prisma: PrismaService,\n        private readonly utils: PrismaService,\n    ) { }\n\n    async getOne(id): Promise {\n        return this.prisma.user.findOne({\n            where: {\n                id: Number(id)\n            },\n        });\n    }\n\n    async getMany(query?: {\n        skip?: string\n        take?: string\n        orderBy?: any\n    }): Promise {\n\n        const orderBy = query.orderBy ? query.orderBy.split(',') : []\n\n        return this.prisma.user.findMany({\n            skip: Number(query.skip) || 0,\n            take: Number(query.take) || 100,\n            orderBy: orderBy?.length ? { [orderBy[0]]: orderBy[1] } : {\n                id: 'asc'\n            }\n        });\n    }\n\n    async create(data: UserCreateInput): Promise {\n        try {\n            data.secret = await bcrypt.hash(data.secret, 10);\n            const existsUser = await this.getByUserWhereUniqueInput(data, true)\n            // existsUser.find(user => user.cpf === data.cpf);\n            console.log(`existsUser: ${existsUser.length ? true : false}`)\n            if (!existsUser.length) {\n                // const {  } = data\n                return await this.prisma.user.create({ data })\n            }\n\n            // existsUser.some(element => {\n            //     console.dir(element)\n            // })\n\n            return {\n                message: 'email, cpf, nickname devem ser únicos',\n                error: 'Chave única duplicada'\n            }\n        } catch (error) {\n            return error.message\n        }\n    }\n\n    public async sigin(email: string, hashedPassword: string) {\n        try {\n            const user = await this.getByEmail(email);\n            const isPasswordMatching = await bcrypt.compare(\n                hashedPassword,\n                user.secret\n            );\n            if (!isPasswordMatching) {\n                throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n            }\n            user.secret = undefined;\n            return user;\n        } catch (error) {\n            throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    async update(params: {\n        data: UserUpdateInput;\n        where: UserWhereUniqueInput;\n    }): Promise {\n        const { where, data } = params;\n        data.secret = await bcrypt.hash(data.secret, 10);\n        return this.prisma.user.update({\n            data,\n            where\n        });\n    }\n\n    async delete(where: UserWhereUniqueInput): Promise {\n        return this.prisma.user.delete({\n            where,\n        });\n    }\n\n    async getByEmail(email: string): Promise {\n        const getByEmail = await this.prisma.user.findOne({\n            where: { email },\n        })\n        return getByEmail\n    }\n\n\n    async getByUserWhereUniqueInput(unique: UserWhereUniqueInput, compareNullValues = false): Promise {\n        const { email, cpf, nickname } = unique\n        const select = 'SELECT * FROM public.\"User\"'\n\n        const andNotNicknameIsNull = compareNullValues ? 'AND NOT nickname ISNULL' : ''\n\n        const condition = `cpf = '${cpf}' OR email = '${email}' OR (nickname = '${nickname}' ${andNotNicknameIsNull})`\n        const getByUserWhereUniqueInput = await this.prisma.$queryRaw(`${select} WHERE ${condition};`)\n        console.log(`Query existsUser`)\n        console.dir(`${select} WHERE ${condition};`)\n\n        return getByUserWhereUniqueInput\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserValidator.html":{"url":"classes/UserValidator.html","title":"class - UserValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validator/user.validate.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserValidator {\n    // https://www.npmjs.com/package/validator.ts%20%20OR%20https://www.npmjs.com/package/validate\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ValidatorModule.html":{"url":"modules/ValidatorModule.html","title":"module - ValidatorModule","body":"\n                   \n\n\n\n\n    Modules\n    ValidatorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/utils/validator/validator.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserValidator } from './user.validate';\n\n@Module({\n    imports: [ ],\n    controllers: [ ],\n    providers: [\n        UserValidator\n    ],\n})\nexport class ValidatorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/agency/agency.controller.ts\n            \n            controller\n            AgencyController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/agency/agency.service.ts\n            \n            injectable\n            AgencyService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            variable\n            bcrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            variable\n            jwt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interfaces/badRequest.interface.ts\n            \n            interface\n            BadRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/router/unless.middleware.ts\n            \n            injectable\n            UnlessMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middleware/token/token.middleware.ts\n            \n            injectable\n            TokenMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middleware/token/token.middleware.ts\n            \n            variable\n            dataUTC\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/token/token.middleware.ts\n            \n            variable\n            horaUTC\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/token/token.middleware.ts\n            \n            variable\n            jwt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            class\n            Server\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            variable\n            globalPrefix\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            variable\n            tokenMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            variable\n            unlessMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            variable\n            bcrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/validator/user.validate.ts\n            \n            class\n            UserValidator\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/terminus : ^7.0.1\n        \n            @nestjsplus/redirect : ^1.0.0\n        \n            @prisma/client : ^2.7.1\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            cookie-parser : ^1.4.5\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n    const myRequest = new Request('./package.json');\n    fetch(myRequest)\n        .then(response => response.json())\n        .then(json => {\n            console.dir(json.description);\n            document.getElementById(\"description\").innerHTML = json.description;\n            document.getElementById(\"name\").innerHTML = json.name;\n        });\n\n\n\n\nCurrículo Único - NestJS + Prisma + Postgress\n\n\ntestesdadsad\n    \n\n\n\n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n      \n  \n   -->\n\n  \n      \n  \n  \n      \n  \n\n\n\n\n\n\nParticipants\n\n\n\n\n\n\n\n\n\n| Natan Cipriano\n\n\n\nGetting started\nTo install the dependencies\nyarnTo boot the server\nyarn start # to start in production mode\n#  OR\nyarn ts-dev # to start in development mode\nIf you don't have yarn installed:\nnpm install -g yarnPrisma:\nTo save changes to the database (./prisma/schema.prisma)\nyarn save\n# OR\nnpx prisma migrate save --name nameOfYourMigrate --experimentalTo apply changes\nyarn upTo generate the interfaces from the changes made\nyarn generateTo have access to a graphical interface of your database\nyarn studioShortcuts:\n# yarn save && yarn up && yarn generate\nyarn prisma\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2020 Natan Cipriano\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AgencyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ValidatorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AgencyModule\n\n\n\ncluster_AgencyModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAgencyService\n\nAgencyService\n\n\n\nAgencyModule\n\nAgencyModule\n\nAgencyModule -->\n\nAgencyService->AgencyModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAgencyService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAgencyModule -->\n\nPrismaService->AgencyModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\nAppModule -->\n\nAgencyModule->AppModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nValidatorModule\n\nValidatorModule\n\nAppModule -->\n\nValidatorModule->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bcrypt   (src/.../auth.controller.ts)\n                        \n                        \n                            bcrypt   (src/.../user.service.ts)\n                        \n                        \n                            dataUTC   (src/.../token.middleware.ts)\n                        \n                        \n                            globalPrefix   (src/.../server.ts)\n                        \n                        \n                            horaUTC   (src/.../token.middleware.ts)\n                        \n                        \n                            jwt   (src/.../auth.controller.ts)\n                        \n                        \n                            jwt   (src/.../token.middleware.ts)\n                        \n                        \n                            module   (src/.../server.ts)\n                        \n                        \n                            server   (src/.../main.ts)\n                        \n                        \n                            tokenMiddleware   (src/.../server.ts)\n                        \n                        \n                            unlessMiddleware   (src/.../server.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.controller.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            bcrypt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('bcrypt')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('jsonwebtoken')\n                        \n                    \n\n\n            \n        \n\n    src/user/user.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            bcrypt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('bcrypt')\n                        \n                    \n\n\n            \n        \n\n    src/middleware/token/token.middleware.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            dataUTC\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Date().getUTCFullYear() + '/' + (new Date().getUTCMonth() + 1) + '/' + new Date().getUTCDate()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            horaUTC\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Date().getUTCHours() + ':' + new Date().getUTCMinutes() + ':' + new Date().getUTCSeconds() + ' UTC'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('jsonwebtoken')\n                        \n                    \n\n\n            \n        \n\n    src/server.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            globalPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/api/v1'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            module\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tokenMiddleware\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new TokenMiddleware()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            unlessMiddleware\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new UnlessMiddleware()\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Server()\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
