generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Profile {
    id String @id @default(uuid())

    bio       String?
    pseudonym String?
    userid    Int     @unique
    User      User    @relation(fields: [userid], references: [id])

    createdat DateTime @default(now())
    updatedat DateTime @updatedAt
}

model User {
    id                Int    @id @default(autoincrement())
    authenticationkey String @default(uuid())
    securitykey       String @default(uuid())

    fullname         String
    secret           String
    avatar           String? @default("https://www.ecp.org.br/wp-content/uploads/2017/12/default-avatar-1.png")
    email            String  @unique
    cpf              String  @unique
    datebirth        String?
    nickname         String? @unique
    preferencialname String?
    active           Boolean @default(true)
    role             Role    @default(CANDIDATE)
    gender           Gender

    Address    Address[]
    Contact    Contact[]
    Curriculum Curriculum?
    Profile    Profile?

    createdat DateTime  @default(now())
    updatedat DateTime  @updatedAt
    Vacancy   Vacancy[]
}

model Address {
    id String @id @default(uuid())

    name       String?
    logradouro String?
    bairro     String?
    cidade     String?
    cep        String?
    state      String? @default("RS")

    userid Int
    User   User @relation(fields: [userid], references: [id])

    createdat DateTime @default(now())
    updatedat DateTime @updatedAt
}

model Contact {
    id String @id @default(uuid())

    userid Int
    talkto String? @default("me")
    phone  String?

    User User @relation(fields: [userid], references: [id])

    createdat DateTime @default(now())
    updatedat DateTime @updatedAt
}

model AcademicData {
    id String @id @default(uuid())

    //   curso
    //   turno

    Curriculum   Curriculum? @relation(fields: [curriculumId], references: [id])
    curriculumId String?

    createdat DateTime @default(now())
    updatedat DateTime @updatedAt
}

model Experiences {
    id String @id @default(uuid())

    description String?

    Curriculum   Curriculum? @relation(fields: [curriculumId], references: [id])
    curriculumId String?

    createdat DateTime @default(now())
    updatedat DateTime @updatedAt
}

model Curriculum {
    id String @id @default(uuid())

    professionalprofile String?
    intendedsalary      Float?


    userid       Int            @unique
    User         User           @relation(fields: [userid], references: [id])
    academicdata AcademicData[]
    experiences  Experiences[]

    createdat DateTime @default(now())
    updatedat DateTime @updatedAt
}

model Company {
    id String @id @default(uuid())

    name            String
    registrofederal String   @unique
    role            Role     @default(EMPLOYER)
    site            String?  @unique
    links           String[]
    labellinks      String[]
    active          Boolean  @default(true)

    createdat DateTime @default(now())
    updatedat DateTime @updatedAt
}

model Agency {
    id String @id @default(uuid())

    name            String
    registrofederal String   @unique
    role            Role     @default(VACANCYDISTRIBUTOR)
    site            String   @unique
    links           String[]
    labellinks      String[]
    active          Boolean  @default(true)

    createdat DateTime @default(now())
    updatedat DateTime @updatedAt
}

model Vacancy {
    codeVacancy Int @id @default(autoincrement())

    userid      Int
    user        User    @relation(fields: [userid], references: [id])
    // interested  User[]

    office      String
    logo        String?
    description String?
}

enum Gender {
    FEMININO
    MASCULINO
    OUTRO
}

enum Role {
    ADMIN
    CANDIDATE
    EMPLOYER
    VACANCYDISTRIBUTOR
}
