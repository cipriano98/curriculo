
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.12.1
 * Query Engine version: cf0680a1bfe8d5e743dc659cc7f08009f9587d58
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;





/**
 * Model Profile
 */

export type Profile = {
  id: string
  bio: string | null
  pseudonym: string | null
  userid: number
  createdat: Date
  updatedat: Date
}

/**
 * Model User
 */

export type User = {
  id: number
  authenticationkey: string
  securitykey: string
  fullname: string
  secret: string
  avatar: string | null
  email: string
  cpf: string
  datebirth: string | null
  nickname: string | null
  preferencialname: string | null
  active: boolean
  role: Role
  gender: Gender
  createdat: Date
  updatedat: Date
}

/**
 * Model Address
 */

export type Address = {
  id: string
  name: string | null
  logradouro: string | null
  bairro: string | null
  cidade: string | null
  cep: string | null
  state: string | null
  userid: number
  createdat: Date
  updatedat: Date
}

/**
 * Model Contact
 */

export type Contact = {
  id: string
  userid: number
  talkto: string | null
  phone: string | null
  talktotwo: string | null
  phonetwo: string | null
  createdat: Date
  updatedat: Date
}

/**
 * Model AcademicData
 */

export type AcademicData = {
  id: string
  curriculumId: string | null
  createdat: Date
  updatedat: Date
}

/**
 * Model Experiences
 */

export type Experiences = {
  id: string
  description: string | null
  curriculumId: string | null
  createdat: Date
  updatedat: Date
}

/**
 * Model Curriculum
 */

export type Curriculum = {
  id: string
  professionalprofile: string | null
  intendedsalary: number | null
  userid: number
  createdat: Date
  updatedat: Date
}

/**
 * Model Company
 */

export type Company = {
  id: string
  name: string
  registrofederal: string
  role: Role
  site: string | null
  links: string[]
  labellinks: string[]
  active: boolean
  createdat: Date
  updatedat: Date
}

/**
 * Model Agency
 */

export type Agency = {
  id: string
  name: string
  registrofederal: string
  role: Role
  site: string
  links: string[]
  labellinks: string[]
  active: boolean
  createdat: Date
  updatedat: Date
}

/**
 * Model Vacancy
 */

export type Vacancy = {
  codeVacancy: number
  avatar: string | null
  userid: number
  active: boolean | null
  name: string | null
  office: string | null
  logo: string | null
  description: string | null
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  ADMIN: 'ADMIN',
  CANDIDATE: 'CANDIDATE',
  EMPLOYER: 'EMPLOYER',
  VACANCYDISTRIBUTOR: 'VACANCYDISTRIBUTOR'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Gender: {
  FEMININO: 'FEMININO',
  MASCULINO: 'MASCULINO',
  OUTRO: 'OUTRO'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Profiles
 * const profiles = await prisma.profile.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Profiles
   * const profiles = await prisma.profile.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate;

  /**
   * `prisma.academicData`: Exposes CRUD operations for the **AcademicData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AcademicData
    * const academicData = await prisma.academicData.findMany()
    * ```
    */
  get academicData(): Prisma.AcademicDataDelegate;

  /**
   * `prisma.experiences`: Exposes CRUD operations for the **Experiences** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Experiences
    * const experiences = await prisma.experiences.findMany()
    * ```
    */
  get experiences(): Prisma.ExperiencesDelegate;

  /**
   * `prisma.curriculum`: Exposes CRUD operations for the **Curriculum** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Curricula
    * const curricula = await prisma.curriculum.findMany()
    * ```
    */
  get curriculum(): Prisma.CurriculumDelegate;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate;

  /**
   * `prisma.agency`: Exposes CRUD operations for the **Agency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agencies
    * const agencies = await prisma.agency.findMany()
    * ```
    */
  get agency(): Prisma.AgencyDelegate;

  /**
   * `prisma.vacancy`: Exposes CRUD operations for the **Vacancy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vacancies
    * const vacancies = await prisma.vacancy.findMany()
    * ```
    */
  get vacancy(): Prisma.VacancyDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.12.1
   * Query Engine version: cf0680a1bfe8d5e743dc659cc7f08009f9587d58
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Profile: 'Profile',
    User: 'User',
    Address: 'Address',
    Contact: 'Contact',
    AcademicData: 'AcademicData',
    Experiences: 'Experiences',
    Curriculum: 'Curriculum',
    Company: 'Company',
    Agency: 'Agency',
    Vacancy: 'Vacancy'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: string
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Profile
   */


  export type AggregateProfile = {
    count: number
    avg: ProfileAvgAggregateOutputType | null
    sum: ProfileSumAggregateOutputType | null
    min: ProfileMinAggregateOutputType | null
    max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    userid: number
  }

  export type ProfileSumAggregateOutputType = {
    userid: number
  }

  export type ProfileMinAggregateOutputType = {
    userid: number
  }

  export type ProfileMaxAggregateOutputType = {
    userid: number
  }


  export type ProfileAvgAggregateInputType = {
    userid?: true
  }

  export type ProfileSumAggregateInputType = {
    userid?: true
  }

  export type ProfileMinAggregateInputType = {
    userid?: true
  }

  export type ProfileMaxAggregateInputType = {
    userid?: true
  }

  export type AggregateProfileArgs = {
    where?: ProfileWhereInput
    orderBy?: XOR<Enumerable<ProfileOrderByInput>, ProfileOrderByInput>
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProfileDistinctFieldEnum>
    count?: true
    avg?: ProfileAvgAggregateInputType
    sum?: ProfileSumAggregateInputType
    min?: ProfileMinAggregateInputType
    max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends AggregateProfileArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetProfileAggregateScalarType<T[P]>
  }

  export type GetProfileAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ProfileAvgAggregateOutputType ? ProfileAvgAggregateOutputType[P] : never
  }
    
    

  export type ProfileSelect = {
    id?: boolean
    bio?: boolean
    pseudonym?: boolean
    userid?: boolean
    User?: boolean | UserArgs
    createdat?: boolean
    updatedat?: boolean
  }

  export type ProfileInclude = {
    User?: boolean | UserArgs
  }

  export type ProfileGetPayload<
    S extends boolean | null | undefined | ProfileArgs,
    U = keyof S
      > = S extends true
        ? Profile
    : S extends undefined
    ? never
    : S extends ProfileArgs | FindManyProfileArgs
    ?'include' extends U
    ? Profile  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Profile ?Profile [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Profile
  : Profile


  export interface ProfileDelegate {
    /**
     * Find zero or one Profile that matches the filter.
     * @param {FindUniqueProfileArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueProfileArgs>(
      args: Subset<T, FindUniqueProfileArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>
    /**
     * Find the first Profile that matches the filter.
     * @param {FindFirstProfileArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstProfileArgs>(
      args?: Subset<T, FindFirstProfileArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>
    /**
     * Find zero or more Profiles that matches the filter.
     * @param {FindManyProfileArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyProfileArgs>(
      args?: Subset<T, FindManyProfileArgs>
    ): CheckSelect<T, Promise<Array<Profile>>, Promise<Array<ProfileGetPayload<T>>>>
    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: Subset<T, ProfileCreateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: Subset<T, ProfileDeleteArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: Subset<T, ProfileUpdateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args: Subset<T, ProfileDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Profiles.
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: Subset<T, ProfileUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: Subset<T, ProfileUpsertArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
    /**
     * Find zero or one Profile that matches the filter.
     * @param {FindUniqueProfileArgs} args - Arguments to find a Profile
     * @deprecated This will be deprecated please use prisma.profile.findUnique
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueProfileArgs>(
      args: Subset<T, FindUniqueProfileArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyProfileArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateProfileArgs>(args: Subset<T, AggregateProfileArgs>): Promise<GetProfileAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Profile findUnique
   */
  export type FindUniqueProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: XOR<ProfileSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ProfileInclude, null>
    /**
     * Filter, which Profile to fetch.
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findFirst
   */
  export type FindFirstProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: XOR<ProfileSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ProfileInclude, null>
    /**
     * Filter, which Profile to fetch.
    **/
    where?: ProfileWhereInput
    orderBy?: XOR<Enumerable<ProfileOrderByInput>, ProfileOrderByInput>
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProfileDistinctFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type FindManyProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: XOR<ProfileSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ProfileInclude, null>
    /**
     * Filter, which Profiles to fetch.
    **/
    where?: ProfileWhereInput
    /**
     * Determine the order of the Profiles to fetch.
    **/
    orderBy?: XOR<Enumerable<ProfileOrderByInput>, ProfileOrderByInput>
    /**
     * Sets the position for listing Profiles.
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * The number of Profiles to fetch. If negative number, it will take Profiles before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Profiles.
    **/
    skip?: number
    distinct?: Enumerable<ProfileDistinctFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: XOR<ProfileSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ProfileInclude, null>
    /**
     * The data needed to create a Profile.
    **/
    data: ProfileCreateInput
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: XOR<ProfileSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ProfileInclude, null>
    /**
     * The data needed to update a Profile.
    **/
    data: ProfileUpdateInput
    /**
     * Choose, which Profile to update.
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    data: ProfileUpdateManyMutationInput
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: XOR<ProfileSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ProfileInclude, null>
    /**
     * The filter to search for the Profile to update in case it exists.
    **/
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
    **/
    create: ProfileCreateInput
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
    **/
    update: ProfileUpdateInput
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: XOR<ProfileSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ProfileInclude, null>
    /**
     * Filter which Profile to delete.
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: XOR<ProfileSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ProfileInclude, null>
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    count: number
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
  }

  export type UserSumAggregateOutputType = {
    id: number
  }

  export type UserMinAggregateOutputType = {
    id: number
  }

  export type UserMaxAggregateOutputType = {
    id: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
  }

  export type AggregateUserArgs = {
    where?: UserWhereInput
    orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserDistinctFieldEnum>
    count?: true
    avg?: UserAvgAggregateInputType
    sum?: UserSumAggregateInputType
    min?: UserMinAggregateInputType
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends AggregateUserArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
  }

  export type GetUserAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
  }
    
    

  export type UserSelect = {
    id?: boolean
    authenticationkey?: boolean
    securitykey?: boolean
    fullname?: boolean
    secret?: boolean
    avatar?: boolean
    email?: boolean
    cpf?: boolean
    datebirth?: boolean
    nickname?: boolean
    preferencialname?: boolean
    active?: boolean
    role?: boolean
    gender?: boolean
    Address?: boolean | AddressArgs
    Contact?: boolean | ContactArgs
    Curriculum?: boolean | CurriculumArgs
    Profile?: boolean | ProfileArgs
    Vacancy?: boolean | FindManyVacancyArgs
    createdat?: boolean
    updatedat?: boolean
  }

  export type UserInclude = {
    Address?: boolean | AddressArgs
    Contact?: boolean | ContactArgs
    Curriculum?: boolean | CurriculumArgs
    Profile?: boolean | ProfileArgs
    Vacancy?: boolean | FindManyVacancyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | FindManyUserArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Address'
        ? AddressGetPayload<S['include'][P]> | null :
        P extends 'Contact'
        ? ContactGetPayload<S['include'][P]> | null :
        P extends 'Curriculum'
        ? CurriculumGetPayload<S['include'][P]> | null :
        P extends 'Profile'
        ? ProfileGetPayload<S['include'][P]> | null :
        P extends 'Vacancy'
        ? Array < VacancyGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'Address'
        ? AddressGetPayload<S['select'][P]> | null :
        P extends 'Contact'
        ? ContactGetPayload<S['select'][P]> | null :
        P extends 'Curriculum'
        ? CurriculumGetPayload<S['select'][P]> | null :
        P extends 'Profile'
        ? ProfileGetPayload<S['select'][P]> | null :
        P extends 'Vacancy'
        ? Array < VacancyGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  export interface UserDelegate {
    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
    /**
     * Find the first User that matches the filter.
     * @param {FindFirstUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstUserArgs>(
      args?: Subset<T, FindFirstUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
    /**
     * Find zero or more Users that matches the filter.
     * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyUserArgs>(
      args?: Subset<T, FindManyUserArgs>
    ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: Subset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: Subset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: Subset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args: Subset<T, UserDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Users.
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: Subset<T, UserUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: Subset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @deprecated This will be deprecated please use prisma.user.findUnique
     * @example
     * // Get one User
     * const user = await prisma.user.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Address<T extends AddressArgs = {}>(args?: Subset<T, AddressArgs>): CheckSelect<T, Prisma__AddressClient<Address | null>, Prisma__AddressClient<AddressGetPayload<T> | null>>;

    Contact<T extends ContactArgs = {}>(args?: Subset<T, ContactArgs>): CheckSelect<T, Prisma__ContactClient<Contact | null>, Prisma__ContactClient<ContactGetPayload<T> | null>>;

    Curriculum<T extends CurriculumArgs = {}>(args?: Subset<T, CurriculumArgs>): CheckSelect<T, Prisma__CurriculumClient<Curriculum | null>, Prisma__CurriculumClient<CurriculumGetPayload<T> | null>>;

    Profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>;

    Vacancy<T extends FindManyVacancyArgs = {}>(args?: Subset<T, FindManyVacancyArgs>): CheckSelect<T, Promise<Array<Vacancy>>, Promise<Array<VacancyGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type FindUniqueUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type FindFirstUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserDistinctFieldEnum>
  }


  /**
   * User findMany
   */
  export type FindManyUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * Determine the order of the Users to fetch.
    **/
    orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
    /**
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserDistinctFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * The data needed to create a User.
    **/
    data: UserCreateInput
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * The data needed to update a User.
    **/
    data: UserUpdateInput
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: UserUpdateManyMutationInput
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: UserCreateInput
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: UserUpdateInput
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
  }



  /**
   * Model Address
   */


  export type AggregateAddress = {
    count: number
    avg: AddressAvgAggregateOutputType | null
    sum: AddressSumAggregateOutputType | null
    min: AddressMinAggregateOutputType | null
    max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    userid: number
  }

  export type AddressSumAggregateOutputType = {
    userid: number
  }

  export type AddressMinAggregateOutputType = {
    userid: number
  }

  export type AddressMaxAggregateOutputType = {
    userid: number
  }


  export type AddressAvgAggregateInputType = {
    userid?: true
  }

  export type AddressSumAggregateInputType = {
    userid?: true
  }

  export type AddressMinAggregateInputType = {
    userid?: true
  }

  export type AddressMaxAggregateInputType = {
    userid?: true
  }

  export type AggregateAddressArgs = {
    where?: AddressWhereInput
    orderBy?: XOR<Enumerable<AddressOrderByInput>, AddressOrderByInput>
    cursor?: AddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AddressDistinctFieldEnum>
    count?: true
    avg?: AddressAvgAggregateInputType
    sum?: AddressSumAggregateInputType
    min?: AddressMinAggregateInputType
    max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AggregateAddressArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetAddressAggregateScalarType<T[P]>
  }

  export type GetAddressAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof AddressAvgAggregateOutputType ? AddressAvgAggregateOutputType[P] : never
  }
    
    

  export type AddressSelect = {
    id?: boolean
    name?: boolean
    logradouro?: boolean
    bairro?: boolean
    cidade?: boolean
    cep?: boolean
    state?: boolean
    userid?: boolean
    User?: boolean | UserArgs
    createdat?: boolean
    updatedat?: boolean
  }

  export type AddressInclude = {
    User?: boolean | UserArgs
  }

  export type AddressGetPayload<
    S extends boolean | null | undefined | AddressArgs,
    U = keyof S
      > = S extends true
        ? Address
    : S extends undefined
    ? never
    : S extends AddressArgs | FindManyAddressArgs
    ?'include' extends U
    ? Address  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Address ?Address [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Address
  : Address


  export interface AddressDelegate {
    /**
     * Find zero or one Address that matches the filter.
     * @param {FindUniqueAddressArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueAddressArgs>(
      args: Subset<T, FindUniqueAddressArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address | null>, Prisma__AddressClient<AddressGetPayload<T> | null>>
    /**
     * Find the first Address that matches the filter.
     * @param {FindFirstAddressArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstAddressArgs>(
      args?: Subset<T, FindFirstAddressArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address | null>, Prisma__AddressClient<AddressGetPayload<T> | null>>
    /**
     * Find zero or more Addresses that matches the filter.
     * @param {FindManyAddressArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyAddressArgs>(
      args?: Subset<T, FindManyAddressArgs>
    ): CheckSelect<T, Promise<Array<Address>>, Promise<Array<AddressGetPayload<T>>>>
    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends AddressCreateArgs>(
      args: Subset<T, AddressCreateArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>
    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends AddressDeleteArgs>(
      args: Subset<T, AddressDeleteArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>
    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AddressUpdateArgs>(
      args: Subset<T, AddressUpdateArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>
    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AddressDeleteManyArgs>(
      args: Subset<T, AddressDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Addresses.
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AddressUpdateManyArgs>(
      args: Subset<T, AddressUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends AddressUpsertArgs>(
      args: Subset<T, AddressUpsertArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>
    /**
     * Find zero or one Address that matches the filter.
     * @param {FindUniqueAddressArgs} args - Arguments to find a Address
     * @deprecated This will be deprecated please use prisma.address.findUnique
     * @example
     * // Get one Address
     * const address = await prisma.address.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueAddressArgs>(
      args: Subset<T, FindUniqueAddressArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address | null>, Prisma__AddressClient<AddressGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyAddressArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateAddressArgs>(args: Subset<T, AggregateAddressArgs>): Promise<GetAddressAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AddressClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Address findUnique
   */
  export type FindUniqueAddressArgs = {
    /**
     * Select specific fields to fetch from the Address
    **/
    select?: XOR<AddressSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AddressInclude, null>
    /**
     * Filter, which Address to fetch.
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address findFirst
   */
  export type FindFirstAddressArgs = {
    /**
     * Select specific fields to fetch from the Address
    **/
    select?: XOR<AddressSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AddressInclude, null>
    /**
     * Filter, which Address to fetch.
    **/
    where?: AddressWhereInput
    orderBy?: XOR<Enumerable<AddressOrderByInput>, AddressOrderByInput>
    cursor?: AddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AddressDistinctFieldEnum>
  }


  /**
   * Address findMany
   */
  export type FindManyAddressArgs = {
    /**
     * Select specific fields to fetch from the Address
    **/
    select?: XOR<AddressSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AddressInclude, null>
    /**
     * Filter, which Addresses to fetch.
    **/
    where?: AddressWhereInput
    /**
     * Determine the order of the Addresses to fetch.
    **/
    orderBy?: XOR<Enumerable<AddressOrderByInput>, AddressOrderByInput>
    /**
     * Sets the position for listing Addresses.
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * The number of Addresses to fetch. If negative number, it will take Addresses before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Addresses.
    **/
    skip?: number
    distinct?: Enumerable<AddressDistinctFieldEnum>
  }


  /**
   * Address create
   */
  export type AddressCreateArgs = {
    /**
     * Select specific fields to fetch from the Address
    **/
    select?: XOR<AddressSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AddressInclude, null>
    /**
     * The data needed to create a Address.
    **/
    data: AddressCreateInput
  }


  /**
   * Address update
   */
  export type AddressUpdateArgs = {
    /**
     * Select specific fields to fetch from the Address
    **/
    select?: XOR<AddressSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AddressInclude, null>
    /**
     * The data needed to update a Address.
    **/
    data: AddressUpdateInput
    /**
     * Choose, which Address to update.
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs = {
    data: AddressUpdateManyMutationInput
    where?: AddressWhereInput
  }


  /**
   * Address upsert
   */
  export type AddressUpsertArgs = {
    /**
     * Select specific fields to fetch from the Address
    **/
    select?: XOR<AddressSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AddressInclude, null>
    /**
     * The filter to search for the Address to update in case it exists.
    **/
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
    **/
    create: AddressCreateInput
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
    **/
    update: AddressUpdateInput
  }


  /**
   * Address delete
   */
  export type AddressDeleteArgs = {
    /**
     * Select specific fields to fetch from the Address
    **/
    select?: XOR<AddressSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AddressInclude, null>
    /**
     * Filter which Address to delete.
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs = {
    where?: AddressWhereInput
  }


  /**
   * Address without action
   */
  export type AddressArgs = {
    /**
     * Select specific fields to fetch from the Address
    **/
    select?: XOR<AddressSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AddressInclude, null>
  }



  /**
   * Model Contact
   */


  export type AggregateContact = {
    count: number
    avg: ContactAvgAggregateOutputType | null
    sum: ContactSumAggregateOutputType | null
    min: ContactMinAggregateOutputType | null
    max: ContactMaxAggregateOutputType | null
  }

  export type ContactAvgAggregateOutputType = {
    userid: number
  }

  export type ContactSumAggregateOutputType = {
    userid: number
  }

  export type ContactMinAggregateOutputType = {
    userid: number
  }

  export type ContactMaxAggregateOutputType = {
    userid: number
  }


  export type ContactAvgAggregateInputType = {
    userid?: true
  }

  export type ContactSumAggregateInputType = {
    userid?: true
  }

  export type ContactMinAggregateInputType = {
    userid?: true
  }

  export type ContactMaxAggregateInputType = {
    userid?: true
  }

  export type AggregateContactArgs = {
    where?: ContactWhereInput
    orderBy?: XOR<Enumerable<ContactOrderByInput>, ContactOrderByInput>
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ContactDistinctFieldEnum>
    count?: true
    avg?: ContactAvgAggregateInputType
    sum?: ContactSumAggregateInputType
    min?: ContactMinAggregateInputType
    max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends AggregateContactArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetContactAggregateScalarType<T[P]>
  }

  export type GetContactAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ContactAvgAggregateOutputType ? ContactAvgAggregateOutputType[P] : never
  }
    
    

  export type ContactSelect = {
    id?: boolean
    userid?: boolean
    talkto?: boolean
    phone?: boolean
    talktotwo?: boolean
    phonetwo?: boolean
    User?: boolean | UserArgs
    createdat?: boolean
    updatedat?: boolean
  }

  export type ContactInclude = {
    User?: boolean | UserArgs
  }

  export type ContactGetPayload<
    S extends boolean | null | undefined | ContactArgs,
    U = keyof S
      > = S extends true
        ? Contact
    : S extends undefined
    ? never
    : S extends ContactArgs | FindManyContactArgs
    ?'include' extends U
    ? Contact  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Contact ?Contact [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Contact
  : Contact


  export interface ContactDelegate {
    /**
     * Find zero or one Contact that matches the filter.
     * @param {FindUniqueContactArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueContactArgs>(
      args: Subset<T, FindUniqueContactArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact | null>, Prisma__ContactClient<ContactGetPayload<T> | null>>
    /**
     * Find the first Contact that matches the filter.
     * @param {FindFirstContactArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstContactArgs>(
      args?: Subset<T, FindFirstContactArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact | null>, Prisma__ContactClient<ContactGetPayload<T> | null>>
    /**
     * Find zero or more Contacts that matches the filter.
     * @param {FindManyContactArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyContactArgs>(
      args?: Subset<T, FindManyContactArgs>
    ): CheckSelect<T, Promise<Array<Contact>>, Promise<Array<ContactGetPayload<T>>>>
    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
    **/
    create<T extends ContactCreateArgs>(
      args: Subset<T, ContactCreateArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>>
    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
    **/
    delete<T extends ContactDeleteArgs>(
      args: Subset<T, ContactDeleteArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>>
    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContactUpdateArgs>(
      args: Subset<T, ContactUpdateArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>>
    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContactDeleteManyArgs>(
      args: Subset<T, ContactDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Contacts.
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContactUpdateManyArgs>(
      args: Subset<T, ContactUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
    **/
    upsert<T extends ContactUpsertArgs>(
      args: Subset<T, ContactUpsertArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>>
    /**
     * Find zero or one Contact that matches the filter.
     * @param {FindUniqueContactArgs} args - Arguments to find a Contact
     * @deprecated This will be deprecated please use prisma.contact.findUnique
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueContactArgs>(
      args: Subset<T, FindUniqueContactArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact | null>, Prisma__ContactClient<ContactGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyContactArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateContactArgs>(args: Subset<T, AggregateContactArgs>): Promise<GetContactAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContactClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Contact findUnique
   */
  export type FindUniqueContactArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: XOR<ContactSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ContactInclude, null>
    /**
     * Filter, which Contact to fetch.
    **/
    where: ContactWhereUniqueInput
  }


  /**
   * Contact findFirst
   */
  export type FindFirstContactArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: XOR<ContactSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ContactInclude, null>
    /**
     * Filter, which Contact to fetch.
    **/
    where?: ContactWhereInput
    orderBy?: XOR<Enumerable<ContactOrderByInput>, ContactOrderByInput>
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ContactDistinctFieldEnum>
  }


  /**
   * Contact findMany
   */
  export type FindManyContactArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: XOR<ContactSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ContactInclude, null>
    /**
     * Filter, which Contacts to fetch.
    **/
    where?: ContactWhereInput
    /**
     * Determine the order of the Contacts to fetch.
    **/
    orderBy?: XOR<Enumerable<ContactOrderByInput>, ContactOrderByInput>
    /**
     * Sets the position for listing Contacts.
    **/
    cursor?: ContactWhereUniqueInput
    /**
     * The number of Contacts to fetch. If negative number, it will take Contacts before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Contacts.
    **/
    skip?: number
    distinct?: Enumerable<ContactDistinctFieldEnum>
  }


  /**
   * Contact create
   */
  export type ContactCreateArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: XOR<ContactSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ContactInclude, null>
    /**
     * The data needed to create a Contact.
    **/
    data: ContactCreateInput
  }


  /**
   * Contact update
   */
  export type ContactUpdateArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: XOR<ContactSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ContactInclude, null>
    /**
     * The data needed to update a Contact.
    **/
    data: ContactUpdateInput
    /**
     * Choose, which Contact to update.
    **/
    where: ContactWhereUniqueInput
  }


  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs = {
    data: ContactUpdateManyMutationInput
    where?: ContactWhereInput
  }


  /**
   * Contact upsert
   */
  export type ContactUpsertArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: XOR<ContactSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ContactInclude, null>
    /**
     * The filter to search for the Contact to update in case it exists.
    **/
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
    **/
    create: ContactCreateInput
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
    **/
    update: ContactUpdateInput
  }


  /**
   * Contact delete
   */
  export type ContactDeleteArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: XOR<ContactSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ContactInclude, null>
    /**
     * Filter which Contact to delete.
    **/
    where: ContactWhereUniqueInput
  }


  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs = {
    where?: ContactWhereInput
  }


  /**
   * Contact without action
   */
  export type ContactArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: XOR<ContactSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ContactInclude, null>
  }



  /**
   * Model AcademicData
   */


  export type AggregateAcademicData = {
    count: number
  }



  export type AggregateAcademicDataArgs = {
    where?: AcademicDataWhereInput
    orderBy?: XOR<Enumerable<AcademicDataOrderByInput>, AcademicDataOrderByInput>
    cursor?: AcademicDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AcademicDataDistinctFieldEnum>
    count?: true
  }

  export type GetAcademicDataAggregateType<T extends AggregateAcademicDataArgs> = {
    [P in keyof T]: P extends 'count' ? number : never
  }


    
    

  export type AcademicDataSelect = {
    id?: boolean
    Curriculum?: boolean | CurriculumArgs
    curriculumId?: boolean
    createdat?: boolean
    updatedat?: boolean
  }

  export type AcademicDataInclude = {
    Curriculum?: boolean | CurriculumArgs
  }

  export type AcademicDataGetPayload<
    S extends boolean | null | undefined | AcademicDataArgs,
    U = keyof S
      > = S extends true
        ? AcademicData
    : S extends undefined
    ? never
    : S extends AcademicDataArgs | FindManyAcademicDataArgs
    ?'include' extends U
    ? AcademicData  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Curriculum'
        ? CurriculumGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof AcademicData ?AcademicData [P]
  : 
          P extends 'Curriculum'
        ? CurriculumGetPayload<S['select'][P]> | null : never
  } 
    : AcademicData
  : AcademicData


  export interface AcademicDataDelegate {
    /**
     * Find zero or one AcademicData that matches the filter.
     * @param {FindUniqueAcademicDataArgs} args - Arguments to find a AcademicData
     * @example
     * // Get one AcademicData
     * const academicData = await prisma.academicData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueAcademicDataArgs>(
      args: Subset<T, FindUniqueAcademicDataArgs>
    ): CheckSelect<T, Prisma__AcademicDataClient<AcademicData | null>, Prisma__AcademicDataClient<AcademicDataGetPayload<T> | null>>
    /**
     * Find the first AcademicData that matches the filter.
     * @param {FindFirstAcademicDataArgs} args - Arguments to find a AcademicData
     * @example
     * // Get one AcademicData
     * const academicData = await prisma.academicData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstAcademicDataArgs>(
      args?: Subset<T, FindFirstAcademicDataArgs>
    ): CheckSelect<T, Prisma__AcademicDataClient<AcademicData | null>, Prisma__AcademicDataClient<AcademicDataGetPayload<T> | null>>
    /**
     * Find zero or more AcademicData that matches the filter.
     * @param {FindManyAcademicDataArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AcademicData
     * const academicData = await prisma.academicData.findMany()
     * 
     * // Get first 10 AcademicData
     * const academicData = await prisma.academicData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const academicDataWithIdOnly = await prisma.academicData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyAcademicDataArgs>(
      args?: Subset<T, FindManyAcademicDataArgs>
    ): CheckSelect<T, Promise<Array<AcademicData>>, Promise<Array<AcademicDataGetPayload<T>>>>
    /**
     * Create a AcademicData.
     * @param {AcademicDataCreateArgs} args - Arguments to create a AcademicData.
     * @example
     * // Create one AcademicData
     * const AcademicData = await prisma.academicData.create({
     *   data: {
     *     // ... data to create a AcademicData
     *   }
     * })
     * 
    **/
    create<T extends AcademicDataCreateArgs>(
      args: Subset<T, AcademicDataCreateArgs>
    ): CheckSelect<T, Prisma__AcademicDataClient<AcademicData>, Prisma__AcademicDataClient<AcademicDataGetPayload<T>>>
    /**
     * Delete a AcademicData.
     * @param {AcademicDataDeleteArgs} args - Arguments to delete one AcademicData.
     * @example
     * // Delete one AcademicData
     * const AcademicData = await prisma.academicData.delete({
     *   where: {
     *     // ... filter to delete one AcademicData
     *   }
     * })
     * 
    **/
    delete<T extends AcademicDataDeleteArgs>(
      args: Subset<T, AcademicDataDeleteArgs>
    ): CheckSelect<T, Prisma__AcademicDataClient<AcademicData>, Prisma__AcademicDataClient<AcademicDataGetPayload<T>>>
    /**
     * Update one AcademicData.
     * @param {AcademicDataUpdateArgs} args - Arguments to update one AcademicData.
     * @example
     * // Update one AcademicData
     * const academicData = await prisma.academicData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AcademicDataUpdateArgs>(
      args: Subset<T, AcademicDataUpdateArgs>
    ): CheckSelect<T, Prisma__AcademicDataClient<AcademicData>, Prisma__AcademicDataClient<AcademicDataGetPayload<T>>>
    /**
     * Delete zero or more AcademicData.
     * @param {AcademicDataDeleteManyArgs} args - Arguments to filter AcademicData to delete.
     * @example
     * // Delete a few AcademicData
     * const { count } = await prisma.academicData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AcademicDataDeleteManyArgs>(
      args: Subset<T, AcademicDataDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more AcademicData.
     * @param {AcademicDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AcademicData
     * const academicData = await prisma.academicData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AcademicDataUpdateManyArgs>(
      args: Subset<T, AcademicDataUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one AcademicData.
     * @param {AcademicDataUpsertArgs} args - Arguments to update or create a AcademicData.
     * @example
     * // Update or create a AcademicData
     * const academicData = await prisma.academicData.upsert({
     *   create: {
     *     // ... data to create a AcademicData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AcademicData we want to update
     *   }
     * })
    **/
    upsert<T extends AcademicDataUpsertArgs>(
      args: Subset<T, AcademicDataUpsertArgs>
    ): CheckSelect<T, Prisma__AcademicDataClient<AcademicData>, Prisma__AcademicDataClient<AcademicDataGetPayload<T>>>
    /**
     * Find zero or one AcademicData that matches the filter.
     * @param {FindUniqueAcademicDataArgs} args - Arguments to find a AcademicData
     * @deprecated This will be deprecated please use prisma.academicData.findUnique
     * @example
     * // Get one AcademicData
     * const academicData = await prisma.academicData.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueAcademicDataArgs>(
      args: Subset<T, FindUniqueAcademicDataArgs>
    ): CheckSelect<T, Prisma__AcademicDataClient<AcademicData | null>, Prisma__AcademicDataClient<AcademicDataGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyAcademicDataArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateAcademicDataArgs>(args: Subset<T, AggregateAcademicDataArgs>): Promise<GetAcademicDataAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for AcademicData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AcademicDataClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Curriculum<T extends CurriculumArgs = {}>(args?: Subset<T, CurriculumArgs>): CheckSelect<T, Prisma__CurriculumClient<Curriculum | null>, Prisma__CurriculumClient<CurriculumGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * AcademicData findUnique
   */
  export type FindUniqueAcademicDataArgs = {
    /**
     * Select specific fields to fetch from the AcademicData
    **/
    select?: XOR<AcademicDataSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AcademicDataInclude, null>
    /**
     * Filter, which AcademicData to fetch.
    **/
    where: AcademicDataWhereUniqueInput
  }


  /**
   * AcademicData findFirst
   */
  export type FindFirstAcademicDataArgs = {
    /**
     * Select specific fields to fetch from the AcademicData
    **/
    select?: XOR<AcademicDataSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AcademicDataInclude, null>
    /**
     * Filter, which AcademicData to fetch.
    **/
    where?: AcademicDataWhereInput
    orderBy?: XOR<Enumerable<AcademicDataOrderByInput>, AcademicDataOrderByInput>
    cursor?: AcademicDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AcademicDataDistinctFieldEnum>
  }


  /**
   * AcademicData findMany
   */
  export type FindManyAcademicDataArgs = {
    /**
     * Select specific fields to fetch from the AcademicData
    **/
    select?: XOR<AcademicDataSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AcademicDataInclude, null>
    /**
     * Filter, which AcademicData to fetch.
    **/
    where?: AcademicDataWhereInput
    /**
     * Determine the order of the AcademicData to fetch.
    **/
    orderBy?: XOR<Enumerable<AcademicDataOrderByInput>, AcademicDataOrderByInput>
    /**
     * Sets the position for listing AcademicData.
    **/
    cursor?: AcademicDataWhereUniqueInput
    /**
     * The number of AcademicData to fetch. If negative number, it will take AcademicData before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` AcademicData.
    **/
    skip?: number
    distinct?: Enumerable<AcademicDataDistinctFieldEnum>
  }


  /**
   * AcademicData create
   */
  export type AcademicDataCreateArgs = {
    /**
     * Select specific fields to fetch from the AcademicData
    **/
    select?: XOR<AcademicDataSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AcademicDataInclude, null>
    /**
     * The data needed to create a AcademicData.
    **/
    data: AcademicDataCreateInput
  }


  /**
   * AcademicData update
   */
  export type AcademicDataUpdateArgs = {
    /**
     * Select specific fields to fetch from the AcademicData
    **/
    select?: XOR<AcademicDataSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AcademicDataInclude, null>
    /**
     * The data needed to update a AcademicData.
    **/
    data: AcademicDataUpdateInput
    /**
     * Choose, which AcademicData to update.
    **/
    where: AcademicDataWhereUniqueInput
  }


  /**
   * AcademicData updateMany
   */
  export type AcademicDataUpdateManyArgs = {
    data: AcademicDataUpdateManyMutationInput
    where?: AcademicDataWhereInput
  }


  /**
   * AcademicData upsert
   */
  export type AcademicDataUpsertArgs = {
    /**
     * Select specific fields to fetch from the AcademicData
    **/
    select?: XOR<AcademicDataSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AcademicDataInclude, null>
    /**
     * The filter to search for the AcademicData to update in case it exists.
    **/
    where: AcademicDataWhereUniqueInput
    /**
     * In case the AcademicData found by the `where` argument doesn't exist, create a new AcademicData with this data.
    **/
    create: AcademicDataCreateInput
    /**
     * In case the AcademicData was found with the provided `where` argument, update it with this data.
    **/
    update: AcademicDataUpdateInput
  }


  /**
   * AcademicData delete
   */
  export type AcademicDataDeleteArgs = {
    /**
     * Select specific fields to fetch from the AcademicData
    **/
    select?: XOR<AcademicDataSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AcademicDataInclude, null>
    /**
     * Filter which AcademicData to delete.
    **/
    where: AcademicDataWhereUniqueInput
  }


  /**
   * AcademicData deleteMany
   */
  export type AcademicDataDeleteManyArgs = {
    where?: AcademicDataWhereInput
  }


  /**
   * AcademicData without action
   */
  export type AcademicDataArgs = {
    /**
     * Select specific fields to fetch from the AcademicData
    **/
    select?: XOR<AcademicDataSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<AcademicDataInclude, null>
  }



  /**
   * Model Experiences
   */


  export type AggregateExperiences = {
    count: number
  }



  export type AggregateExperiencesArgs = {
    where?: ExperiencesWhereInput
    orderBy?: XOR<Enumerable<ExperiencesOrderByInput>, ExperiencesOrderByInput>
    cursor?: ExperiencesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ExperiencesDistinctFieldEnum>
    count?: true
  }

  export type GetExperiencesAggregateType<T extends AggregateExperiencesArgs> = {
    [P in keyof T]: P extends 'count' ? number : never
  }


    
    

  export type ExperiencesSelect = {
    id?: boolean
    description?: boolean
    Curriculum?: boolean | CurriculumArgs
    curriculumId?: boolean
    createdat?: boolean
    updatedat?: boolean
  }

  export type ExperiencesInclude = {
    Curriculum?: boolean | CurriculumArgs
  }

  export type ExperiencesGetPayload<
    S extends boolean | null | undefined | ExperiencesArgs,
    U = keyof S
      > = S extends true
        ? Experiences
    : S extends undefined
    ? never
    : S extends ExperiencesArgs | FindManyExperiencesArgs
    ?'include' extends U
    ? Experiences  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Curriculum'
        ? CurriculumGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Experiences ?Experiences [P]
  : 
          P extends 'Curriculum'
        ? CurriculumGetPayload<S['select'][P]> | null : never
  } 
    : Experiences
  : Experiences


  export interface ExperiencesDelegate {
    /**
     * Find zero or one Experiences that matches the filter.
     * @param {FindUniqueExperiencesArgs} args - Arguments to find a Experiences
     * @example
     * // Get one Experiences
     * const experiences = await prisma.experiences.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueExperiencesArgs>(
      args: Subset<T, FindUniqueExperiencesArgs>
    ): CheckSelect<T, Prisma__ExperiencesClient<Experiences | null>, Prisma__ExperiencesClient<ExperiencesGetPayload<T> | null>>
    /**
     * Find the first Experiences that matches the filter.
     * @param {FindFirstExperiencesArgs} args - Arguments to find a Experiences
     * @example
     * // Get one Experiences
     * const experiences = await prisma.experiences.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstExperiencesArgs>(
      args?: Subset<T, FindFirstExperiencesArgs>
    ): CheckSelect<T, Prisma__ExperiencesClient<Experiences | null>, Prisma__ExperiencesClient<ExperiencesGetPayload<T> | null>>
    /**
     * Find zero or more Experiences that matches the filter.
     * @param {FindManyExperiencesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Experiences
     * const experiences = await prisma.experiences.findMany()
     * 
     * // Get first 10 Experiences
     * const experiences = await prisma.experiences.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const experiencesWithIdOnly = await prisma.experiences.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyExperiencesArgs>(
      args?: Subset<T, FindManyExperiencesArgs>
    ): CheckSelect<T, Promise<Array<Experiences>>, Promise<Array<ExperiencesGetPayload<T>>>>
    /**
     * Create a Experiences.
     * @param {ExperiencesCreateArgs} args - Arguments to create a Experiences.
     * @example
     * // Create one Experiences
     * const Experiences = await prisma.experiences.create({
     *   data: {
     *     // ... data to create a Experiences
     *   }
     * })
     * 
    **/
    create<T extends ExperiencesCreateArgs>(
      args: Subset<T, ExperiencesCreateArgs>
    ): CheckSelect<T, Prisma__ExperiencesClient<Experiences>, Prisma__ExperiencesClient<ExperiencesGetPayload<T>>>
    /**
     * Delete a Experiences.
     * @param {ExperiencesDeleteArgs} args - Arguments to delete one Experiences.
     * @example
     * // Delete one Experiences
     * const Experiences = await prisma.experiences.delete({
     *   where: {
     *     // ... filter to delete one Experiences
     *   }
     * })
     * 
    **/
    delete<T extends ExperiencesDeleteArgs>(
      args: Subset<T, ExperiencesDeleteArgs>
    ): CheckSelect<T, Prisma__ExperiencesClient<Experiences>, Prisma__ExperiencesClient<ExperiencesGetPayload<T>>>
    /**
     * Update one Experiences.
     * @param {ExperiencesUpdateArgs} args - Arguments to update one Experiences.
     * @example
     * // Update one Experiences
     * const experiences = await prisma.experiences.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExperiencesUpdateArgs>(
      args: Subset<T, ExperiencesUpdateArgs>
    ): CheckSelect<T, Prisma__ExperiencesClient<Experiences>, Prisma__ExperiencesClient<ExperiencesGetPayload<T>>>
    /**
     * Delete zero or more Experiences.
     * @param {ExperiencesDeleteManyArgs} args - Arguments to filter Experiences to delete.
     * @example
     * // Delete a few Experiences
     * const { count } = await prisma.experiences.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExperiencesDeleteManyArgs>(
      args: Subset<T, ExperiencesDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Experiences.
     * @param {ExperiencesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Experiences
     * const experiences = await prisma.experiences.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExperiencesUpdateManyArgs>(
      args: Subset<T, ExperiencesUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Experiences.
     * @param {ExperiencesUpsertArgs} args - Arguments to update or create a Experiences.
     * @example
     * // Update or create a Experiences
     * const experiences = await prisma.experiences.upsert({
     *   create: {
     *     // ... data to create a Experiences
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Experiences we want to update
     *   }
     * })
    **/
    upsert<T extends ExperiencesUpsertArgs>(
      args: Subset<T, ExperiencesUpsertArgs>
    ): CheckSelect<T, Prisma__ExperiencesClient<Experiences>, Prisma__ExperiencesClient<ExperiencesGetPayload<T>>>
    /**
     * Find zero or one Experiences that matches the filter.
     * @param {FindUniqueExperiencesArgs} args - Arguments to find a Experiences
     * @deprecated This will be deprecated please use prisma.experiences.findUnique
     * @example
     * // Get one Experiences
     * const experiences = await prisma.experiences.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueExperiencesArgs>(
      args: Subset<T, FindUniqueExperiencesArgs>
    ): CheckSelect<T, Prisma__ExperiencesClient<Experiences | null>, Prisma__ExperiencesClient<ExperiencesGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyExperiencesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateExperiencesArgs>(args: Subset<T, AggregateExperiencesArgs>): Promise<GetExperiencesAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Experiences.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ExperiencesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Curriculum<T extends CurriculumArgs = {}>(args?: Subset<T, CurriculumArgs>): CheckSelect<T, Prisma__CurriculumClient<Curriculum | null>, Prisma__CurriculumClient<CurriculumGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Experiences findUnique
   */
  export type FindUniqueExperiencesArgs = {
    /**
     * Select specific fields to fetch from the Experiences
    **/
    select?: XOR<ExperiencesSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ExperiencesInclude, null>
    /**
     * Filter, which Experiences to fetch.
    **/
    where: ExperiencesWhereUniqueInput
  }


  /**
   * Experiences findFirst
   */
  export type FindFirstExperiencesArgs = {
    /**
     * Select specific fields to fetch from the Experiences
    **/
    select?: XOR<ExperiencesSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ExperiencesInclude, null>
    /**
     * Filter, which Experiences to fetch.
    **/
    where?: ExperiencesWhereInput
    orderBy?: XOR<Enumerable<ExperiencesOrderByInput>, ExperiencesOrderByInput>
    cursor?: ExperiencesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ExperiencesDistinctFieldEnum>
  }


  /**
   * Experiences findMany
   */
  export type FindManyExperiencesArgs = {
    /**
     * Select specific fields to fetch from the Experiences
    **/
    select?: XOR<ExperiencesSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ExperiencesInclude, null>
    /**
     * Filter, which Experiences to fetch.
    **/
    where?: ExperiencesWhereInput
    /**
     * Determine the order of the Experiences to fetch.
    **/
    orderBy?: XOR<Enumerable<ExperiencesOrderByInput>, ExperiencesOrderByInput>
    /**
     * Sets the position for listing Experiences.
    **/
    cursor?: ExperiencesWhereUniqueInput
    /**
     * The number of Experiences to fetch. If negative number, it will take Experiences before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Experiences.
    **/
    skip?: number
    distinct?: Enumerable<ExperiencesDistinctFieldEnum>
  }


  /**
   * Experiences create
   */
  export type ExperiencesCreateArgs = {
    /**
     * Select specific fields to fetch from the Experiences
    **/
    select?: XOR<ExperiencesSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ExperiencesInclude, null>
    /**
     * The data needed to create a Experiences.
    **/
    data: ExperiencesCreateInput
  }


  /**
   * Experiences update
   */
  export type ExperiencesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Experiences
    **/
    select?: XOR<ExperiencesSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ExperiencesInclude, null>
    /**
     * The data needed to update a Experiences.
    **/
    data: ExperiencesUpdateInput
    /**
     * Choose, which Experiences to update.
    **/
    where: ExperiencesWhereUniqueInput
  }


  /**
   * Experiences updateMany
   */
  export type ExperiencesUpdateManyArgs = {
    data: ExperiencesUpdateManyMutationInput
    where?: ExperiencesWhereInput
  }


  /**
   * Experiences upsert
   */
  export type ExperiencesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Experiences
    **/
    select?: XOR<ExperiencesSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ExperiencesInclude, null>
    /**
     * The filter to search for the Experiences to update in case it exists.
    **/
    where: ExperiencesWhereUniqueInput
    /**
     * In case the Experiences found by the `where` argument doesn't exist, create a new Experiences with this data.
    **/
    create: ExperiencesCreateInput
    /**
     * In case the Experiences was found with the provided `where` argument, update it with this data.
    **/
    update: ExperiencesUpdateInput
  }


  /**
   * Experiences delete
   */
  export type ExperiencesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Experiences
    **/
    select?: XOR<ExperiencesSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ExperiencesInclude, null>
    /**
     * Filter which Experiences to delete.
    **/
    where: ExperiencesWhereUniqueInput
  }


  /**
   * Experiences deleteMany
   */
  export type ExperiencesDeleteManyArgs = {
    where?: ExperiencesWhereInput
  }


  /**
   * Experiences without action
   */
  export type ExperiencesArgs = {
    /**
     * Select specific fields to fetch from the Experiences
    **/
    select?: XOR<ExperiencesSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ExperiencesInclude, null>
  }



  /**
   * Model Curriculum
   */


  export type AggregateCurriculum = {
    count: number
    avg: CurriculumAvgAggregateOutputType | null
    sum: CurriculumSumAggregateOutputType | null
    min: CurriculumMinAggregateOutputType | null
    max: CurriculumMaxAggregateOutputType | null
  }

  export type CurriculumAvgAggregateOutputType = {
    intendedsalary: number | null
    userid: number
  }

  export type CurriculumSumAggregateOutputType = {
    intendedsalary: number | null
    userid: number
  }

  export type CurriculumMinAggregateOutputType = {
    intendedsalary: number | null
    userid: number
  }

  export type CurriculumMaxAggregateOutputType = {
    intendedsalary: number | null
    userid: number
  }


  export type CurriculumAvgAggregateInputType = {
    intendedsalary?: true
    userid?: true
  }

  export type CurriculumSumAggregateInputType = {
    intendedsalary?: true
    userid?: true
  }

  export type CurriculumMinAggregateInputType = {
    intendedsalary?: true
    userid?: true
  }

  export type CurriculumMaxAggregateInputType = {
    intendedsalary?: true
    userid?: true
  }

  export type AggregateCurriculumArgs = {
    where?: CurriculumWhereInput
    orderBy?: XOR<Enumerable<CurriculumOrderByInput>, CurriculumOrderByInput>
    cursor?: CurriculumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CurriculumDistinctFieldEnum>
    count?: true
    avg?: CurriculumAvgAggregateInputType
    sum?: CurriculumSumAggregateInputType
    min?: CurriculumMinAggregateInputType
    max?: CurriculumMaxAggregateInputType
  }

  export type GetCurriculumAggregateType<T extends AggregateCurriculumArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetCurriculumAggregateScalarType<T[P]>
  }

  export type GetCurriculumAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof CurriculumAvgAggregateOutputType ? CurriculumAvgAggregateOutputType[P] : never
  }
    
    

  export type CurriculumSelect = {
    id?: boolean
    professionalprofile?: boolean
    intendedsalary?: boolean
    userid?: boolean
    User?: boolean | UserArgs
    academicdata?: boolean | AcademicDataArgs
    experiences?: boolean | ExperiencesArgs
    createdat?: boolean
    updatedat?: boolean
  }

  export type CurriculumInclude = {
    User?: boolean | UserArgs
    academicdata?: boolean | AcademicDataArgs
    experiences?: boolean | ExperiencesArgs
  }

  export type CurriculumGetPayload<
    S extends boolean | null | undefined | CurriculumArgs,
    U = keyof S
      > = S extends true
        ? Curriculum
    : S extends undefined
    ? never
    : S extends CurriculumArgs | FindManyCurriculumArgs
    ?'include' extends U
    ? Curriculum  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> :
        P extends 'academicdata'
        ? AcademicDataGetPayload<S['include'][P]> | null :
        P extends 'experiences'
        ? ExperiencesGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Curriculum ?Curriculum [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> :
        P extends 'academicdata'
        ? AcademicDataGetPayload<S['select'][P]> | null :
        P extends 'experiences'
        ? ExperiencesGetPayload<S['select'][P]> | null : never
  } 
    : Curriculum
  : Curriculum


  export interface CurriculumDelegate {
    /**
     * Find zero or one Curriculum that matches the filter.
     * @param {FindUniqueCurriculumArgs} args - Arguments to find a Curriculum
     * @example
     * // Get one Curriculum
     * const curriculum = await prisma.curriculum.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueCurriculumArgs>(
      args: Subset<T, FindUniqueCurriculumArgs>
    ): CheckSelect<T, Prisma__CurriculumClient<Curriculum | null>, Prisma__CurriculumClient<CurriculumGetPayload<T> | null>>
    /**
     * Find the first Curriculum that matches the filter.
     * @param {FindFirstCurriculumArgs} args - Arguments to find a Curriculum
     * @example
     * // Get one Curriculum
     * const curriculum = await prisma.curriculum.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstCurriculumArgs>(
      args?: Subset<T, FindFirstCurriculumArgs>
    ): CheckSelect<T, Prisma__CurriculumClient<Curriculum | null>, Prisma__CurriculumClient<CurriculumGetPayload<T> | null>>
    /**
     * Find zero or more Curricula that matches the filter.
     * @param {FindManyCurriculumArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Curricula
     * const curricula = await prisma.curriculum.findMany()
     * 
     * // Get first 10 Curricula
     * const curricula = await prisma.curriculum.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const curriculumWithIdOnly = await prisma.curriculum.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyCurriculumArgs>(
      args?: Subset<T, FindManyCurriculumArgs>
    ): CheckSelect<T, Promise<Array<Curriculum>>, Promise<Array<CurriculumGetPayload<T>>>>
    /**
     * Create a Curriculum.
     * @param {CurriculumCreateArgs} args - Arguments to create a Curriculum.
     * @example
     * // Create one Curriculum
     * const Curriculum = await prisma.curriculum.create({
     *   data: {
     *     // ... data to create a Curriculum
     *   }
     * })
     * 
    **/
    create<T extends CurriculumCreateArgs>(
      args: Subset<T, CurriculumCreateArgs>
    ): CheckSelect<T, Prisma__CurriculumClient<Curriculum>, Prisma__CurriculumClient<CurriculumGetPayload<T>>>
    /**
     * Delete a Curriculum.
     * @param {CurriculumDeleteArgs} args - Arguments to delete one Curriculum.
     * @example
     * // Delete one Curriculum
     * const Curriculum = await prisma.curriculum.delete({
     *   where: {
     *     // ... filter to delete one Curriculum
     *   }
     * })
     * 
    **/
    delete<T extends CurriculumDeleteArgs>(
      args: Subset<T, CurriculumDeleteArgs>
    ): CheckSelect<T, Prisma__CurriculumClient<Curriculum>, Prisma__CurriculumClient<CurriculumGetPayload<T>>>
    /**
     * Update one Curriculum.
     * @param {CurriculumUpdateArgs} args - Arguments to update one Curriculum.
     * @example
     * // Update one Curriculum
     * const curriculum = await prisma.curriculum.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CurriculumUpdateArgs>(
      args: Subset<T, CurriculumUpdateArgs>
    ): CheckSelect<T, Prisma__CurriculumClient<Curriculum>, Prisma__CurriculumClient<CurriculumGetPayload<T>>>
    /**
     * Delete zero or more Curricula.
     * @param {CurriculumDeleteManyArgs} args - Arguments to filter Curricula to delete.
     * @example
     * // Delete a few Curricula
     * const { count } = await prisma.curriculum.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CurriculumDeleteManyArgs>(
      args: Subset<T, CurriculumDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Curricula.
     * @param {CurriculumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Curricula
     * const curriculum = await prisma.curriculum.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CurriculumUpdateManyArgs>(
      args: Subset<T, CurriculumUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Curriculum.
     * @param {CurriculumUpsertArgs} args - Arguments to update or create a Curriculum.
     * @example
     * // Update or create a Curriculum
     * const curriculum = await prisma.curriculum.upsert({
     *   create: {
     *     // ... data to create a Curriculum
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Curriculum we want to update
     *   }
     * })
    **/
    upsert<T extends CurriculumUpsertArgs>(
      args: Subset<T, CurriculumUpsertArgs>
    ): CheckSelect<T, Prisma__CurriculumClient<Curriculum>, Prisma__CurriculumClient<CurriculumGetPayload<T>>>
    /**
     * Find zero or one Curriculum that matches the filter.
     * @param {FindUniqueCurriculumArgs} args - Arguments to find a Curriculum
     * @deprecated This will be deprecated please use prisma.curriculum.findUnique
     * @example
     * // Get one Curriculum
     * const curriculum = await prisma.curriculum.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueCurriculumArgs>(
      args: Subset<T, FindUniqueCurriculumArgs>
    ): CheckSelect<T, Prisma__CurriculumClient<Curriculum | null>, Prisma__CurriculumClient<CurriculumGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyCurriculumArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateCurriculumArgs>(args: Subset<T, AggregateCurriculumArgs>): Promise<GetCurriculumAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Curriculum.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CurriculumClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    academicdata<T extends AcademicDataArgs = {}>(args?: Subset<T, AcademicDataArgs>): CheckSelect<T, Prisma__AcademicDataClient<AcademicData | null>, Prisma__AcademicDataClient<AcademicDataGetPayload<T> | null>>;

    experiences<T extends ExperiencesArgs = {}>(args?: Subset<T, ExperiencesArgs>): CheckSelect<T, Prisma__ExperiencesClient<Experiences | null>, Prisma__ExperiencesClient<ExperiencesGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Curriculum findUnique
   */
  export type FindUniqueCurriculumArgs = {
    /**
     * Select specific fields to fetch from the Curriculum
    **/
    select?: XOR<CurriculumSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<CurriculumInclude, null>
    /**
     * Filter, which Curriculum to fetch.
    **/
    where: CurriculumWhereUniqueInput
  }


  /**
   * Curriculum findFirst
   */
  export type FindFirstCurriculumArgs = {
    /**
     * Select specific fields to fetch from the Curriculum
    **/
    select?: XOR<CurriculumSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<CurriculumInclude, null>
    /**
     * Filter, which Curriculum to fetch.
    **/
    where?: CurriculumWhereInput
    orderBy?: XOR<Enumerable<CurriculumOrderByInput>, CurriculumOrderByInput>
    cursor?: CurriculumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CurriculumDistinctFieldEnum>
  }


  /**
   * Curriculum findMany
   */
  export type FindManyCurriculumArgs = {
    /**
     * Select specific fields to fetch from the Curriculum
    **/
    select?: XOR<CurriculumSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<CurriculumInclude, null>
    /**
     * Filter, which Curricula to fetch.
    **/
    where?: CurriculumWhereInput
    /**
     * Determine the order of the Curricula to fetch.
    **/
    orderBy?: XOR<Enumerable<CurriculumOrderByInput>, CurriculumOrderByInput>
    /**
     * Sets the position for listing Curricula.
    **/
    cursor?: CurriculumWhereUniqueInput
    /**
     * The number of Curricula to fetch. If negative number, it will take Curricula before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Curricula.
    **/
    skip?: number
    distinct?: Enumerable<CurriculumDistinctFieldEnum>
  }


  /**
   * Curriculum create
   */
  export type CurriculumCreateArgs = {
    /**
     * Select specific fields to fetch from the Curriculum
    **/
    select?: XOR<CurriculumSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<CurriculumInclude, null>
    /**
     * The data needed to create a Curriculum.
    **/
    data: CurriculumCreateInput
  }


  /**
   * Curriculum update
   */
  export type CurriculumUpdateArgs = {
    /**
     * Select specific fields to fetch from the Curriculum
    **/
    select?: XOR<CurriculumSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<CurriculumInclude, null>
    /**
     * The data needed to update a Curriculum.
    **/
    data: CurriculumUpdateInput
    /**
     * Choose, which Curriculum to update.
    **/
    where: CurriculumWhereUniqueInput
  }


  /**
   * Curriculum updateMany
   */
  export type CurriculumUpdateManyArgs = {
    data: CurriculumUpdateManyMutationInput
    where?: CurriculumWhereInput
  }


  /**
   * Curriculum upsert
   */
  export type CurriculumUpsertArgs = {
    /**
     * Select specific fields to fetch from the Curriculum
    **/
    select?: XOR<CurriculumSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<CurriculumInclude, null>
    /**
     * The filter to search for the Curriculum to update in case it exists.
    **/
    where: CurriculumWhereUniqueInput
    /**
     * In case the Curriculum found by the `where` argument doesn't exist, create a new Curriculum with this data.
    **/
    create: CurriculumCreateInput
    /**
     * In case the Curriculum was found with the provided `where` argument, update it with this data.
    **/
    update: CurriculumUpdateInput
  }


  /**
   * Curriculum delete
   */
  export type CurriculumDeleteArgs = {
    /**
     * Select specific fields to fetch from the Curriculum
    **/
    select?: XOR<CurriculumSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<CurriculumInclude, null>
    /**
     * Filter which Curriculum to delete.
    **/
    where: CurriculumWhereUniqueInput
  }


  /**
   * Curriculum deleteMany
   */
  export type CurriculumDeleteManyArgs = {
    where?: CurriculumWhereInput
  }


  /**
   * Curriculum without action
   */
  export type CurriculumArgs = {
    /**
     * Select specific fields to fetch from the Curriculum
    **/
    select?: XOR<CurriculumSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<CurriculumInclude, null>
  }



  /**
   * Model Company
   */


  export type AggregateCompany = {
    count: number
  }



  export type AggregateCompanyArgs = {
    where?: CompanyWhereInput
    orderBy?: XOR<Enumerable<CompanyOrderByInput>, CompanyOrderByInput>
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompanyDistinctFieldEnum>
    count?: true
  }

  export type GetCompanyAggregateType<T extends AggregateCompanyArgs> = {
    [P in keyof T]: P extends 'count' ? number : never
  }


    
    

  export type CompanySelect = {
    id?: boolean
    name?: boolean
    registrofederal?: boolean
    role?: boolean
    site?: boolean
    links?: boolean
    labellinks?: boolean
    active?: boolean
    createdat?: boolean
    updatedat?: boolean
  }

  export type CompanyGetPayload<
    S extends boolean | null | undefined | CompanyArgs,
    U = keyof S
      > = S extends true
        ? Company
    : S extends undefined
    ? never
    : S extends CompanyArgs | FindManyCompanyArgs
    ?'include' extends U
    ? Company 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Company ?Company [P]
  : 
     never
  } 
    : Company
  : Company


  export interface CompanyDelegate {
    /**
     * Find zero or one Company that matches the filter.
     * @param {FindUniqueCompanyArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueCompanyArgs>(
      args: Subset<T, FindUniqueCompanyArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company | null>, Prisma__CompanyClient<CompanyGetPayload<T> | null>>
    /**
     * Find the first Company that matches the filter.
     * @param {FindFirstCompanyArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstCompanyArgs>(
      args?: Subset<T, FindFirstCompanyArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company | null>, Prisma__CompanyClient<CompanyGetPayload<T> | null>>
    /**
     * Find zero or more Companies that matches the filter.
     * @param {FindManyCompanyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyCompanyArgs>(
      args?: Subset<T, FindManyCompanyArgs>
    ): CheckSelect<T, Promise<Array<Company>>, Promise<Array<CompanyGetPayload<T>>>>
    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
    **/
    create<T extends CompanyCreateArgs>(
      args: Subset<T, CompanyCreateArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company>, Prisma__CompanyClient<CompanyGetPayload<T>>>
    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
    **/
    delete<T extends CompanyDeleteArgs>(
      args: Subset<T, CompanyDeleteArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company>, Prisma__CompanyClient<CompanyGetPayload<T>>>
    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompanyUpdateArgs>(
      args: Subset<T, CompanyUpdateArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company>, Prisma__CompanyClient<CompanyGetPayload<T>>>
    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompanyDeleteManyArgs>(
      args: Subset<T, CompanyDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Companies.
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompanyUpdateManyArgs>(
      args: Subset<T, CompanyUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
    **/
    upsert<T extends CompanyUpsertArgs>(
      args: Subset<T, CompanyUpsertArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company>, Prisma__CompanyClient<CompanyGetPayload<T>>>
    /**
     * Find zero or one Company that matches the filter.
     * @param {FindUniqueCompanyArgs} args - Arguments to find a Company
     * @deprecated This will be deprecated please use prisma.company.findUnique
     * @example
     * // Get one Company
     * const company = await prisma.company.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueCompanyArgs>(
      args: Subset<T, FindUniqueCompanyArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company | null>, Prisma__CompanyClient<CompanyGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyCompanyArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateCompanyArgs>(args: Subset<T, AggregateCompanyArgs>): Promise<GetCompanyAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompanyClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Company findUnique
   */
  export type FindUniqueCompanyArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: XOR<CompanySelect, null>
    /**
     * Filter, which Company to fetch.
    **/
    where: CompanyWhereUniqueInput
  }


  /**
   * Company findFirst
   */
  export type FindFirstCompanyArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: XOR<CompanySelect, null>
    /**
     * Filter, which Company to fetch.
    **/
    where?: CompanyWhereInput
    orderBy?: XOR<Enumerable<CompanyOrderByInput>, CompanyOrderByInput>
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompanyDistinctFieldEnum>
  }


  /**
   * Company findMany
   */
  export type FindManyCompanyArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: XOR<CompanySelect, null>
    /**
     * Filter, which Companies to fetch.
    **/
    where?: CompanyWhereInput
    /**
     * Determine the order of the Companies to fetch.
    **/
    orderBy?: XOR<Enumerable<CompanyOrderByInput>, CompanyOrderByInput>
    /**
     * Sets the position for listing Companies.
    **/
    cursor?: CompanyWhereUniqueInput
    /**
     * The number of Companies to fetch. If negative number, it will take Companies before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Companies.
    **/
    skip?: number
    distinct?: Enumerable<CompanyDistinctFieldEnum>
  }


  /**
   * Company create
   */
  export type CompanyCreateArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: XOR<CompanySelect, null>
    /**
     * The data needed to create a Company.
    **/
    data: CompanyCreateInput
  }


  /**
   * Company update
   */
  export type CompanyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: XOR<CompanySelect, null>
    /**
     * The data needed to update a Company.
    **/
    data: CompanyUpdateInput
    /**
     * Choose, which Company to update.
    **/
    where: CompanyWhereUniqueInput
  }


  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs = {
    data: CompanyUpdateManyMutationInput
    where?: CompanyWhereInput
  }


  /**
   * Company upsert
   */
  export type CompanyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: XOR<CompanySelect, null>
    /**
     * The filter to search for the Company to update in case it exists.
    **/
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
    **/
    create: CompanyCreateInput
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
    **/
    update: CompanyUpdateInput
  }


  /**
   * Company delete
   */
  export type CompanyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: XOR<CompanySelect, null>
    /**
     * Filter which Company to delete.
    **/
    where: CompanyWhereUniqueInput
  }


  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs = {
    where?: CompanyWhereInput
  }


  /**
   * Company without action
   */
  export type CompanyArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: XOR<CompanySelect, null>
  }



  /**
   * Model Agency
   */


  export type AggregateAgency = {
    count: number
  }



  export type AggregateAgencyArgs = {
    where?: AgencyWhereInput
    orderBy?: XOR<Enumerable<AgencyOrderByInput>, AgencyOrderByInput>
    cursor?: AgencyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AgencyDistinctFieldEnum>
    count?: true
  }

  export type GetAgencyAggregateType<T extends AggregateAgencyArgs> = {
    [P in keyof T]: P extends 'count' ? number : never
  }


    
    

  export type AgencySelect = {
    id?: boolean
    name?: boolean
    registrofederal?: boolean
    role?: boolean
    site?: boolean
    links?: boolean
    labellinks?: boolean
    active?: boolean
    createdat?: boolean
    updatedat?: boolean
  }

  export type AgencyGetPayload<
    S extends boolean | null | undefined | AgencyArgs,
    U = keyof S
      > = S extends true
        ? Agency
    : S extends undefined
    ? never
    : S extends AgencyArgs | FindManyAgencyArgs
    ?'include' extends U
    ? Agency 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Agency ?Agency [P]
  : 
     never
  } 
    : Agency
  : Agency


  export interface AgencyDelegate {
    /**
     * Find zero or one Agency that matches the filter.
     * @param {FindUniqueAgencyArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueAgencyArgs>(
      args: Subset<T, FindUniqueAgencyArgs>
    ): CheckSelect<T, Prisma__AgencyClient<Agency | null>, Prisma__AgencyClient<AgencyGetPayload<T> | null>>
    /**
     * Find the first Agency that matches the filter.
     * @param {FindFirstAgencyArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstAgencyArgs>(
      args?: Subset<T, FindFirstAgencyArgs>
    ): CheckSelect<T, Prisma__AgencyClient<Agency | null>, Prisma__AgencyClient<AgencyGetPayload<T> | null>>
    /**
     * Find zero or more Agencies that matches the filter.
     * @param {FindManyAgencyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agencies
     * const agencies = await prisma.agency.findMany()
     * 
     * // Get first 10 Agencies
     * const agencies = await prisma.agency.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agencyWithIdOnly = await prisma.agency.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyAgencyArgs>(
      args?: Subset<T, FindManyAgencyArgs>
    ): CheckSelect<T, Promise<Array<Agency>>, Promise<Array<AgencyGetPayload<T>>>>
    /**
     * Create a Agency.
     * @param {AgencyCreateArgs} args - Arguments to create a Agency.
     * @example
     * // Create one Agency
     * const Agency = await prisma.agency.create({
     *   data: {
     *     // ... data to create a Agency
     *   }
     * })
     * 
    **/
    create<T extends AgencyCreateArgs>(
      args: Subset<T, AgencyCreateArgs>
    ): CheckSelect<T, Prisma__AgencyClient<Agency>, Prisma__AgencyClient<AgencyGetPayload<T>>>
    /**
     * Delete a Agency.
     * @param {AgencyDeleteArgs} args - Arguments to delete one Agency.
     * @example
     * // Delete one Agency
     * const Agency = await prisma.agency.delete({
     *   where: {
     *     // ... filter to delete one Agency
     *   }
     * })
     * 
    **/
    delete<T extends AgencyDeleteArgs>(
      args: Subset<T, AgencyDeleteArgs>
    ): CheckSelect<T, Prisma__AgencyClient<Agency>, Prisma__AgencyClient<AgencyGetPayload<T>>>
    /**
     * Update one Agency.
     * @param {AgencyUpdateArgs} args - Arguments to update one Agency.
     * @example
     * // Update one Agency
     * const agency = await prisma.agency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AgencyUpdateArgs>(
      args: Subset<T, AgencyUpdateArgs>
    ): CheckSelect<T, Prisma__AgencyClient<Agency>, Prisma__AgencyClient<AgencyGetPayload<T>>>
    /**
     * Delete zero or more Agencies.
     * @param {AgencyDeleteManyArgs} args - Arguments to filter Agencies to delete.
     * @example
     * // Delete a few Agencies
     * const { count } = await prisma.agency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AgencyDeleteManyArgs>(
      args: Subset<T, AgencyDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Agencies.
     * @param {AgencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agencies
     * const agency = await prisma.agency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AgencyUpdateManyArgs>(
      args: Subset<T, AgencyUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Agency.
     * @param {AgencyUpsertArgs} args - Arguments to update or create a Agency.
     * @example
     * // Update or create a Agency
     * const agency = await prisma.agency.upsert({
     *   create: {
     *     // ... data to create a Agency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agency we want to update
     *   }
     * })
    **/
    upsert<T extends AgencyUpsertArgs>(
      args: Subset<T, AgencyUpsertArgs>
    ): CheckSelect<T, Prisma__AgencyClient<Agency>, Prisma__AgencyClient<AgencyGetPayload<T>>>
    /**
     * Find zero or one Agency that matches the filter.
     * @param {FindUniqueAgencyArgs} args - Arguments to find a Agency
     * @deprecated This will be deprecated please use prisma.agency.findUnique
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueAgencyArgs>(
      args: Subset<T, FindUniqueAgencyArgs>
    ): CheckSelect<T, Prisma__AgencyClient<Agency | null>, Prisma__AgencyClient<AgencyGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyAgencyArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateAgencyArgs>(args: Subset<T, AggregateAgencyArgs>): Promise<GetAgencyAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AgencyClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Agency findUnique
   */
  export type FindUniqueAgencyArgs = {
    /**
     * Select specific fields to fetch from the Agency
    **/
    select?: XOR<AgencySelect, null>
    /**
     * Filter, which Agency to fetch.
    **/
    where: AgencyWhereUniqueInput
  }


  /**
   * Agency findFirst
   */
  export type FindFirstAgencyArgs = {
    /**
     * Select specific fields to fetch from the Agency
    **/
    select?: XOR<AgencySelect, null>
    /**
     * Filter, which Agency to fetch.
    **/
    where?: AgencyWhereInput
    orderBy?: XOR<Enumerable<AgencyOrderByInput>, AgencyOrderByInput>
    cursor?: AgencyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AgencyDistinctFieldEnum>
  }


  /**
   * Agency findMany
   */
  export type FindManyAgencyArgs = {
    /**
     * Select specific fields to fetch from the Agency
    **/
    select?: XOR<AgencySelect, null>
    /**
     * Filter, which Agencies to fetch.
    **/
    where?: AgencyWhereInput
    /**
     * Determine the order of the Agencies to fetch.
    **/
    orderBy?: XOR<Enumerable<AgencyOrderByInput>, AgencyOrderByInput>
    /**
     * Sets the position for listing Agencies.
    **/
    cursor?: AgencyWhereUniqueInput
    /**
     * The number of Agencies to fetch. If negative number, it will take Agencies before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Agencies.
    **/
    skip?: number
    distinct?: Enumerable<AgencyDistinctFieldEnum>
  }


  /**
   * Agency create
   */
  export type AgencyCreateArgs = {
    /**
     * Select specific fields to fetch from the Agency
    **/
    select?: XOR<AgencySelect, null>
    /**
     * The data needed to create a Agency.
    **/
    data: AgencyCreateInput
  }


  /**
   * Agency update
   */
  export type AgencyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Agency
    **/
    select?: XOR<AgencySelect, null>
    /**
     * The data needed to update a Agency.
    **/
    data: AgencyUpdateInput
    /**
     * Choose, which Agency to update.
    **/
    where: AgencyWhereUniqueInput
  }


  /**
   * Agency updateMany
   */
  export type AgencyUpdateManyArgs = {
    data: AgencyUpdateManyMutationInput
    where?: AgencyWhereInput
  }


  /**
   * Agency upsert
   */
  export type AgencyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Agency
    **/
    select?: XOR<AgencySelect, null>
    /**
     * The filter to search for the Agency to update in case it exists.
    **/
    where: AgencyWhereUniqueInput
    /**
     * In case the Agency found by the `where` argument doesn't exist, create a new Agency with this data.
    **/
    create: AgencyCreateInput
    /**
     * In case the Agency was found with the provided `where` argument, update it with this data.
    **/
    update: AgencyUpdateInput
  }


  /**
   * Agency delete
   */
  export type AgencyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Agency
    **/
    select?: XOR<AgencySelect, null>
    /**
     * Filter which Agency to delete.
    **/
    where: AgencyWhereUniqueInput
  }


  /**
   * Agency deleteMany
   */
  export type AgencyDeleteManyArgs = {
    where?: AgencyWhereInput
  }


  /**
   * Agency without action
   */
  export type AgencyArgs = {
    /**
     * Select specific fields to fetch from the Agency
    **/
    select?: XOR<AgencySelect, null>
  }



  /**
   * Model Vacancy
   */


  export type AggregateVacancy = {
    count: number
    avg: VacancyAvgAggregateOutputType | null
    sum: VacancySumAggregateOutputType | null
    min: VacancyMinAggregateOutputType | null
    max: VacancyMaxAggregateOutputType | null
  }

  export type VacancyAvgAggregateOutputType = {
    codeVacancy: number
    userid: number
  }

  export type VacancySumAggregateOutputType = {
    codeVacancy: number
    userid: number
  }

  export type VacancyMinAggregateOutputType = {
    codeVacancy: number
    userid: number
  }

  export type VacancyMaxAggregateOutputType = {
    codeVacancy: number
    userid: number
  }


  export type VacancyAvgAggregateInputType = {
    codeVacancy?: true
    userid?: true
  }

  export type VacancySumAggregateInputType = {
    codeVacancy?: true
    userid?: true
  }

  export type VacancyMinAggregateInputType = {
    codeVacancy?: true
    userid?: true
  }

  export type VacancyMaxAggregateInputType = {
    codeVacancy?: true
    userid?: true
  }

  export type AggregateVacancyArgs = {
    where?: VacancyWhereInput
    orderBy?: XOR<Enumerable<VacancyOrderByInput>, VacancyOrderByInput>
    cursor?: VacancyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VacancyDistinctFieldEnum>
    count?: true
    avg?: VacancyAvgAggregateInputType
    sum?: VacancySumAggregateInputType
    min?: VacancyMinAggregateInputType
    max?: VacancyMaxAggregateInputType
  }

  export type GetVacancyAggregateType<T extends AggregateVacancyArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetVacancyAggregateScalarType<T[P]>
  }

  export type GetVacancyAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof VacancyAvgAggregateOutputType ? VacancyAvgAggregateOutputType[P] : never
  }
    
    

  export type VacancySelect = {
    codeVacancy?: boolean
    avatar?: boolean
    userid?: boolean
    Interested?: boolean | FindManyUserArgs
    active?: boolean
    name?: boolean
    office?: boolean
    logo?: boolean
    description?: boolean
  }

  export type VacancyInclude = {
    Interested?: boolean | FindManyUserArgs
  }

  export type VacancyGetPayload<
    S extends boolean | null | undefined | VacancyArgs,
    U = keyof S
      > = S extends true
        ? Vacancy
    : S extends undefined
    ? never
    : S extends VacancyArgs | FindManyVacancyArgs
    ?'include' extends U
    ? Vacancy  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Interested'
        ? Array < UserGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Vacancy ?Vacancy [P]
  : 
          P extends 'Interested'
        ? Array < UserGetPayload<S['select'][P]>>  : never
  } 
    : Vacancy
  : Vacancy


  export interface VacancyDelegate {
    /**
     * Find zero or one Vacancy that matches the filter.
     * @param {FindUniqueVacancyArgs} args - Arguments to find a Vacancy
     * @example
     * // Get one Vacancy
     * const vacancy = await prisma.vacancy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueVacancyArgs>(
      args: Subset<T, FindUniqueVacancyArgs>
    ): CheckSelect<T, Prisma__VacancyClient<Vacancy | null>, Prisma__VacancyClient<VacancyGetPayload<T> | null>>
    /**
     * Find the first Vacancy that matches the filter.
     * @param {FindFirstVacancyArgs} args - Arguments to find a Vacancy
     * @example
     * // Get one Vacancy
     * const vacancy = await prisma.vacancy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstVacancyArgs>(
      args?: Subset<T, FindFirstVacancyArgs>
    ): CheckSelect<T, Prisma__VacancyClient<Vacancy | null>, Prisma__VacancyClient<VacancyGetPayload<T> | null>>
    /**
     * Find zero or more Vacancies that matches the filter.
     * @param {FindManyVacancyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vacancies
     * const vacancies = await prisma.vacancy.findMany()
     * 
     * // Get first 10 Vacancies
     * const vacancies = await prisma.vacancy.findMany({ take: 10 })
     * 
     * // Only select the `codeVacancy`
     * const vacancyWithCodeVacancyOnly = await prisma.vacancy.findMany({ select: { codeVacancy: true } })
     * 
    **/
    findMany<T extends FindManyVacancyArgs>(
      args?: Subset<T, FindManyVacancyArgs>
    ): CheckSelect<T, Promise<Array<Vacancy>>, Promise<Array<VacancyGetPayload<T>>>>
    /**
     * Create a Vacancy.
     * @param {VacancyCreateArgs} args - Arguments to create a Vacancy.
     * @example
     * // Create one Vacancy
     * const Vacancy = await prisma.vacancy.create({
     *   data: {
     *     // ... data to create a Vacancy
     *   }
     * })
     * 
    **/
    create<T extends VacancyCreateArgs>(
      args: Subset<T, VacancyCreateArgs>
    ): CheckSelect<T, Prisma__VacancyClient<Vacancy>, Prisma__VacancyClient<VacancyGetPayload<T>>>
    /**
     * Delete a Vacancy.
     * @param {VacancyDeleteArgs} args - Arguments to delete one Vacancy.
     * @example
     * // Delete one Vacancy
     * const Vacancy = await prisma.vacancy.delete({
     *   where: {
     *     // ... filter to delete one Vacancy
     *   }
     * })
     * 
    **/
    delete<T extends VacancyDeleteArgs>(
      args: Subset<T, VacancyDeleteArgs>
    ): CheckSelect<T, Prisma__VacancyClient<Vacancy>, Prisma__VacancyClient<VacancyGetPayload<T>>>
    /**
     * Update one Vacancy.
     * @param {VacancyUpdateArgs} args - Arguments to update one Vacancy.
     * @example
     * // Update one Vacancy
     * const vacancy = await prisma.vacancy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VacancyUpdateArgs>(
      args: Subset<T, VacancyUpdateArgs>
    ): CheckSelect<T, Prisma__VacancyClient<Vacancy>, Prisma__VacancyClient<VacancyGetPayload<T>>>
    /**
     * Delete zero or more Vacancies.
     * @param {VacancyDeleteManyArgs} args - Arguments to filter Vacancies to delete.
     * @example
     * // Delete a few Vacancies
     * const { count } = await prisma.vacancy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VacancyDeleteManyArgs>(
      args: Subset<T, VacancyDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Vacancies.
     * @param {VacancyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vacancies
     * const vacancy = await prisma.vacancy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VacancyUpdateManyArgs>(
      args: Subset<T, VacancyUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Vacancy.
     * @param {VacancyUpsertArgs} args - Arguments to update or create a Vacancy.
     * @example
     * // Update or create a Vacancy
     * const vacancy = await prisma.vacancy.upsert({
     *   create: {
     *     // ... data to create a Vacancy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vacancy we want to update
     *   }
     * })
    **/
    upsert<T extends VacancyUpsertArgs>(
      args: Subset<T, VacancyUpsertArgs>
    ): CheckSelect<T, Prisma__VacancyClient<Vacancy>, Prisma__VacancyClient<VacancyGetPayload<T>>>
    /**
     * Find zero or one Vacancy that matches the filter.
     * @param {FindUniqueVacancyArgs} args - Arguments to find a Vacancy
     * @deprecated This will be deprecated please use prisma.vacancy.findUnique
     * @example
     * // Get one Vacancy
     * const vacancy = await prisma.vacancy.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueVacancyArgs>(
      args: Subset<T, FindUniqueVacancyArgs>
    ): CheckSelect<T, Prisma__VacancyClient<Vacancy | null>, Prisma__VacancyClient<VacancyGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyVacancyArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateVacancyArgs>(args: Subset<T, AggregateVacancyArgs>): Promise<GetVacancyAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vacancy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VacancyClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Interested<T extends FindManyUserArgs = {}>(args?: Subset<T, FindManyUserArgs>): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Vacancy findUnique
   */
  export type FindUniqueVacancyArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
    **/
    select?: XOR<VacancySelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VacancyInclude, null>
    /**
     * Filter, which Vacancy to fetch.
    **/
    where: VacancyWhereUniqueInput
  }


  /**
   * Vacancy findFirst
   */
  export type FindFirstVacancyArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
    **/
    select?: XOR<VacancySelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VacancyInclude, null>
    /**
     * Filter, which Vacancy to fetch.
    **/
    where?: VacancyWhereInput
    orderBy?: XOR<Enumerable<VacancyOrderByInput>, VacancyOrderByInput>
    cursor?: VacancyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VacancyDistinctFieldEnum>
  }


  /**
   * Vacancy findMany
   */
  export type FindManyVacancyArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
    **/
    select?: XOR<VacancySelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VacancyInclude, null>
    /**
     * Filter, which Vacancies to fetch.
    **/
    where?: VacancyWhereInput
    /**
     * Determine the order of the Vacancies to fetch.
    **/
    orderBy?: XOR<Enumerable<VacancyOrderByInput>, VacancyOrderByInput>
    /**
     * Sets the position for listing Vacancies.
    **/
    cursor?: VacancyWhereUniqueInput
    /**
     * The number of Vacancies to fetch. If negative number, it will take Vacancies before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Vacancies.
    **/
    skip?: number
    distinct?: Enumerable<VacancyDistinctFieldEnum>
  }


  /**
   * Vacancy create
   */
  export type VacancyCreateArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
    **/
    select?: XOR<VacancySelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VacancyInclude, null>
    /**
     * The data needed to create a Vacancy.
    **/
    data: VacancyCreateInput
  }


  /**
   * Vacancy update
   */
  export type VacancyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
    **/
    select?: XOR<VacancySelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VacancyInclude, null>
    /**
     * The data needed to update a Vacancy.
    **/
    data: VacancyUpdateInput
    /**
     * Choose, which Vacancy to update.
    **/
    where: VacancyWhereUniqueInput
  }


  /**
   * Vacancy updateMany
   */
  export type VacancyUpdateManyArgs = {
    data: VacancyUpdateManyMutationInput
    where?: VacancyWhereInput
  }


  /**
   * Vacancy upsert
   */
  export type VacancyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
    **/
    select?: XOR<VacancySelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VacancyInclude, null>
    /**
     * The filter to search for the Vacancy to update in case it exists.
    **/
    where: VacancyWhereUniqueInput
    /**
     * In case the Vacancy found by the `where` argument doesn't exist, create a new Vacancy with this data.
    **/
    create: VacancyCreateInput
    /**
     * In case the Vacancy was found with the provided `where` argument, update it with this data.
    **/
    update: VacancyUpdateInput
  }


  /**
   * Vacancy delete
   */
  export type VacancyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
    **/
    select?: XOR<VacancySelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VacancyInclude, null>
    /**
     * Filter which Vacancy to delete.
    **/
    where: VacancyWhereUniqueInput
  }


  /**
   * Vacancy deleteMany
   */
  export type VacancyDeleteManyArgs = {
    where?: VacancyWhereInput
  }


  /**
   * Vacancy without action
   */
  export type VacancyArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
    **/
    select?: XOR<VacancySelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VacancyInclude, null>
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ProfileDistinctFieldEnum: {
    id: 'id',
    bio: 'bio',
    pseudonym: 'pseudonym',
    userid: 'userid',
    createdat: 'createdat',
    updatedat: 'updatedat'
  };

  export type ProfileDistinctFieldEnum = (typeof ProfileDistinctFieldEnum)[keyof typeof ProfileDistinctFieldEnum]


  export const UserDistinctFieldEnum: {
    id: 'id',
    authenticationkey: 'authenticationkey',
    securitykey: 'securitykey',
    fullname: 'fullname',
    secret: 'secret',
    avatar: 'avatar',
    email: 'email',
    cpf: 'cpf',
    datebirth: 'datebirth',
    nickname: 'nickname',
    preferencialname: 'preferencialname',
    active: 'active',
    role: 'role',
    gender: 'gender',
    createdat: 'createdat',
    updatedat: 'updatedat'
  };

  export type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


  export const AddressDistinctFieldEnum: {
    id: 'id',
    name: 'name',
    logradouro: 'logradouro',
    bairro: 'bairro',
    cidade: 'cidade',
    cep: 'cep',
    state: 'state',
    userid: 'userid',
    createdat: 'createdat',
    updatedat: 'updatedat'
  };

  export type AddressDistinctFieldEnum = (typeof AddressDistinctFieldEnum)[keyof typeof AddressDistinctFieldEnum]


  export const ContactDistinctFieldEnum: {
    id: 'id',
    userid: 'userid',
    talkto: 'talkto',
    phone: 'phone',
    talktotwo: 'talktotwo',
    phonetwo: 'phonetwo',
    createdat: 'createdat',
    updatedat: 'updatedat'
  };

  export type ContactDistinctFieldEnum = (typeof ContactDistinctFieldEnum)[keyof typeof ContactDistinctFieldEnum]


  export const AcademicDataDistinctFieldEnum: {
    id: 'id',
    curriculumId: 'curriculumId',
    createdat: 'createdat',
    updatedat: 'updatedat'
  };

  export type AcademicDataDistinctFieldEnum = (typeof AcademicDataDistinctFieldEnum)[keyof typeof AcademicDataDistinctFieldEnum]


  export const ExperiencesDistinctFieldEnum: {
    id: 'id',
    description: 'description',
    curriculumId: 'curriculumId',
    createdat: 'createdat',
    updatedat: 'updatedat'
  };

  export type ExperiencesDistinctFieldEnum = (typeof ExperiencesDistinctFieldEnum)[keyof typeof ExperiencesDistinctFieldEnum]


  export const CurriculumDistinctFieldEnum: {
    id: 'id',
    professionalprofile: 'professionalprofile',
    intendedsalary: 'intendedsalary',
    userid: 'userid',
    createdat: 'createdat',
    updatedat: 'updatedat'
  };

  export type CurriculumDistinctFieldEnum = (typeof CurriculumDistinctFieldEnum)[keyof typeof CurriculumDistinctFieldEnum]


  export const CompanyDistinctFieldEnum: {
    id: 'id',
    name: 'name',
    registrofederal: 'registrofederal',
    role: 'role',
    site: 'site',
    links: 'links',
    labellinks: 'labellinks',
    active: 'active',
    createdat: 'createdat',
    updatedat: 'updatedat'
  };

  export type CompanyDistinctFieldEnum = (typeof CompanyDistinctFieldEnum)[keyof typeof CompanyDistinctFieldEnum]


  export const AgencyDistinctFieldEnum: {
    id: 'id',
    name: 'name',
    registrofederal: 'registrofederal',
    role: 'role',
    site: 'site',
    links: 'links',
    labellinks: 'labellinks',
    active: 'active',
    createdat: 'createdat',
    updatedat: 'updatedat'
  };

  export type AgencyDistinctFieldEnum = (typeof AgencyDistinctFieldEnum)[keyof typeof AgencyDistinctFieldEnum]


  export const VacancyDistinctFieldEnum: {
    codeVacancy: 'codeVacancy',
    avatar: 'avatar',
    userid: 'userid',
    active: 'active',
    name: 'name',
    office: 'office',
    logo: 'logo',
    description: 'description'
  };

  export type VacancyDistinctFieldEnum = (typeof VacancyDistinctFieldEnum)[keyof typeof VacancyDistinctFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type ProfileWhereInput = {
    AND?: XOR<ProfileWhereInput, Enumerable<ProfileWhereInput>>
    OR?: XOR<ProfileWhereInput, Enumerable<ProfileWhereInput>>
    NOT?: XOR<ProfileWhereInput, Enumerable<ProfileWhereInput>>
    id?: XOR<StringFilter, string>
    bio?: StringNullableFilter | string | null
    pseudonym?: StringNullableFilter | string | null
    userid?: XOR<IntFilter, number>
    User?: XOR<UserRelationFilter, UserWhereInput>
    createdat?: XOR<DateTimeFilter, Date | string>
    updatedat?: XOR<DateTimeFilter, Date | string>
  }

  export type ProfileOrderByInput = {
    id?: SortOrder
    bio?: SortOrder
    pseudonym?: SortOrder
    userid?: SortOrder
    createdat?: SortOrder
    updatedat?: SortOrder
  }

  export type ProfileWhereUniqueInput = {
    id?: string
    userid?: number
  }

  export type UserWhereInput = {
    AND?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
    OR?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
    NOT?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
    id?: XOR<IntFilter, number>
    authenticationkey?: XOR<StringFilter, string>
    securitykey?: XOR<StringFilter, string>
    fullname?: XOR<StringFilter, string>
    secret?: XOR<StringFilter, string>
    avatar?: StringNullableFilter | string | null
    email?: XOR<StringFilter, string>
    cpf?: XOR<StringFilter, string>
    datebirth?: StringNullableFilter | string | null
    nickname?: StringNullableFilter | string | null
    preferencialname?: StringNullableFilter | string | null
    active?: XOR<BoolFilter, boolean>
    role?: XOR<EnumRoleFilter, Role>
    gender?: XOR<EnumGenderFilter, Gender>
    Address?: AddressRelationFilter | AddressWhereInput | null
    Contact?: ContactRelationFilter | ContactWhereInput | null
    Curriculum?: CurriculumRelationFilter | CurriculumWhereInput | null
    Profile?: ProfileRelationFilter | ProfileWhereInput | null
    Vacancy?: VacancyListRelationFilter
    createdat?: XOR<DateTimeFilter, Date | string>
    updatedat?: XOR<DateTimeFilter, Date | string>
  }

  export type UserOrderByInput = {
    id?: SortOrder
    authenticationkey?: SortOrder
    securitykey?: SortOrder
    fullname?: SortOrder
    secret?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    datebirth?: SortOrder
    nickname?: SortOrder
    preferencialname?: SortOrder
    active?: SortOrder
    role?: SortOrder
    gender?: SortOrder
    createdat?: SortOrder
    updatedat?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
    cpf?: string
    nickname?: string
  }

  export type AddressWhereInput = {
    AND?: XOR<AddressWhereInput, Enumerable<AddressWhereInput>>
    OR?: XOR<AddressWhereInput, Enumerable<AddressWhereInput>>
    NOT?: XOR<AddressWhereInput, Enumerable<AddressWhereInput>>
    id?: XOR<StringFilter, string>
    name?: StringNullableFilter | string | null
    logradouro?: StringNullableFilter | string | null
    bairro?: StringNullableFilter | string | null
    cidade?: StringNullableFilter | string | null
    cep?: StringNullableFilter | string | null
    state?: StringNullableFilter | string | null
    userid?: XOR<IntFilter, number>
    User?: XOR<UserRelationFilter, UserWhereInput>
    createdat?: XOR<DateTimeFilter, Date | string>
    updatedat?: XOR<DateTimeFilter, Date | string>
  }

  export type AddressOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    logradouro?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    cep?: SortOrder
    state?: SortOrder
    userid?: SortOrder
    createdat?: SortOrder
    updatedat?: SortOrder
  }

  export type AddressWhereUniqueInput = {
    id?: string
  }

  export type ContactWhereInput = {
    AND?: XOR<ContactWhereInput, Enumerable<ContactWhereInput>>
    OR?: XOR<ContactWhereInput, Enumerable<ContactWhereInput>>
    NOT?: XOR<ContactWhereInput, Enumerable<ContactWhereInput>>
    id?: XOR<StringFilter, string>
    userid?: XOR<IntFilter, number>
    talkto?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    talktotwo?: StringNullableFilter | string | null
    phonetwo?: StringNullableFilter | string | null
    User?: XOR<UserRelationFilter, UserWhereInput>
    createdat?: XOR<DateTimeFilter, Date | string>
    updatedat?: XOR<DateTimeFilter, Date | string>
  }

  export type ContactOrderByInput = {
    id?: SortOrder
    userid?: SortOrder
    talkto?: SortOrder
    phone?: SortOrder
    talktotwo?: SortOrder
    phonetwo?: SortOrder
    createdat?: SortOrder
    updatedat?: SortOrder
  }

  export type ContactWhereUniqueInput = {
    id?: string
  }

  export type AcademicDataWhereInput = {
    AND?: XOR<AcademicDataWhereInput, Enumerable<AcademicDataWhereInput>>
    OR?: XOR<AcademicDataWhereInput, Enumerable<AcademicDataWhereInput>>
    NOT?: XOR<AcademicDataWhereInput, Enumerable<AcademicDataWhereInput>>
    id?: XOR<StringFilter, string>
    Curriculum?: CurriculumRelationFilter | CurriculumWhereInput | null
    curriculumId?: StringNullableFilter | string | null
    createdat?: XOR<DateTimeFilter, Date | string>
    updatedat?: XOR<DateTimeFilter, Date | string>
  }

  export type AcademicDataOrderByInput = {
    id?: SortOrder
    curriculumId?: SortOrder
    createdat?: SortOrder
    updatedat?: SortOrder
  }

  export type AcademicDataWhereUniqueInput = {
    id?: string
  }

  export type ExperiencesWhereInput = {
    AND?: XOR<ExperiencesWhereInput, Enumerable<ExperiencesWhereInput>>
    OR?: XOR<ExperiencesWhereInput, Enumerable<ExperiencesWhereInput>>
    NOT?: XOR<ExperiencesWhereInput, Enumerable<ExperiencesWhereInput>>
    id?: XOR<StringFilter, string>
    description?: StringNullableFilter | string | null
    Curriculum?: CurriculumRelationFilter | CurriculumWhereInput | null
    curriculumId?: StringNullableFilter | string | null
    createdat?: XOR<DateTimeFilter, Date | string>
    updatedat?: XOR<DateTimeFilter, Date | string>
  }

  export type ExperiencesOrderByInput = {
    id?: SortOrder
    description?: SortOrder
    curriculumId?: SortOrder
    createdat?: SortOrder
    updatedat?: SortOrder
  }

  export type ExperiencesWhereUniqueInput = {
    id?: string
  }

  export type CurriculumWhereInput = {
    AND?: XOR<CurriculumWhereInput, Enumerable<CurriculumWhereInput>>
    OR?: XOR<CurriculumWhereInput, Enumerable<CurriculumWhereInput>>
    NOT?: XOR<CurriculumWhereInput, Enumerable<CurriculumWhereInput>>
    id?: XOR<StringFilter, string>
    professionalprofile?: StringNullableFilter | string | null
    intendedsalary?: FloatNullableFilter | number | null
    userid?: XOR<IntFilter, number>
    User?: XOR<UserRelationFilter, UserWhereInput>
    academicdata?: AcademicDataRelationFilter | AcademicDataWhereInput | null
    experiences?: ExperiencesRelationFilter | ExperiencesWhereInput | null
    createdat?: XOR<DateTimeFilter, Date | string>
    updatedat?: XOR<DateTimeFilter, Date | string>
  }

  export type CurriculumOrderByInput = {
    id?: SortOrder
    professionalprofile?: SortOrder
    intendedsalary?: SortOrder
    userid?: SortOrder
    createdat?: SortOrder
    updatedat?: SortOrder
  }

  export type CurriculumWhereUniqueInput = {
    id?: string
    userid?: number
  }

  export type CompanyWhereInput = {
    AND?: XOR<CompanyWhereInput, Enumerable<CompanyWhereInput>>
    OR?: XOR<CompanyWhereInput, Enumerable<CompanyWhereInput>>
    NOT?: XOR<CompanyWhereInput, Enumerable<CompanyWhereInput>>
    id?: XOR<StringFilter, string>
    name?: XOR<StringFilter, string>
    registrofederal?: XOR<StringFilter, string>
    role?: XOR<EnumRoleFilter, Role>
    site?: StringNullableFilter | string | null
    links?: StringNullableListFilter
    labellinks?: StringNullableListFilter
    active?: XOR<BoolFilter, boolean>
    createdat?: XOR<DateTimeFilter, Date | string>
    updatedat?: XOR<DateTimeFilter, Date | string>
  }

  export type CompanyOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    registrofederal?: SortOrder
    role?: SortOrder
    site?: SortOrder
    links?: SortOrder
    labellinks?: SortOrder
    active?: SortOrder
    createdat?: SortOrder
    updatedat?: SortOrder
  }

  export type CompanyWhereUniqueInput = {
    id?: string
    registrofederal?: string
    site?: string
  }

  export type AgencyWhereInput = {
    AND?: XOR<AgencyWhereInput, Enumerable<AgencyWhereInput>>
    OR?: XOR<AgencyWhereInput, Enumerable<AgencyWhereInput>>
    NOT?: XOR<AgencyWhereInput, Enumerable<AgencyWhereInput>>
    id?: XOR<StringFilter, string>
    name?: XOR<StringFilter, string>
    registrofederal?: XOR<StringFilter, string>
    role?: XOR<EnumRoleFilter, Role>
    site?: XOR<StringFilter, string>
    links?: StringNullableListFilter
    labellinks?: StringNullableListFilter
    active?: XOR<BoolFilter, boolean>
    createdat?: XOR<DateTimeFilter, Date | string>
    updatedat?: XOR<DateTimeFilter, Date | string>
  }

  export type AgencyOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    registrofederal?: SortOrder
    role?: SortOrder
    site?: SortOrder
    links?: SortOrder
    labellinks?: SortOrder
    active?: SortOrder
    createdat?: SortOrder
    updatedat?: SortOrder
  }

  export type AgencyWhereUniqueInput = {
    id?: string
    registrofederal?: string
    site?: string
  }

  export type VacancyWhereInput = {
    AND?: XOR<VacancyWhereInput, Enumerable<VacancyWhereInput>>
    OR?: XOR<VacancyWhereInput, Enumerable<VacancyWhereInput>>
    NOT?: XOR<VacancyWhereInput, Enumerable<VacancyWhereInput>>
    codeVacancy?: XOR<IntFilter, number>
    avatar?: StringNullableFilter | string | null
    userid?: XOR<IntFilter, number>
    Interested?: UserListRelationFilter
    active?: BoolNullableFilter | boolean | null
    name?: StringNullableFilter | string | null
    office?: StringNullableFilter | string | null
    logo?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
  }

  export type VacancyOrderByInput = {
    codeVacancy?: SortOrder
    avatar?: SortOrder
    userid?: SortOrder
    active?: SortOrder
    name?: SortOrder
    office?: SortOrder
    logo?: SortOrder
    description?: SortOrder
  }

  export type VacancyWhereUniqueInput = {
    codeVacancy?: number
  }

  export type ProfileCreateInput = {
    id?: string
    bio?: XOR<string, null>
    pseudonym?: XOR<string, null>
    createdat?: Date | string
    updatedat?: Date | string
    User: UserCreateOneWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    bio?: string | NullableStringFieldUpdateOperationsInput | null
    pseudonym?: string | NullableStringFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    User?: UserUpdateOneRequiredWithoutProfileInput
  }

  export type ProfileUpdateManyMutationInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    bio?: string | NullableStringFieldUpdateOperationsInput | null
    pseudonym?: string | NullableStringFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type UserCreateInput = {
    authenticationkey?: string
    securitykey?: string
    fullname: string
    secret: string
    avatar?: XOR<string, null>
    email: string
    cpf: string
    datebirth?: XOR<string, null>
    nickname?: XOR<string, null>
    preferencialname?: XOR<string, null>
    active?: boolean
    role?: Role
    gender: Gender
    createdat?: Date | string
    updatedat?: Date | string
    Address?: AddressCreateOneWithoutUserInput
    Contact?: ContactCreateOneWithoutUserInput
    Curriculum?: CurriculumCreateOneWithoutUserInput
    Profile?: ProfileCreateOneWithoutUserInput
    Vacancy?: VacancyCreateManyWithoutInterestedInput
  }

  export type UserUpdateInput = {
    authenticationkey?: XOR<string, StringFieldUpdateOperationsInput>
    securitykey?: XOR<string, StringFieldUpdateOperationsInput>
    fullname?: XOR<string, StringFieldUpdateOperationsInput>
    secret?: XOR<string, StringFieldUpdateOperationsInput>
    avatar?: string | NullableStringFieldUpdateOperationsInput | null
    email?: XOR<string, StringFieldUpdateOperationsInput>
    cpf?: XOR<string, StringFieldUpdateOperationsInput>
    datebirth?: string | NullableStringFieldUpdateOperationsInput | null
    nickname?: string | NullableStringFieldUpdateOperationsInput | null
    preferencialname?: string | NullableStringFieldUpdateOperationsInput | null
    active?: XOR<boolean, BoolFieldUpdateOperationsInput>
    role?: XOR<Role, EnumRoleFieldUpdateOperationsInput>
    gender?: XOR<Gender, EnumGenderFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    Address?: AddressUpdateOneWithoutUserInput
    Contact?: ContactUpdateOneWithoutUserInput
    Curriculum?: CurriculumUpdateOneWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Vacancy?: VacancyUpdateManyWithoutInterestedInput
  }

  export type UserUpdateManyMutationInput = {
    authenticationkey?: XOR<string, StringFieldUpdateOperationsInput>
    securitykey?: XOR<string, StringFieldUpdateOperationsInput>
    fullname?: XOR<string, StringFieldUpdateOperationsInput>
    secret?: XOR<string, StringFieldUpdateOperationsInput>
    avatar?: string | NullableStringFieldUpdateOperationsInput | null
    email?: XOR<string, StringFieldUpdateOperationsInput>
    cpf?: XOR<string, StringFieldUpdateOperationsInput>
    datebirth?: string | NullableStringFieldUpdateOperationsInput | null
    nickname?: string | NullableStringFieldUpdateOperationsInput | null
    preferencialname?: string | NullableStringFieldUpdateOperationsInput | null
    active?: XOR<boolean, BoolFieldUpdateOperationsInput>
    role?: XOR<Role, EnumRoleFieldUpdateOperationsInput>
    gender?: XOR<Gender, EnumGenderFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type AddressCreateInput = {
    id?: string
    name?: XOR<string, null>
    logradouro?: XOR<string, null>
    bairro?: XOR<string, null>
    cidade?: XOR<string, null>
    cep?: XOR<string, null>
    state?: XOR<string, null>
    createdat?: Date | string
    updatedat?: Date | string
    User: UserCreateOneWithoutAddressInput
  }

  export type AddressUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    name?: string | NullableStringFieldUpdateOperationsInput | null
    logradouro?: string | NullableStringFieldUpdateOperationsInput | null
    bairro?: string | NullableStringFieldUpdateOperationsInput | null
    cidade?: string | NullableStringFieldUpdateOperationsInput | null
    cep?: string | NullableStringFieldUpdateOperationsInput | null
    state?: string | NullableStringFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    User?: UserUpdateOneRequiredWithoutAddressInput
  }

  export type AddressUpdateManyMutationInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    name?: string | NullableStringFieldUpdateOperationsInput | null
    logradouro?: string | NullableStringFieldUpdateOperationsInput | null
    bairro?: string | NullableStringFieldUpdateOperationsInput | null
    cidade?: string | NullableStringFieldUpdateOperationsInput | null
    cep?: string | NullableStringFieldUpdateOperationsInput | null
    state?: string | NullableStringFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type ContactCreateInput = {
    id?: string
    talkto?: XOR<string, null>
    phone?: XOR<string, null>
    talktotwo?: XOR<string, null>
    phonetwo?: XOR<string, null>
    createdat?: Date | string
    updatedat?: Date | string
    User: UserCreateOneWithoutContactInput
  }

  export type ContactUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    talkto?: string | NullableStringFieldUpdateOperationsInput | null
    phone?: string | NullableStringFieldUpdateOperationsInput | null
    talktotwo?: string | NullableStringFieldUpdateOperationsInput | null
    phonetwo?: string | NullableStringFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    User?: UserUpdateOneRequiredWithoutContactInput
  }

  export type ContactUpdateManyMutationInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    talkto?: string | NullableStringFieldUpdateOperationsInput | null
    phone?: string | NullableStringFieldUpdateOperationsInput | null
    talktotwo?: string | NullableStringFieldUpdateOperationsInput | null
    phonetwo?: string | NullableStringFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type AcademicDataCreateInput = {
    id?: string
    createdat?: Date | string
    updatedat?: Date | string
    Curriculum?: CurriculumCreateOneWithoutAcademicdataInput
  }

  export type AcademicDataUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    Curriculum?: CurriculumUpdateOneWithoutAcademicdataInput
  }

  export type AcademicDataUpdateManyMutationInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type ExperiencesCreateInput = {
    id?: string
    description?: XOR<string, null>
    createdat?: Date | string
    updatedat?: Date | string
    Curriculum?: CurriculumCreateOneWithoutExperiencesInput
  }

  export type ExperiencesUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    description?: string | NullableStringFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    Curriculum?: CurriculumUpdateOneWithoutExperiencesInput
  }

  export type ExperiencesUpdateManyMutationInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    description?: string | NullableStringFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type CurriculumCreateInput = {
    id?: string
    professionalprofile?: XOR<string, null>
    intendedsalary?: XOR<number, null>
    createdat?: Date | string
    updatedat?: Date | string
    User: UserCreateOneWithoutCurriculumInput
    academicdata?: AcademicDataCreateOneWithoutCurriculumInput
    experiences?: ExperiencesCreateOneWithoutCurriculumInput
  }

  export type CurriculumUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    professionalprofile?: string | NullableStringFieldUpdateOperationsInput | null
    intendedsalary?: number | NullableFloatFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    User?: UserUpdateOneRequiredWithoutCurriculumInput
    academicdata?: AcademicDataUpdateOneWithoutCurriculumInput
    experiences?: ExperiencesUpdateOneWithoutCurriculumInput
  }

  export type CurriculumUpdateManyMutationInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    professionalprofile?: string | NullableStringFieldUpdateOperationsInput | null
    intendedsalary?: number | NullableFloatFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type CompanyCreateInput = {
    id?: string
    name: string
    registrofederal: string
    role?: Role
    site?: XOR<string, null>
    active?: boolean
    createdat?: Date | string
    updatedat?: Date | string
    links?: XOR<CompanyCreatelinksInput, Enumerable<string>>
    labellinks?: XOR<CompanyCreatelabellinksInput, Enumerable<string>>
  }

  export type CompanyUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    name?: XOR<string, StringFieldUpdateOperationsInput>
    registrofederal?: XOR<string, StringFieldUpdateOperationsInput>
    role?: XOR<Role, EnumRoleFieldUpdateOperationsInput>
    site?: string | NullableStringFieldUpdateOperationsInput | null
    active?: XOR<boolean, BoolFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    links?: XOR<CompanyUpdatelinksInput, Enumerable<string>>
    labellinks?: XOR<CompanyUpdatelabellinksInput, Enumerable<string>>
  }

  export type CompanyUpdateManyMutationInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    name?: XOR<string, StringFieldUpdateOperationsInput>
    registrofederal?: XOR<string, StringFieldUpdateOperationsInput>
    role?: XOR<Role, EnumRoleFieldUpdateOperationsInput>
    site?: string | NullableStringFieldUpdateOperationsInput | null
    active?: XOR<boolean, BoolFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    links?: XOR<CompanyUpdatelinksInput, Enumerable<string>>
    labellinks?: XOR<CompanyUpdatelabellinksInput, Enumerable<string>>
  }

  export type AgencyCreateInput = {
    id?: string
    name: string
    registrofederal: string
    role?: Role
    site: string
    active?: boolean
    createdat?: Date | string
    updatedat?: Date | string
    links?: XOR<AgencyCreatelinksInput, Enumerable<string>>
    labellinks?: XOR<AgencyCreatelabellinksInput, Enumerable<string>>
  }

  export type AgencyUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    name?: XOR<string, StringFieldUpdateOperationsInput>
    registrofederal?: XOR<string, StringFieldUpdateOperationsInput>
    role?: XOR<Role, EnumRoleFieldUpdateOperationsInput>
    site?: XOR<string, StringFieldUpdateOperationsInput>
    active?: XOR<boolean, BoolFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    links?: XOR<AgencyUpdatelinksInput, Enumerable<string>>
    labellinks?: XOR<AgencyUpdatelabellinksInput, Enumerable<string>>
  }

  export type AgencyUpdateManyMutationInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    name?: XOR<string, StringFieldUpdateOperationsInput>
    registrofederal?: XOR<string, StringFieldUpdateOperationsInput>
    role?: XOR<Role, EnumRoleFieldUpdateOperationsInput>
    site?: XOR<string, StringFieldUpdateOperationsInput>
    active?: XOR<boolean, BoolFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    links?: XOR<AgencyUpdatelinksInput, Enumerable<string>>
    labellinks?: XOR<AgencyUpdatelabellinksInput, Enumerable<string>>
  }

  export type VacancyCreateInput = {
    avatar?: XOR<string, null>
    userid: number
    active?: XOR<boolean, null>
    name?: XOR<string, null>
    office?: XOR<string, null>
    logo?: XOR<string, null>
    description?: XOR<string, null>
    Interested?: UserCreateManyWithoutVacancyInput
  }

  export type VacancyUpdateInput = {
    avatar?: string | NullableStringFieldUpdateOperationsInput | null
    userid?: XOR<number, IntFieldUpdateOperationsInput>
    active?: boolean | NullableBoolFieldUpdateOperationsInput | null
    name?: string | NullableStringFieldUpdateOperationsInput | null
    office?: string | NullableStringFieldUpdateOperationsInput | null
    logo?: string | NullableStringFieldUpdateOperationsInput | null
    description?: string | NullableStringFieldUpdateOperationsInput | null
    Interested?: UserUpdateManyWithoutVacancyInput
  }

  export type VacancyUpdateManyMutationInput = {
    avatar?: string | NullableStringFieldUpdateOperationsInput | null
    userid?: XOR<number, IntFieldUpdateOperationsInput>
    active?: boolean | NullableBoolFieldUpdateOperationsInput | null
    name?: string | NullableStringFieldUpdateOperationsInput | null
    office?: string | NullableStringFieldUpdateOperationsInput | null
    logo?: string | NullableStringFieldUpdateOperationsInput | null
    description?: string | NullableStringFieldUpdateOperationsInput | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: XOR<string, NestedStringFilter>
  }

  export type StringNullableFilter = {
    equals?: XOR<string, null>
    in?: XOR<Enumerable<string>, null>
    notIn?: XOR<Enumerable<string>, null>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: string | NestedStringNullableFilter | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: XOR<number, NestedIntFilter>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: XOR<Date | string, NestedDateTimeFilter>
  }

  export type BoolFilter = {
    equals?: boolean
    not?: XOR<boolean, NestedBoolFilter>
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: XOR<Role, NestedEnumRoleFilter>
  }

  export type EnumGenderFilter = {
    equals?: Gender
    in?: Enumerable<Gender>
    notIn?: Enumerable<Gender>
    not?: XOR<Gender, NestedEnumGenderFilter>
  }

  export type AddressRelationFilter = {
    is?: XOR<AddressWhereInput, null>
    isNot?: XOR<AddressWhereInput, null>
  }

  export type ContactRelationFilter = {
    is?: XOR<ContactWhereInput, null>
    isNot?: XOR<ContactWhereInput, null>
  }

  export type CurriculumRelationFilter = {
    is?: XOR<CurriculumWhereInput, null>
    isNot?: XOR<CurriculumWhereInput, null>
  }

  export type ProfileRelationFilter = {
    is?: XOR<ProfileWhereInput, null>
    isNot?: XOR<ProfileWhereInput, null>
  }

  export type VacancyListRelationFilter = {
    every?: VacancyWhereInput
    some?: VacancyWhereInput
    none?: VacancyWhereInput
  }

  export type FloatNullableFilter = {
    equals?: XOR<number, null>
    in?: XOR<Enumerable<number>, null>
    notIn?: XOR<Enumerable<number>, null>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: number | NestedFloatNullableFilter | null
  }

  export type AcademicDataRelationFilter = {
    is?: XOR<AcademicDataWhereInput, null>
    isNot?: XOR<AcademicDataWhereInput, null>
  }

  export type ExperiencesRelationFilter = {
    is?: XOR<ExperiencesWhereInput, null>
    isNot?: XOR<ExperiencesWhereInput, null>
  }

  export type StringNullableListFilter = {
    equals?: XOR<Enumerable<string>, null>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type BoolNullableFilter = {
    equals?: XOR<boolean, null>
    not?: boolean | NestedBoolNullableFilter | null
  }

  export type UserCreateOneWithoutProfileInput = {
    create?: UserCreateWithoutProfileInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: XOR<string, null>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutProfileInput = {
    create?: UserCreateWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: UserUpdateWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
  }

  export type AddressCreateOneWithoutUserInput = {
    create?: AddressCreateWithoutUserInput
    connect?: AddressWhereUniqueInput
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput
  }

  export type ContactCreateOneWithoutUserInput = {
    create?: ContactCreateWithoutUserInput
    connect?: ContactWhereUniqueInput
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput
  }

  export type CurriculumCreateOneWithoutUserInput = {
    create?: CurriculumCreateWithoutUserInput
    connect?: CurriculumWhereUniqueInput
    connectOrCreate?: CurriculumCreateOrConnectWithoutUserInput
  }

  export type ProfileCreateOneWithoutUserInput = {
    create?: ProfileCreateWithoutUserInput
    connect?: ProfileWhereUniqueInput
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
  }

  export type VacancyCreateManyWithoutInterestedInput = {
    create?: XOR<VacancyCreateWithoutInterestedInput, Enumerable<VacancyCreateWithoutInterestedInput>>
    connect?: XOR<VacancyWhereUniqueInput, Enumerable<VacancyWhereUniqueInput>>
    connectOrCreate?: XOR<VacancyCreateOrConnectWithoutInterestedInput, Enumerable<VacancyCreateOrConnectWithoutInterestedInput>>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: Gender
  }

  export type AddressUpdateOneWithoutUserInput = {
    create?: AddressCreateWithoutUserInput
    connect?: AddressWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: AddressUpdateWithoutUserInput
    upsert?: AddressUpsertWithoutUserInput
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput
  }

  export type ContactUpdateOneWithoutUserInput = {
    create?: ContactCreateWithoutUserInput
    connect?: ContactWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: ContactUpdateWithoutUserInput
    upsert?: ContactUpsertWithoutUserInput
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput
  }

  export type CurriculumUpdateOneWithoutUserInput = {
    create?: CurriculumCreateWithoutUserInput
    connect?: CurriculumWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: CurriculumUpdateWithoutUserInput
    upsert?: CurriculumUpsertWithoutUserInput
    connectOrCreate?: CurriculumCreateOrConnectWithoutUserInput
  }

  export type ProfileUpdateOneWithoutUserInput = {
    create?: ProfileCreateWithoutUserInput
    connect?: ProfileWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: ProfileUpdateWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
  }

  export type VacancyUpdateManyWithoutInterestedInput = {
    create?: XOR<VacancyCreateWithoutInterestedInput, Enumerable<VacancyCreateWithoutInterestedInput>>
    connect?: XOR<VacancyWhereUniqueInput, Enumerable<VacancyWhereUniqueInput>>
    set?: XOR<VacancyWhereUniqueInput, Enumerable<VacancyWhereUniqueInput>>
    disconnect?: XOR<VacancyWhereUniqueInput, Enumerable<VacancyWhereUniqueInput>>
    delete?: XOR<VacancyWhereUniqueInput, Enumerable<VacancyWhereUniqueInput>>
    update?: XOR<VacancyUpdateWithWhereUniqueWithoutInterestedInput, Enumerable<VacancyUpdateWithWhereUniqueWithoutInterestedInput>>
    updateMany?: XOR<VacancyUpdateManyWithWhereWithoutInterestedInput, Enumerable<VacancyUpdateManyWithWhereWithoutInterestedInput>>
    deleteMany?: XOR<VacancyScalarWhereInput, Enumerable<VacancyScalarWhereInput>>
    upsert?: XOR<VacancyUpsertWithWhereUniqueWithoutInterestedInput, Enumerable<VacancyUpsertWithWhereUniqueWithoutInterestedInput>>
    connectOrCreate?: XOR<VacancyCreateOrConnectWithoutInterestedInput, Enumerable<VacancyCreateOrConnectWithoutInterestedInput>>
  }

  export type UserCreateOneWithoutAddressInput = {
    create?: UserCreateWithoutAddressInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
  }

  export type UserUpdateOneRequiredWithoutAddressInput = {
    create?: UserCreateWithoutAddressInput
    connect?: UserWhereUniqueInput
    update?: UserUpdateWithoutAddressInput
    upsert?: UserUpsertWithoutAddressInput
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
  }

  export type UserCreateOneWithoutContactInput = {
    create?: UserCreateWithoutContactInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutContactInput
  }

  export type UserUpdateOneRequiredWithoutContactInput = {
    create?: UserCreateWithoutContactInput
    connect?: UserWhereUniqueInput
    update?: UserUpdateWithoutContactInput
    upsert?: UserUpsertWithoutContactInput
    connectOrCreate?: UserCreateOrConnectWithoutContactInput
  }

  export type CurriculumCreateOneWithoutAcademicdataInput = {
    create?: CurriculumCreateWithoutAcademicdataInput
    connect?: CurriculumWhereUniqueInput
    connectOrCreate?: CurriculumCreateOrConnectWithoutacademicdataInput
  }

  export type CurriculumUpdateOneWithoutAcademicdataInput = {
    create?: CurriculumCreateWithoutAcademicdataInput
    connect?: CurriculumWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: CurriculumUpdateWithoutAcademicdataInput
    upsert?: CurriculumUpsertWithoutAcademicdataInput
    connectOrCreate?: CurriculumCreateOrConnectWithoutacademicdataInput
  }

  export type CurriculumCreateOneWithoutExperiencesInput = {
    create?: CurriculumCreateWithoutExperiencesInput
    connect?: CurriculumWhereUniqueInput
    connectOrCreate?: CurriculumCreateOrConnectWithoutexperiencesInput
  }

  export type CurriculumUpdateOneWithoutExperiencesInput = {
    create?: CurriculumCreateWithoutExperiencesInput
    connect?: CurriculumWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: CurriculumUpdateWithoutExperiencesInput
    upsert?: CurriculumUpsertWithoutExperiencesInput
    connectOrCreate?: CurriculumCreateOrConnectWithoutexperiencesInput
  }

  export type UserCreateOneWithoutCurriculumInput = {
    create?: UserCreateWithoutCurriculumInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutCurriculumInput
  }

  export type AcademicDataCreateOneWithoutCurriculumInput = {
    create?: AcademicDataCreateWithoutCurriculumInput
    connect?: AcademicDataWhereUniqueInput
    connectOrCreate?: AcademicDataCreateOrConnectWithoutCurriculumInput
  }

  export type ExperiencesCreateOneWithoutCurriculumInput = {
    create?: ExperiencesCreateWithoutCurriculumInput
    connect?: ExperiencesWhereUniqueInput
    connectOrCreate?: ExperiencesCreateOrConnectWithoutCurriculumInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: XOR<number, null>
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutCurriculumInput = {
    create?: UserCreateWithoutCurriculumInput
    connect?: UserWhereUniqueInput
    update?: UserUpdateWithoutCurriculumInput
    upsert?: UserUpsertWithoutCurriculumInput
    connectOrCreate?: UserCreateOrConnectWithoutCurriculumInput
  }

  export type AcademicDataUpdateOneWithoutCurriculumInput = {
    create?: AcademicDataCreateWithoutCurriculumInput
    connect?: AcademicDataWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: AcademicDataUpdateWithoutCurriculumInput
    upsert?: AcademicDataUpsertWithoutCurriculumInput
    connectOrCreate?: AcademicDataCreateOrConnectWithoutCurriculumInput
  }

  export type ExperiencesUpdateOneWithoutCurriculumInput = {
    create?: ExperiencesCreateWithoutCurriculumInput
    connect?: ExperiencesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: ExperiencesUpdateWithoutCurriculumInput
    upsert?: ExperiencesUpsertWithoutCurriculumInput
    connectOrCreate?: ExperiencesCreateOrConnectWithoutCurriculumInput
  }

  export type CompanyCreatelinksInput = {
    set: Enumerable<string>
  }

  export type CompanyCreatelabellinksInput = {
    set: Enumerable<string>
  }

  export type CompanyUpdatelinksInput = {
    set: Enumerable<string>
  }

  export type CompanyUpdatelabellinksInput = {
    set: Enumerable<string>
  }

  export type AgencyCreatelinksInput = {
    set: Enumerable<string>
  }

  export type AgencyCreatelabellinksInput = {
    set: Enumerable<string>
  }

  export type AgencyUpdatelinksInput = {
    set: Enumerable<string>
  }

  export type AgencyUpdatelabellinksInput = {
    set: Enumerable<string>
  }

  export type UserCreateManyWithoutVacancyInput = {
    create?: XOR<UserCreateWithoutVacancyInput, Enumerable<UserCreateWithoutVacancyInput>>
    connect?: XOR<UserWhereUniqueInput, Enumerable<UserWhereUniqueInput>>
    connectOrCreate?: XOR<UserCreateOrConnectWithoutVacancyInput, Enumerable<UserCreateOrConnectWithoutVacancyInput>>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: XOR<boolean, null>
  }

  export type UserUpdateManyWithoutVacancyInput = {
    create?: XOR<UserCreateWithoutVacancyInput, Enumerable<UserCreateWithoutVacancyInput>>
    connect?: XOR<UserWhereUniqueInput, Enumerable<UserWhereUniqueInput>>
    set?: XOR<UserWhereUniqueInput, Enumerable<UserWhereUniqueInput>>
    disconnect?: XOR<UserWhereUniqueInput, Enumerable<UserWhereUniqueInput>>
    delete?: XOR<UserWhereUniqueInput, Enumerable<UserWhereUniqueInput>>
    update?: XOR<UserUpdateWithWhereUniqueWithoutVacancyInput, Enumerable<UserUpdateWithWhereUniqueWithoutVacancyInput>>
    updateMany?: XOR<UserUpdateManyWithWhereWithoutVacancyInput, Enumerable<UserUpdateManyWithWhereWithoutVacancyInput>>
    deleteMany?: XOR<UserScalarWhereInput, Enumerable<UserScalarWhereInput>>
    upsert?: XOR<UserUpsertWithWhereUniqueWithoutVacancyInput, Enumerable<UserUpsertWithWhereUniqueWithoutVacancyInput>>
    connectOrCreate?: XOR<UserCreateOrConnectWithoutVacancyInput, Enumerable<UserCreateOrConnectWithoutVacancyInput>>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: XOR<string, NestedStringFilter>
  }

  export type NestedStringNullableFilter = {
    equals?: XOR<string, null>
    in?: XOR<Enumerable<string>, null>
    notIn?: XOR<Enumerable<string>, null>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: string | NestedStringNullableFilter | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: XOR<number, NestedIntFilter>
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: XOR<Date | string, NestedDateTimeFilter>
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: XOR<boolean, NestedBoolFilter>
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: XOR<Role, NestedEnumRoleFilter>
  }

  export type NestedEnumGenderFilter = {
    equals?: Gender
    in?: Enumerable<Gender>
    notIn?: Enumerable<Gender>
    not?: XOR<Gender, NestedEnumGenderFilter>
  }

  export type NestedFloatNullableFilter = {
    equals?: XOR<number, null>
    in?: XOR<Enumerable<number>, null>
    notIn?: XOR<Enumerable<number>, null>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: number | NestedFloatNullableFilter | null
  }

  export type NestedBoolNullableFilter = {
    equals?: XOR<boolean, null>
    not?: boolean | NestedBoolNullableFilter | null
  }

  export type UserCreateWithoutProfileInput = {
    authenticationkey?: string
    securitykey?: string
    fullname: string
    secret: string
    avatar?: XOR<string, null>
    email: string
    cpf: string
    datebirth?: XOR<string, null>
    nickname?: XOR<string, null>
    preferencialname?: XOR<string, null>
    active?: boolean
    role?: Role
    gender: Gender
    createdat?: Date | string
    updatedat?: Date | string
    Address?: AddressCreateOneWithoutUserInput
    Contact?: ContactCreateOneWithoutUserInput
    Curriculum?: CurriculumCreateOneWithoutUserInput
    Vacancy?: VacancyCreateManyWithoutInterestedInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutProfileInput
  }

  export type UserUpdateWithoutProfileInput = {
    authenticationkey?: XOR<string, StringFieldUpdateOperationsInput>
    securitykey?: XOR<string, StringFieldUpdateOperationsInput>
    fullname?: XOR<string, StringFieldUpdateOperationsInput>
    secret?: XOR<string, StringFieldUpdateOperationsInput>
    avatar?: string | NullableStringFieldUpdateOperationsInput | null
    email?: XOR<string, StringFieldUpdateOperationsInput>
    cpf?: XOR<string, StringFieldUpdateOperationsInput>
    datebirth?: string | NullableStringFieldUpdateOperationsInput | null
    nickname?: string | NullableStringFieldUpdateOperationsInput | null
    preferencialname?: string | NullableStringFieldUpdateOperationsInput | null
    active?: XOR<boolean, BoolFieldUpdateOperationsInput>
    role?: XOR<Role, EnumRoleFieldUpdateOperationsInput>
    gender?: XOR<Gender, EnumGenderFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    Address?: AddressUpdateOneWithoutUserInput
    Contact?: ContactUpdateOneWithoutUserInput
    Curriculum?: CurriculumUpdateOneWithoutUserInput
    Vacancy?: VacancyUpdateManyWithoutInterestedInput
  }

  export type UserUpsertWithoutProfileInput = {
    update: UserUpdateWithoutProfileInput
    create: UserCreateWithoutProfileInput
  }

  export type AddressCreateWithoutUserInput = {
    id?: string
    name?: XOR<string, null>
    logradouro?: XOR<string, null>
    bairro?: XOR<string, null>
    cidade?: XOR<string, null>
    cep?: XOR<string, null>
    state?: XOR<string, null>
    createdat?: Date | string
    updatedat?: Date | string
  }

  export type AddressCreateOrConnectWithoutUserInput = {
    where: AddressWhereUniqueInput
    create: AddressCreateWithoutUserInput
  }

  export type ContactCreateWithoutUserInput = {
    id?: string
    talkto?: XOR<string, null>
    phone?: XOR<string, null>
    talktotwo?: XOR<string, null>
    phonetwo?: XOR<string, null>
    createdat?: Date | string
    updatedat?: Date | string
  }

  export type ContactCreateOrConnectWithoutUserInput = {
    where: ContactWhereUniqueInput
    create: ContactCreateWithoutUserInput
  }

  export type CurriculumCreateWithoutUserInput = {
    id?: string
    professionalprofile?: XOR<string, null>
    intendedsalary?: XOR<number, null>
    createdat?: Date | string
    updatedat?: Date | string
    academicdata?: AcademicDataCreateOneWithoutCurriculumInput
    experiences?: ExperiencesCreateOneWithoutCurriculumInput
  }

  export type CurriculumCreateOrConnectWithoutUserInput = {
    where: CurriculumWhereUniqueInput
    create: CurriculumCreateWithoutUserInput
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    bio?: XOR<string, null>
    pseudonym?: XOR<string, null>
    createdat?: Date | string
    updatedat?: Date | string
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: ProfileCreateWithoutUserInput
  }

  export type VacancyCreateWithoutInterestedInput = {
    avatar?: XOR<string, null>
    userid: number
    active?: XOR<boolean, null>
    name?: XOR<string, null>
    office?: XOR<string, null>
    logo?: XOR<string, null>
    description?: XOR<string, null>
  }

  export type VacancyCreateOrConnectWithoutInterestedInput = {
    where: VacancyWhereUniqueInput
    create: VacancyCreateWithoutInterestedInput
  }

  export type AddressUpdateWithoutUserInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    name?: string | NullableStringFieldUpdateOperationsInput | null
    logradouro?: string | NullableStringFieldUpdateOperationsInput | null
    bairro?: string | NullableStringFieldUpdateOperationsInput | null
    cidade?: string | NullableStringFieldUpdateOperationsInput | null
    cep?: string | NullableStringFieldUpdateOperationsInput | null
    state?: string | NullableStringFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type AddressUpsertWithoutUserInput = {
    update: AddressUpdateWithoutUserInput
    create: AddressCreateWithoutUserInput
  }

  export type ContactUpdateWithoutUserInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    talkto?: string | NullableStringFieldUpdateOperationsInput | null
    phone?: string | NullableStringFieldUpdateOperationsInput | null
    talktotwo?: string | NullableStringFieldUpdateOperationsInput | null
    phonetwo?: string | NullableStringFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type ContactUpsertWithoutUserInput = {
    update: ContactUpdateWithoutUserInput
    create: ContactCreateWithoutUserInput
  }

  export type CurriculumUpdateWithoutUserInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    professionalprofile?: string | NullableStringFieldUpdateOperationsInput | null
    intendedsalary?: number | NullableFloatFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    academicdata?: AcademicDataUpdateOneWithoutCurriculumInput
    experiences?: ExperiencesUpdateOneWithoutCurriculumInput
  }

  export type CurriculumUpsertWithoutUserInput = {
    update: CurriculumUpdateWithoutUserInput
    create: CurriculumCreateWithoutUserInput
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    bio?: string | NullableStringFieldUpdateOperationsInput | null
    pseudonym?: string | NullableStringFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type ProfileUpsertWithoutUserInput = {
    update: ProfileUpdateWithoutUserInput
    create: ProfileCreateWithoutUserInput
  }

  export type VacancyUpdateWithWhereUniqueWithoutInterestedInput = {
    where: VacancyWhereUniqueInput
    data: VacancyUpdateWithoutInterestedInput
  }

  export type VacancyUpdateManyWithWhereWithoutInterestedInput = {
    where: VacancyScalarWhereInput
    data: VacancyUpdateManyMutationInput
  }

  export type VacancyScalarWhereInput = {
    AND?: XOR<VacancyScalarWhereInput, Enumerable<VacancyScalarWhereInput>>
    OR?: XOR<VacancyScalarWhereInput, Enumerable<VacancyScalarWhereInput>>
    NOT?: XOR<VacancyScalarWhereInput, Enumerable<VacancyScalarWhereInput>>
    codeVacancy?: XOR<IntFilter, number>
    avatar?: StringNullableFilter | string | null
    userid?: XOR<IntFilter, number>
    active?: BoolNullableFilter | boolean | null
    name?: StringNullableFilter | string | null
    office?: StringNullableFilter | string | null
    logo?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
  }

  export type VacancyUpsertWithWhereUniqueWithoutInterestedInput = {
    where: VacancyWhereUniqueInput
    update: VacancyUpdateWithoutInterestedInput
    create: VacancyCreateWithoutInterestedInput
  }

  export type UserCreateWithoutAddressInput = {
    authenticationkey?: string
    securitykey?: string
    fullname: string
    secret: string
    avatar?: XOR<string, null>
    email: string
    cpf: string
    datebirth?: XOR<string, null>
    nickname?: XOR<string, null>
    preferencialname?: XOR<string, null>
    active?: boolean
    role?: Role
    gender: Gender
    createdat?: Date | string
    updatedat?: Date | string
    Contact?: ContactCreateOneWithoutUserInput
    Curriculum?: CurriculumCreateOneWithoutUserInput
    Profile?: ProfileCreateOneWithoutUserInput
    Vacancy?: VacancyCreateManyWithoutInterestedInput
  }

  export type UserCreateOrConnectWithoutAddressInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutAddressInput
  }

  export type UserUpdateWithoutAddressInput = {
    authenticationkey?: XOR<string, StringFieldUpdateOperationsInput>
    securitykey?: XOR<string, StringFieldUpdateOperationsInput>
    fullname?: XOR<string, StringFieldUpdateOperationsInput>
    secret?: XOR<string, StringFieldUpdateOperationsInput>
    avatar?: string | NullableStringFieldUpdateOperationsInput | null
    email?: XOR<string, StringFieldUpdateOperationsInput>
    cpf?: XOR<string, StringFieldUpdateOperationsInput>
    datebirth?: string | NullableStringFieldUpdateOperationsInput | null
    nickname?: string | NullableStringFieldUpdateOperationsInput | null
    preferencialname?: string | NullableStringFieldUpdateOperationsInput | null
    active?: XOR<boolean, BoolFieldUpdateOperationsInput>
    role?: XOR<Role, EnumRoleFieldUpdateOperationsInput>
    gender?: XOR<Gender, EnumGenderFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    Contact?: ContactUpdateOneWithoutUserInput
    Curriculum?: CurriculumUpdateOneWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Vacancy?: VacancyUpdateManyWithoutInterestedInput
  }

  export type UserUpsertWithoutAddressInput = {
    update: UserUpdateWithoutAddressInput
    create: UserCreateWithoutAddressInput
  }

  export type UserCreateWithoutContactInput = {
    authenticationkey?: string
    securitykey?: string
    fullname: string
    secret: string
    avatar?: XOR<string, null>
    email: string
    cpf: string
    datebirth?: XOR<string, null>
    nickname?: XOR<string, null>
    preferencialname?: XOR<string, null>
    active?: boolean
    role?: Role
    gender: Gender
    createdat?: Date | string
    updatedat?: Date | string
    Address?: AddressCreateOneWithoutUserInput
    Curriculum?: CurriculumCreateOneWithoutUserInput
    Profile?: ProfileCreateOneWithoutUserInput
    Vacancy?: VacancyCreateManyWithoutInterestedInput
  }

  export type UserCreateOrConnectWithoutContactInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutContactInput
  }

  export type UserUpdateWithoutContactInput = {
    authenticationkey?: XOR<string, StringFieldUpdateOperationsInput>
    securitykey?: XOR<string, StringFieldUpdateOperationsInput>
    fullname?: XOR<string, StringFieldUpdateOperationsInput>
    secret?: XOR<string, StringFieldUpdateOperationsInput>
    avatar?: string | NullableStringFieldUpdateOperationsInput | null
    email?: XOR<string, StringFieldUpdateOperationsInput>
    cpf?: XOR<string, StringFieldUpdateOperationsInput>
    datebirth?: string | NullableStringFieldUpdateOperationsInput | null
    nickname?: string | NullableStringFieldUpdateOperationsInput | null
    preferencialname?: string | NullableStringFieldUpdateOperationsInput | null
    active?: XOR<boolean, BoolFieldUpdateOperationsInput>
    role?: XOR<Role, EnumRoleFieldUpdateOperationsInput>
    gender?: XOR<Gender, EnumGenderFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    Address?: AddressUpdateOneWithoutUserInput
    Curriculum?: CurriculumUpdateOneWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Vacancy?: VacancyUpdateManyWithoutInterestedInput
  }

  export type UserUpsertWithoutContactInput = {
    update: UserUpdateWithoutContactInput
    create: UserCreateWithoutContactInput
  }

  export type CurriculumCreateWithoutAcademicdataInput = {
    id?: string
    professionalprofile?: XOR<string, null>
    intendedsalary?: XOR<number, null>
    createdat?: Date | string
    updatedat?: Date | string
    User: UserCreateOneWithoutCurriculumInput
    experiences?: ExperiencesCreateOneWithoutCurriculumInput
  }

  export type CurriculumCreateOrConnectWithoutacademicdataInput = {
    where: CurriculumWhereUniqueInput
    create: CurriculumCreateWithoutAcademicdataInput
  }

  export type CurriculumUpdateWithoutAcademicdataInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    professionalprofile?: string | NullableStringFieldUpdateOperationsInput | null
    intendedsalary?: number | NullableFloatFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    User?: UserUpdateOneRequiredWithoutCurriculumInput
    experiences?: ExperiencesUpdateOneWithoutCurriculumInput
  }

  export type CurriculumUpsertWithoutAcademicdataInput = {
    update: CurriculumUpdateWithoutAcademicdataInput
    create: CurriculumCreateWithoutAcademicdataInput
  }

  export type CurriculumCreateWithoutExperiencesInput = {
    id?: string
    professionalprofile?: XOR<string, null>
    intendedsalary?: XOR<number, null>
    createdat?: Date | string
    updatedat?: Date | string
    User: UserCreateOneWithoutCurriculumInput
    academicdata?: AcademicDataCreateOneWithoutCurriculumInput
  }

  export type CurriculumCreateOrConnectWithoutexperiencesInput = {
    where: CurriculumWhereUniqueInput
    create: CurriculumCreateWithoutExperiencesInput
  }

  export type CurriculumUpdateWithoutExperiencesInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    professionalprofile?: string | NullableStringFieldUpdateOperationsInput | null
    intendedsalary?: number | NullableFloatFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    User?: UserUpdateOneRequiredWithoutCurriculumInput
    academicdata?: AcademicDataUpdateOneWithoutCurriculumInput
  }

  export type CurriculumUpsertWithoutExperiencesInput = {
    update: CurriculumUpdateWithoutExperiencesInput
    create: CurriculumCreateWithoutExperiencesInput
  }

  export type UserCreateWithoutCurriculumInput = {
    authenticationkey?: string
    securitykey?: string
    fullname: string
    secret: string
    avatar?: XOR<string, null>
    email: string
    cpf: string
    datebirth?: XOR<string, null>
    nickname?: XOR<string, null>
    preferencialname?: XOR<string, null>
    active?: boolean
    role?: Role
    gender: Gender
    createdat?: Date | string
    updatedat?: Date | string
    Address?: AddressCreateOneWithoutUserInput
    Contact?: ContactCreateOneWithoutUserInput
    Profile?: ProfileCreateOneWithoutUserInput
    Vacancy?: VacancyCreateManyWithoutInterestedInput
  }

  export type UserCreateOrConnectWithoutCurriculumInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutCurriculumInput
  }

  export type AcademicDataCreateWithoutCurriculumInput = {
    id?: string
    createdat?: Date | string
    updatedat?: Date | string
  }

  export type AcademicDataCreateOrConnectWithoutCurriculumInput = {
    where: AcademicDataWhereUniqueInput
    create: AcademicDataCreateWithoutCurriculumInput
  }

  export type ExperiencesCreateWithoutCurriculumInput = {
    id?: string
    description?: XOR<string, null>
    createdat?: Date | string
    updatedat?: Date | string
  }

  export type ExperiencesCreateOrConnectWithoutCurriculumInput = {
    where: ExperiencesWhereUniqueInput
    create: ExperiencesCreateWithoutCurriculumInput
  }

  export type UserUpdateWithoutCurriculumInput = {
    authenticationkey?: XOR<string, StringFieldUpdateOperationsInput>
    securitykey?: XOR<string, StringFieldUpdateOperationsInput>
    fullname?: XOR<string, StringFieldUpdateOperationsInput>
    secret?: XOR<string, StringFieldUpdateOperationsInput>
    avatar?: string | NullableStringFieldUpdateOperationsInput | null
    email?: XOR<string, StringFieldUpdateOperationsInput>
    cpf?: XOR<string, StringFieldUpdateOperationsInput>
    datebirth?: string | NullableStringFieldUpdateOperationsInput | null
    nickname?: string | NullableStringFieldUpdateOperationsInput | null
    preferencialname?: string | NullableStringFieldUpdateOperationsInput | null
    active?: XOR<boolean, BoolFieldUpdateOperationsInput>
    role?: XOR<Role, EnumRoleFieldUpdateOperationsInput>
    gender?: XOR<Gender, EnumGenderFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    Address?: AddressUpdateOneWithoutUserInput
    Contact?: ContactUpdateOneWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Vacancy?: VacancyUpdateManyWithoutInterestedInput
  }

  export type UserUpsertWithoutCurriculumInput = {
    update: UserUpdateWithoutCurriculumInput
    create: UserCreateWithoutCurriculumInput
  }

  export type AcademicDataUpdateWithoutCurriculumInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type AcademicDataUpsertWithoutCurriculumInput = {
    update: AcademicDataUpdateWithoutCurriculumInput
    create: AcademicDataCreateWithoutCurriculumInput
  }

  export type ExperiencesUpdateWithoutCurriculumInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    description?: string | NullableStringFieldUpdateOperationsInput | null
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type ExperiencesUpsertWithoutCurriculumInput = {
    update: ExperiencesUpdateWithoutCurriculumInput
    create: ExperiencesCreateWithoutCurriculumInput
  }

  export type UserCreateWithoutVacancyInput = {
    authenticationkey?: string
    securitykey?: string
    fullname: string
    secret: string
    avatar?: XOR<string, null>
    email: string
    cpf: string
    datebirth?: XOR<string, null>
    nickname?: XOR<string, null>
    preferencialname?: XOR<string, null>
    active?: boolean
    role?: Role
    gender: Gender
    createdat?: Date | string
    updatedat?: Date | string
    Address?: AddressCreateOneWithoutUserInput
    Contact?: ContactCreateOneWithoutUserInput
    Curriculum?: CurriculumCreateOneWithoutUserInput
    Profile?: ProfileCreateOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVacancyInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutVacancyInput
  }

  export type UserUpdateWithWhereUniqueWithoutVacancyInput = {
    where: UserWhereUniqueInput
    data: UserUpdateWithoutVacancyInput
  }

  export type UserUpdateManyWithWhereWithoutVacancyInput = {
    where: UserScalarWhereInput
    data: UserUpdateManyMutationInput
  }

  export type UserScalarWhereInput = {
    AND?: XOR<UserScalarWhereInput, Enumerable<UserScalarWhereInput>>
    OR?: XOR<UserScalarWhereInput, Enumerable<UserScalarWhereInput>>
    NOT?: XOR<UserScalarWhereInput, Enumerable<UserScalarWhereInput>>
    id?: XOR<IntFilter, number>
    authenticationkey?: XOR<StringFilter, string>
    securitykey?: XOR<StringFilter, string>
    fullname?: XOR<StringFilter, string>
    secret?: XOR<StringFilter, string>
    avatar?: StringNullableFilter | string | null
    email?: XOR<StringFilter, string>
    cpf?: XOR<StringFilter, string>
    datebirth?: StringNullableFilter | string | null
    nickname?: StringNullableFilter | string | null
    preferencialname?: StringNullableFilter | string | null
    active?: XOR<BoolFilter, boolean>
    role?: XOR<EnumRoleFilter, Role>
    gender?: XOR<EnumGenderFilter, Gender>
    createdat?: XOR<DateTimeFilter, Date | string>
    updatedat?: XOR<DateTimeFilter, Date | string>
  }

  export type UserUpsertWithWhereUniqueWithoutVacancyInput = {
    where: UserWhereUniqueInput
    update: UserUpdateWithoutVacancyInput
    create: UserCreateWithoutVacancyInput
  }

  export type VacancyUpdateWithoutInterestedInput = {
    avatar?: string | NullableStringFieldUpdateOperationsInput | null
    userid?: XOR<number, IntFieldUpdateOperationsInput>
    active?: boolean | NullableBoolFieldUpdateOperationsInput | null
    name?: string | NullableStringFieldUpdateOperationsInput | null
    office?: string | NullableStringFieldUpdateOperationsInput | null
    logo?: string | NullableStringFieldUpdateOperationsInput | null
    description?: string | NullableStringFieldUpdateOperationsInput | null
  }

  export type UserUpdateWithoutVacancyInput = {
    authenticationkey?: XOR<string, StringFieldUpdateOperationsInput>
    securitykey?: XOR<string, StringFieldUpdateOperationsInput>
    fullname?: XOR<string, StringFieldUpdateOperationsInput>
    secret?: XOR<string, StringFieldUpdateOperationsInput>
    avatar?: string | NullableStringFieldUpdateOperationsInput | null
    email?: XOR<string, StringFieldUpdateOperationsInput>
    cpf?: XOR<string, StringFieldUpdateOperationsInput>
    datebirth?: string | NullableStringFieldUpdateOperationsInput | null
    nickname?: string | NullableStringFieldUpdateOperationsInput | null
    preferencialname?: string | NullableStringFieldUpdateOperationsInput | null
    active?: XOR<boolean, BoolFieldUpdateOperationsInput>
    role?: XOR<Role, EnumRoleFieldUpdateOperationsInput>
    gender?: XOR<Gender, EnumGenderFieldUpdateOperationsInput>
    createdat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    updatedat?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    Address?: AddressUpdateOneWithoutUserInput
    Contact?: ContactUpdateOneWithoutUserInput
    Curriculum?: CurriculumUpdateOneWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatiblity introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.ProfileDistinctFieldEnum`
 */
export type ProfileDistinctFieldEnum = Prisma.ProfileDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.UserDistinctFieldEnum`
 */
export type UserDistinctFieldEnum = Prisma.UserDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.AddressDistinctFieldEnum`
 */
export type AddressDistinctFieldEnum = Prisma.AddressDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.ContactDistinctFieldEnum`
 */
export type ContactDistinctFieldEnum = Prisma.ContactDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.AcademicDataDistinctFieldEnum`
 */
export type AcademicDataDistinctFieldEnum = Prisma.AcademicDataDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.ExperiencesDistinctFieldEnum`
 */
export type ExperiencesDistinctFieldEnum = Prisma.ExperiencesDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.CurriculumDistinctFieldEnum`
 */
export type CurriculumDistinctFieldEnum = Prisma.CurriculumDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.CompanyDistinctFieldEnum`
 */
export type CompanyDistinctFieldEnum = Prisma.CompanyDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.AgencyDistinctFieldEnum`
 */
export type AgencyDistinctFieldEnum = Prisma.AgencyDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.VacancyDistinctFieldEnum`
 */
export type VacancyDistinctFieldEnum = Prisma.VacancyDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.QueryMode`
 */
export type QueryMode = Prisma.QueryMode

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateProfile`
 */
export type AggregateProfile = Prisma.AggregateProfile

/**
 * @deprecated Renamed to `Prisma.ProfileAvgAggregateOutputType`
 */
export type ProfileAvgAggregateOutputType = Prisma.ProfileAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProfileSumAggregateOutputType`
 */
export type ProfileSumAggregateOutputType = Prisma.ProfileSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProfileMinAggregateOutputType`
 */
export type ProfileMinAggregateOutputType = Prisma.ProfileMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProfileMaxAggregateOutputType`
 */
export type ProfileMaxAggregateOutputType = Prisma.ProfileMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateProfileArgs`
 */
export type AggregateProfileArgs = Prisma.AggregateProfileArgs

/**
 * @deprecated Renamed to `Prisma.ProfileAvgAggregateInputType`
 */
export type ProfileAvgAggregateInputType = Prisma.ProfileAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProfileSumAggregateInputType`
 */
export type ProfileSumAggregateInputType = Prisma.ProfileSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProfileMinAggregateInputType`
 */
export type ProfileMinAggregateInputType = Prisma.ProfileMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProfileMaxAggregateInputType`
 */
export type ProfileMaxAggregateInputType = Prisma.ProfileMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProfileSelect`
 */
export type ProfileSelect = Prisma.ProfileSelect

/**
 * @deprecated Renamed to `Prisma.ProfileInclude`
 */
export type ProfileInclude = Prisma.ProfileInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueProfileArgs`
 */
export type FindUniqueProfileArgs = Prisma.FindUniqueProfileArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstProfileArgs`
 */
export type FindFirstProfileArgs = Prisma.FindFirstProfileArgs

/**
 * @deprecated Renamed to `Prisma.FindManyProfileArgs`
 */
export type FindManyProfileArgs = Prisma.FindManyProfileArgs

/**
 * @deprecated Renamed to `Prisma.ProfileCreateArgs`
 */
export type ProfileCreateArgs = Prisma.ProfileCreateArgs

/**
 * @deprecated Renamed to `Prisma.ProfileUpdateArgs`
 */
export type ProfileUpdateArgs = Prisma.ProfileUpdateArgs

/**
 * @deprecated Renamed to `Prisma.ProfileUpdateManyArgs`
 */
export type ProfileUpdateManyArgs = Prisma.ProfileUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.ProfileUpsertArgs`
 */
export type ProfileUpsertArgs = Prisma.ProfileUpsertArgs

/**
 * @deprecated Renamed to `Prisma.ProfileDeleteArgs`
 */
export type ProfileDeleteArgs = Prisma.ProfileDeleteArgs

/**
 * @deprecated Renamed to `Prisma.ProfileDeleteManyArgs`
 */
export type ProfileDeleteManyArgs = Prisma.ProfileDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateUser`
 */
export type AggregateUser = Prisma.AggregateUser

/**
 * @deprecated Renamed to `Prisma.UserAvgAggregateOutputType`
 */
export type UserAvgAggregateOutputType = Prisma.UserAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserSumAggregateOutputType`
 */
export type UserSumAggregateOutputType = Prisma.UserSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateOutputType`
 */
export type UserMinAggregateOutputType = Prisma.UserMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateOutputType`
 */
export type UserMaxAggregateOutputType = Prisma.UserMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateUserArgs`
 */
export type AggregateUserArgs = Prisma.AggregateUserArgs

/**
 * @deprecated Renamed to `Prisma.UserAvgAggregateInputType`
 */
export type UserAvgAggregateInputType = Prisma.UserAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserSumAggregateInputType`
 */
export type UserSumAggregateInputType = Prisma.UserSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateInputType`
 */
export type UserMinAggregateInputType = Prisma.UserMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateInputType`
 */
export type UserMaxAggregateInputType = Prisma.UserMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserSelect`
 */
export type UserSelect = Prisma.UserSelect

/**
 * @deprecated Renamed to `Prisma.UserInclude`
 */
export type UserInclude = Prisma.UserInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueUserArgs`
 */
export type FindUniqueUserArgs = Prisma.FindUniqueUserArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstUserArgs`
 */
export type FindFirstUserArgs = Prisma.FindFirstUserArgs

/**
 * @deprecated Renamed to `Prisma.FindManyUserArgs`
 */
export type FindManyUserArgs = Prisma.FindManyUserArgs

/**
 * @deprecated Renamed to `Prisma.UserCreateArgs`
 */
export type UserCreateArgs = Prisma.UserCreateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateArgs`
 */
export type UserUpdateArgs = Prisma.UserUpdateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyArgs`
 */
export type UserUpdateManyArgs = Prisma.UserUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.UserUpsertArgs`
 */
export type UserUpsertArgs = Prisma.UserUpsertArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteArgs`
 */
export type UserDeleteArgs = Prisma.UserDeleteArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteManyArgs`
 */
export type UserDeleteManyArgs = Prisma.UserDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateAddress`
 */
export type AggregateAddress = Prisma.AggregateAddress

/**
 * @deprecated Renamed to `Prisma.AddressAvgAggregateOutputType`
 */
export type AddressAvgAggregateOutputType = Prisma.AddressAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AddressSumAggregateOutputType`
 */
export type AddressSumAggregateOutputType = Prisma.AddressSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AddressMinAggregateOutputType`
 */
export type AddressMinAggregateOutputType = Prisma.AddressMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AddressMaxAggregateOutputType`
 */
export type AddressMaxAggregateOutputType = Prisma.AddressMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateAddressArgs`
 */
export type AggregateAddressArgs = Prisma.AggregateAddressArgs

/**
 * @deprecated Renamed to `Prisma.AddressAvgAggregateInputType`
 */
export type AddressAvgAggregateInputType = Prisma.AddressAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AddressSumAggregateInputType`
 */
export type AddressSumAggregateInputType = Prisma.AddressSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AddressMinAggregateInputType`
 */
export type AddressMinAggregateInputType = Prisma.AddressMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AddressMaxAggregateInputType`
 */
export type AddressMaxAggregateInputType = Prisma.AddressMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AddressSelect`
 */
export type AddressSelect = Prisma.AddressSelect

/**
 * @deprecated Renamed to `Prisma.AddressInclude`
 */
export type AddressInclude = Prisma.AddressInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueAddressArgs`
 */
export type FindUniqueAddressArgs = Prisma.FindUniqueAddressArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstAddressArgs`
 */
export type FindFirstAddressArgs = Prisma.FindFirstAddressArgs

/**
 * @deprecated Renamed to `Prisma.FindManyAddressArgs`
 */
export type FindManyAddressArgs = Prisma.FindManyAddressArgs

/**
 * @deprecated Renamed to `Prisma.AddressCreateArgs`
 */
export type AddressCreateArgs = Prisma.AddressCreateArgs

/**
 * @deprecated Renamed to `Prisma.AddressUpdateArgs`
 */
export type AddressUpdateArgs = Prisma.AddressUpdateArgs

/**
 * @deprecated Renamed to `Prisma.AddressUpdateManyArgs`
 */
export type AddressUpdateManyArgs = Prisma.AddressUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.AddressUpsertArgs`
 */
export type AddressUpsertArgs = Prisma.AddressUpsertArgs

/**
 * @deprecated Renamed to `Prisma.AddressDeleteArgs`
 */
export type AddressDeleteArgs = Prisma.AddressDeleteArgs

/**
 * @deprecated Renamed to `Prisma.AddressDeleteManyArgs`
 */
export type AddressDeleteManyArgs = Prisma.AddressDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateContact`
 */
export type AggregateContact = Prisma.AggregateContact

/**
 * @deprecated Renamed to `Prisma.ContactAvgAggregateOutputType`
 */
export type ContactAvgAggregateOutputType = Prisma.ContactAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ContactSumAggregateOutputType`
 */
export type ContactSumAggregateOutputType = Prisma.ContactSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ContactMinAggregateOutputType`
 */
export type ContactMinAggregateOutputType = Prisma.ContactMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ContactMaxAggregateOutputType`
 */
export type ContactMaxAggregateOutputType = Prisma.ContactMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateContactArgs`
 */
export type AggregateContactArgs = Prisma.AggregateContactArgs

/**
 * @deprecated Renamed to `Prisma.ContactAvgAggregateInputType`
 */
export type ContactAvgAggregateInputType = Prisma.ContactAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContactSumAggregateInputType`
 */
export type ContactSumAggregateInputType = Prisma.ContactSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContactMinAggregateInputType`
 */
export type ContactMinAggregateInputType = Prisma.ContactMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContactMaxAggregateInputType`
 */
export type ContactMaxAggregateInputType = Prisma.ContactMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContactSelect`
 */
export type ContactSelect = Prisma.ContactSelect

/**
 * @deprecated Renamed to `Prisma.ContactInclude`
 */
export type ContactInclude = Prisma.ContactInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueContactArgs`
 */
export type FindUniqueContactArgs = Prisma.FindUniqueContactArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstContactArgs`
 */
export type FindFirstContactArgs = Prisma.FindFirstContactArgs

/**
 * @deprecated Renamed to `Prisma.FindManyContactArgs`
 */
export type FindManyContactArgs = Prisma.FindManyContactArgs

/**
 * @deprecated Renamed to `Prisma.ContactCreateArgs`
 */
export type ContactCreateArgs = Prisma.ContactCreateArgs

/**
 * @deprecated Renamed to `Prisma.ContactUpdateArgs`
 */
export type ContactUpdateArgs = Prisma.ContactUpdateArgs

/**
 * @deprecated Renamed to `Prisma.ContactUpdateManyArgs`
 */
export type ContactUpdateManyArgs = Prisma.ContactUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.ContactUpsertArgs`
 */
export type ContactUpsertArgs = Prisma.ContactUpsertArgs

/**
 * @deprecated Renamed to `Prisma.ContactDeleteArgs`
 */
export type ContactDeleteArgs = Prisma.ContactDeleteArgs

/**
 * @deprecated Renamed to `Prisma.ContactDeleteManyArgs`
 */
export type ContactDeleteManyArgs = Prisma.ContactDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateAcademicData`
 */
export type AggregateAcademicData = Prisma.AggregateAcademicData

/**
 * @deprecated Renamed to `Prisma.AggregateAcademicDataArgs`
 */
export type AggregateAcademicDataArgs = Prisma.AggregateAcademicDataArgs

/**
 * @deprecated Renamed to `Prisma.AcademicDataSelect`
 */
export type AcademicDataSelect = Prisma.AcademicDataSelect

/**
 * @deprecated Renamed to `Prisma.AcademicDataInclude`
 */
export type AcademicDataInclude = Prisma.AcademicDataInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueAcademicDataArgs`
 */
export type FindUniqueAcademicDataArgs = Prisma.FindUniqueAcademicDataArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstAcademicDataArgs`
 */
export type FindFirstAcademicDataArgs = Prisma.FindFirstAcademicDataArgs

/**
 * @deprecated Renamed to `Prisma.FindManyAcademicDataArgs`
 */
export type FindManyAcademicDataArgs = Prisma.FindManyAcademicDataArgs

/**
 * @deprecated Renamed to `Prisma.AcademicDataCreateArgs`
 */
export type AcademicDataCreateArgs = Prisma.AcademicDataCreateArgs

/**
 * @deprecated Renamed to `Prisma.AcademicDataUpdateArgs`
 */
export type AcademicDataUpdateArgs = Prisma.AcademicDataUpdateArgs

/**
 * @deprecated Renamed to `Prisma.AcademicDataUpdateManyArgs`
 */
export type AcademicDataUpdateManyArgs = Prisma.AcademicDataUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.AcademicDataUpsertArgs`
 */
export type AcademicDataUpsertArgs = Prisma.AcademicDataUpsertArgs

/**
 * @deprecated Renamed to `Prisma.AcademicDataDeleteArgs`
 */
export type AcademicDataDeleteArgs = Prisma.AcademicDataDeleteArgs

/**
 * @deprecated Renamed to `Prisma.AcademicDataDeleteManyArgs`
 */
export type AcademicDataDeleteManyArgs = Prisma.AcademicDataDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateExperiences`
 */
export type AggregateExperiences = Prisma.AggregateExperiences

/**
 * @deprecated Renamed to `Prisma.AggregateExperiencesArgs`
 */
export type AggregateExperiencesArgs = Prisma.AggregateExperiencesArgs

/**
 * @deprecated Renamed to `Prisma.ExperiencesSelect`
 */
export type ExperiencesSelect = Prisma.ExperiencesSelect

/**
 * @deprecated Renamed to `Prisma.ExperiencesInclude`
 */
export type ExperiencesInclude = Prisma.ExperiencesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueExperiencesArgs`
 */
export type FindUniqueExperiencesArgs = Prisma.FindUniqueExperiencesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstExperiencesArgs`
 */
export type FindFirstExperiencesArgs = Prisma.FindFirstExperiencesArgs

/**
 * @deprecated Renamed to `Prisma.FindManyExperiencesArgs`
 */
export type FindManyExperiencesArgs = Prisma.FindManyExperiencesArgs

/**
 * @deprecated Renamed to `Prisma.ExperiencesCreateArgs`
 */
export type ExperiencesCreateArgs = Prisma.ExperiencesCreateArgs

/**
 * @deprecated Renamed to `Prisma.ExperiencesUpdateArgs`
 */
export type ExperiencesUpdateArgs = Prisma.ExperiencesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.ExperiencesUpdateManyArgs`
 */
export type ExperiencesUpdateManyArgs = Prisma.ExperiencesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.ExperiencesUpsertArgs`
 */
export type ExperiencesUpsertArgs = Prisma.ExperiencesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.ExperiencesDeleteArgs`
 */
export type ExperiencesDeleteArgs = Prisma.ExperiencesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.ExperiencesDeleteManyArgs`
 */
export type ExperiencesDeleteManyArgs = Prisma.ExperiencesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateCurriculum`
 */
export type AggregateCurriculum = Prisma.AggregateCurriculum

/**
 * @deprecated Renamed to `Prisma.CurriculumAvgAggregateOutputType`
 */
export type CurriculumAvgAggregateOutputType = Prisma.CurriculumAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CurriculumSumAggregateOutputType`
 */
export type CurriculumSumAggregateOutputType = Prisma.CurriculumSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CurriculumMinAggregateOutputType`
 */
export type CurriculumMinAggregateOutputType = Prisma.CurriculumMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CurriculumMaxAggregateOutputType`
 */
export type CurriculumMaxAggregateOutputType = Prisma.CurriculumMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateCurriculumArgs`
 */
export type AggregateCurriculumArgs = Prisma.AggregateCurriculumArgs

/**
 * @deprecated Renamed to `Prisma.CurriculumAvgAggregateInputType`
 */
export type CurriculumAvgAggregateInputType = Prisma.CurriculumAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CurriculumSumAggregateInputType`
 */
export type CurriculumSumAggregateInputType = Prisma.CurriculumSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CurriculumMinAggregateInputType`
 */
export type CurriculumMinAggregateInputType = Prisma.CurriculumMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CurriculumMaxAggregateInputType`
 */
export type CurriculumMaxAggregateInputType = Prisma.CurriculumMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CurriculumSelect`
 */
export type CurriculumSelect = Prisma.CurriculumSelect

/**
 * @deprecated Renamed to `Prisma.CurriculumInclude`
 */
export type CurriculumInclude = Prisma.CurriculumInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueCurriculumArgs`
 */
export type FindUniqueCurriculumArgs = Prisma.FindUniqueCurriculumArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstCurriculumArgs`
 */
export type FindFirstCurriculumArgs = Prisma.FindFirstCurriculumArgs

/**
 * @deprecated Renamed to `Prisma.FindManyCurriculumArgs`
 */
export type FindManyCurriculumArgs = Prisma.FindManyCurriculumArgs

/**
 * @deprecated Renamed to `Prisma.CurriculumCreateArgs`
 */
export type CurriculumCreateArgs = Prisma.CurriculumCreateArgs

/**
 * @deprecated Renamed to `Prisma.CurriculumUpdateArgs`
 */
export type CurriculumUpdateArgs = Prisma.CurriculumUpdateArgs

/**
 * @deprecated Renamed to `Prisma.CurriculumUpdateManyArgs`
 */
export type CurriculumUpdateManyArgs = Prisma.CurriculumUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.CurriculumUpsertArgs`
 */
export type CurriculumUpsertArgs = Prisma.CurriculumUpsertArgs

/**
 * @deprecated Renamed to `Prisma.CurriculumDeleteArgs`
 */
export type CurriculumDeleteArgs = Prisma.CurriculumDeleteArgs

/**
 * @deprecated Renamed to `Prisma.CurriculumDeleteManyArgs`
 */
export type CurriculumDeleteManyArgs = Prisma.CurriculumDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateCompany`
 */
export type AggregateCompany = Prisma.AggregateCompany

/**
 * @deprecated Renamed to `Prisma.AggregateCompanyArgs`
 */
export type AggregateCompanyArgs = Prisma.AggregateCompanyArgs

/**
 * @deprecated Renamed to `Prisma.CompanySelect`
 */
export type CompanySelect = Prisma.CompanySelect

/**
 * @deprecated Renamed to `Prisma.FindUniqueCompanyArgs`
 */
export type FindUniqueCompanyArgs = Prisma.FindUniqueCompanyArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstCompanyArgs`
 */
export type FindFirstCompanyArgs = Prisma.FindFirstCompanyArgs

/**
 * @deprecated Renamed to `Prisma.FindManyCompanyArgs`
 */
export type FindManyCompanyArgs = Prisma.FindManyCompanyArgs

/**
 * @deprecated Renamed to `Prisma.CompanyCreateArgs`
 */
export type CompanyCreateArgs = Prisma.CompanyCreateArgs

/**
 * @deprecated Renamed to `Prisma.CompanyUpdateArgs`
 */
export type CompanyUpdateArgs = Prisma.CompanyUpdateArgs

/**
 * @deprecated Renamed to `Prisma.CompanyUpdateManyArgs`
 */
export type CompanyUpdateManyArgs = Prisma.CompanyUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.CompanyUpsertArgs`
 */
export type CompanyUpsertArgs = Prisma.CompanyUpsertArgs

/**
 * @deprecated Renamed to `Prisma.CompanyDeleteArgs`
 */
export type CompanyDeleteArgs = Prisma.CompanyDeleteArgs

/**
 * @deprecated Renamed to `Prisma.CompanyDeleteManyArgs`
 */
export type CompanyDeleteManyArgs = Prisma.CompanyDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateAgency`
 */
export type AggregateAgency = Prisma.AggregateAgency

/**
 * @deprecated Renamed to `Prisma.AggregateAgencyArgs`
 */
export type AggregateAgencyArgs = Prisma.AggregateAgencyArgs

/**
 * @deprecated Renamed to `Prisma.AgencySelect`
 */
export type AgencySelect = Prisma.AgencySelect

/**
 * @deprecated Renamed to `Prisma.FindUniqueAgencyArgs`
 */
export type FindUniqueAgencyArgs = Prisma.FindUniqueAgencyArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstAgencyArgs`
 */
export type FindFirstAgencyArgs = Prisma.FindFirstAgencyArgs

/**
 * @deprecated Renamed to `Prisma.FindManyAgencyArgs`
 */
export type FindManyAgencyArgs = Prisma.FindManyAgencyArgs

/**
 * @deprecated Renamed to `Prisma.AgencyCreateArgs`
 */
export type AgencyCreateArgs = Prisma.AgencyCreateArgs

/**
 * @deprecated Renamed to `Prisma.AgencyUpdateArgs`
 */
export type AgencyUpdateArgs = Prisma.AgencyUpdateArgs

/**
 * @deprecated Renamed to `Prisma.AgencyUpdateManyArgs`
 */
export type AgencyUpdateManyArgs = Prisma.AgencyUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.AgencyUpsertArgs`
 */
export type AgencyUpsertArgs = Prisma.AgencyUpsertArgs

/**
 * @deprecated Renamed to `Prisma.AgencyDeleteArgs`
 */
export type AgencyDeleteArgs = Prisma.AgencyDeleteArgs

/**
 * @deprecated Renamed to `Prisma.AgencyDeleteManyArgs`
 */
export type AgencyDeleteManyArgs = Prisma.AgencyDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateVacancy`
 */
export type AggregateVacancy = Prisma.AggregateVacancy

/**
 * @deprecated Renamed to `Prisma.VacancyAvgAggregateOutputType`
 */
export type VacancyAvgAggregateOutputType = Prisma.VacancyAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VacancySumAggregateOutputType`
 */
export type VacancySumAggregateOutputType = Prisma.VacancySumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VacancyMinAggregateOutputType`
 */
export type VacancyMinAggregateOutputType = Prisma.VacancyMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VacancyMaxAggregateOutputType`
 */
export type VacancyMaxAggregateOutputType = Prisma.VacancyMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateVacancyArgs`
 */
export type AggregateVacancyArgs = Prisma.AggregateVacancyArgs

/**
 * @deprecated Renamed to `Prisma.VacancyAvgAggregateInputType`
 */
export type VacancyAvgAggregateInputType = Prisma.VacancyAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VacancySumAggregateInputType`
 */
export type VacancySumAggregateInputType = Prisma.VacancySumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VacancyMinAggregateInputType`
 */
export type VacancyMinAggregateInputType = Prisma.VacancyMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VacancyMaxAggregateInputType`
 */
export type VacancyMaxAggregateInputType = Prisma.VacancyMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VacancySelect`
 */
export type VacancySelect = Prisma.VacancySelect

/**
 * @deprecated Renamed to `Prisma.VacancyInclude`
 */
export type VacancyInclude = Prisma.VacancyInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueVacancyArgs`
 */
export type FindUniqueVacancyArgs = Prisma.FindUniqueVacancyArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstVacancyArgs`
 */
export type FindFirstVacancyArgs = Prisma.FindFirstVacancyArgs

/**
 * @deprecated Renamed to `Prisma.FindManyVacancyArgs`
 */
export type FindManyVacancyArgs = Prisma.FindManyVacancyArgs

/**
 * @deprecated Renamed to `Prisma.VacancyCreateArgs`
 */
export type VacancyCreateArgs = Prisma.VacancyCreateArgs

/**
 * @deprecated Renamed to `Prisma.VacancyUpdateArgs`
 */
export type VacancyUpdateArgs = Prisma.VacancyUpdateArgs

/**
 * @deprecated Renamed to `Prisma.VacancyUpdateManyArgs`
 */
export type VacancyUpdateManyArgs = Prisma.VacancyUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.VacancyUpsertArgs`
 */
export type VacancyUpsertArgs = Prisma.VacancyUpsertArgs

/**
 * @deprecated Renamed to `Prisma.VacancyDeleteArgs`
 */
export type VacancyDeleteArgs = Prisma.VacancyDeleteArgs

/**
 * @deprecated Renamed to `Prisma.VacancyDeleteManyArgs`
 */
export type VacancyDeleteManyArgs = Prisma.VacancyDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.ProfileWhereInput`
 */
export type ProfileWhereInput = Prisma.ProfileWhereInput

/**
 * @deprecated Renamed to `Prisma.ProfileOrderByInput`
 */
export type ProfileOrderByInput = Prisma.ProfileOrderByInput

/**
 * @deprecated Renamed to `Prisma.ProfileWhereUniqueInput`
 */
export type ProfileWhereUniqueInput = Prisma.ProfileWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.UserWhereInput`
 */
export type UserWhereInput = Prisma.UserWhereInput

/**
 * @deprecated Renamed to `Prisma.UserOrderByInput`
 */
export type UserOrderByInput = Prisma.UserOrderByInput

/**
 * @deprecated Renamed to `Prisma.UserWhereUniqueInput`
 */
export type UserWhereUniqueInput = Prisma.UserWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.AddressWhereInput`
 */
export type AddressWhereInput = Prisma.AddressWhereInput

/**
 * @deprecated Renamed to `Prisma.AddressOrderByInput`
 */
export type AddressOrderByInput = Prisma.AddressOrderByInput

/**
 * @deprecated Renamed to `Prisma.AddressWhereUniqueInput`
 */
export type AddressWhereUniqueInput = Prisma.AddressWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.ContactWhereInput`
 */
export type ContactWhereInput = Prisma.ContactWhereInput

/**
 * @deprecated Renamed to `Prisma.ContactOrderByInput`
 */
export type ContactOrderByInput = Prisma.ContactOrderByInput

/**
 * @deprecated Renamed to `Prisma.ContactWhereUniqueInput`
 */
export type ContactWhereUniqueInput = Prisma.ContactWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.AcademicDataWhereInput`
 */
export type AcademicDataWhereInput = Prisma.AcademicDataWhereInput

/**
 * @deprecated Renamed to `Prisma.AcademicDataOrderByInput`
 */
export type AcademicDataOrderByInput = Prisma.AcademicDataOrderByInput

/**
 * @deprecated Renamed to `Prisma.AcademicDataWhereUniqueInput`
 */
export type AcademicDataWhereUniqueInput = Prisma.AcademicDataWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.ExperiencesWhereInput`
 */
export type ExperiencesWhereInput = Prisma.ExperiencesWhereInput

/**
 * @deprecated Renamed to `Prisma.ExperiencesOrderByInput`
 */
export type ExperiencesOrderByInput = Prisma.ExperiencesOrderByInput

/**
 * @deprecated Renamed to `Prisma.ExperiencesWhereUniqueInput`
 */
export type ExperiencesWhereUniqueInput = Prisma.ExperiencesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.CurriculumWhereInput`
 */
export type CurriculumWhereInput = Prisma.CurriculumWhereInput

/**
 * @deprecated Renamed to `Prisma.CurriculumOrderByInput`
 */
export type CurriculumOrderByInput = Prisma.CurriculumOrderByInput

/**
 * @deprecated Renamed to `Prisma.CurriculumWhereUniqueInput`
 */
export type CurriculumWhereUniqueInput = Prisma.CurriculumWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.CompanyWhereInput`
 */
export type CompanyWhereInput = Prisma.CompanyWhereInput

/**
 * @deprecated Renamed to `Prisma.CompanyOrderByInput`
 */
export type CompanyOrderByInput = Prisma.CompanyOrderByInput

/**
 * @deprecated Renamed to `Prisma.CompanyWhereUniqueInput`
 */
export type CompanyWhereUniqueInput = Prisma.CompanyWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.AgencyWhereInput`
 */
export type AgencyWhereInput = Prisma.AgencyWhereInput

/**
 * @deprecated Renamed to `Prisma.AgencyOrderByInput`
 */
export type AgencyOrderByInput = Prisma.AgencyOrderByInput

/**
 * @deprecated Renamed to `Prisma.AgencyWhereUniqueInput`
 */
export type AgencyWhereUniqueInput = Prisma.AgencyWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.VacancyWhereInput`
 */
export type VacancyWhereInput = Prisma.VacancyWhereInput

/**
 * @deprecated Renamed to `Prisma.VacancyOrderByInput`
 */
export type VacancyOrderByInput = Prisma.VacancyOrderByInput

/**
 * @deprecated Renamed to `Prisma.VacancyWhereUniqueInput`
 */
export type VacancyWhereUniqueInput = Prisma.VacancyWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.ProfileCreateInput`
 */
export type ProfileCreateInput = Prisma.ProfileCreateInput

/**
 * @deprecated Renamed to `Prisma.ProfileUpdateInput`
 */
export type ProfileUpdateInput = Prisma.ProfileUpdateInput

/**
 * @deprecated Renamed to `Prisma.ProfileUpdateManyMutationInput`
 */
export type ProfileUpdateManyMutationInput = Prisma.ProfileUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.UserCreateInput`
 */
export type UserCreateInput = Prisma.UserCreateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateInput`
 */
export type UserUpdateInput = Prisma.UserUpdateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyMutationInput`
 */
export type UserUpdateManyMutationInput = Prisma.UserUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.AddressCreateInput`
 */
export type AddressCreateInput = Prisma.AddressCreateInput

/**
 * @deprecated Renamed to `Prisma.AddressUpdateInput`
 */
export type AddressUpdateInput = Prisma.AddressUpdateInput

/**
 * @deprecated Renamed to `Prisma.AddressUpdateManyMutationInput`
 */
export type AddressUpdateManyMutationInput = Prisma.AddressUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.ContactCreateInput`
 */
export type ContactCreateInput = Prisma.ContactCreateInput

/**
 * @deprecated Renamed to `Prisma.ContactUpdateInput`
 */
export type ContactUpdateInput = Prisma.ContactUpdateInput

/**
 * @deprecated Renamed to `Prisma.ContactUpdateManyMutationInput`
 */
export type ContactUpdateManyMutationInput = Prisma.ContactUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.AcademicDataCreateInput`
 */
export type AcademicDataCreateInput = Prisma.AcademicDataCreateInput

/**
 * @deprecated Renamed to `Prisma.AcademicDataUpdateInput`
 */
export type AcademicDataUpdateInput = Prisma.AcademicDataUpdateInput

/**
 * @deprecated Renamed to `Prisma.AcademicDataUpdateManyMutationInput`
 */
export type AcademicDataUpdateManyMutationInput = Prisma.AcademicDataUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.ExperiencesCreateInput`
 */
export type ExperiencesCreateInput = Prisma.ExperiencesCreateInput

/**
 * @deprecated Renamed to `Prisma.ExperiencesUpdateInput`
 */
export type ExperiencesUpdateInput = Prisma.ExperiencesUpdateInput

/**
 * @deprecated Renamed to `Prisma.ExperiencesUpdateManyMutationInput`
 */
export type ExperiencesUpdateManyMutationInput = Prisma.ExperiencesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.CurriculumCreateInput`
 */
export type CurriculumCreateInput = Prisma.CurriculumCreateInput

/**
 * @deprecated Renamed to `Prisma.CurriculumUpdateInput`
 */
export type CurriculumUpdateInput = Prisma.CurriculumUpdateInput

/**
 * @deprecated Renamed to `Prisma.CurriculumUpdateManyMutationInput`
 */
export type CurriculumUpdateManyMutationInput = Prisma.CurriculumUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.CompanyCreateInput`
 */
export type CompanyCreateInput = Prisma.CompanyCreateInput

/**
 * @deprecated Renamed to `Prisma.CompanyUpdateInput`
 */
export type CompanyUpdateInput = Prisma.CompanyUpdateInput

/**
 * @deprecated Renamed to `Prisma.CompanyUpdateManyMutationInput`
 */
export type CompanyUpdateManyMutationInput = Prisma.CompanyUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.AgencyCreateInput`
 */
export type AgencyCreateInput = Prisma.AgencyCreateInput

/**
 * @deprecated Renamed to `Prisma.AgencyUpdateInput`
 */
export type AgencyUpdateInput = Prisma.AgencyUpdateInput

/**
 * @deprecated Renamed to `Prisma.AgencyUpdateManyMutationInput`
 */
export type AgencyUpdateManyMutationInput = Prisma.AgencyUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.VacancyCreateInput`
 */
export type VacancyCreateInput = Prisma.VacancyCreateInput

/**
 * @deprecated Renamed to `Prisma.VacancyUpdateInput`
 */
export type VacancyUpdateInput = Prisma.VacancyUpdateInput

/**
 * @deprecated Renamed to `Prisma.VacancyUpdateManyMutationInput`
 */
export type VacancyUpdateManyMutationInput = Prisma.VacancyUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.StringNullableFilter`
 */
export type StringNullableFilter = Prisma.StringNullableFilter

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.UserRelationFilter`
 */
export type UserRelationFilter = Prisma.UserRelationFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeFilter`
 */
export type DateTimeFilter = Prisma.DateTimeFilter

/**
 * @deprecated Renamed to `Prisma.BoolFilter`
 */
export type BoolFilter = Prisma.BoolFilter

/**
 * @deprecated Renamed to `Prisma.EnumRoleFilter`
 */
export type EnumRoleFilter = Prisma.EnumRoleFilter

/**
 * @deprecated Renamed to `Prisma.EnumGenderFilter`
 */
export type EnumGenderFilter = Prisma.EnumGenderFilter

/**
 * @deprecated Renamed to `Prisma.AddressRelationFilter`
 */
export type AddressRelationFilter = Prisma.AddressRelationFilter

/**
 * @deprecated Renamed to `Prisma.ContactRelationFilter`
 */
export type ContactRelationFilter = Prisma.ContactRelationFilter

/**
 * @deprecated Renamed to `Prisma.CurriculumRelationFilter`
 */
export type CurriculumRelationFilter = Prisma.CurriculumRelationFilter

/**
 * @deprecated Renamed to `Prisma.ProfileRelationFilter`
 */
export type ProfileRelationFilter = Prisma.ProfileRelationFilter

/**
 * @deprecated Renamed to `Prisma.VacancyListRelationFilter`
 */
export type VacancyListRelationFilter = Prisma.VacancyListRelationFilter

/**
 * @deprecated Renamed to `Prisma.FloatNullableFilter`
 */
export type FloatNullableFilter = Prisma.FloatNullableFilter

/**
 * @deprecated Renamed to `Prisma.AcademicDataRelationFilter`
 */
export type AcademicDataRelationFilter = Prisma.AcademicDataRelationFilter

/**
 * @deprecated Renamed to `Prisma.ExperiencesRelationFilter`
 */
export type ExperiencesRelationFilter = Prisma.ExperiencesRelationFilter

/**
 * @deprecated Renamed to `Prisma.StringNullableListFilter`
 */
export type StringNullableListFilter = Prisma.StringNullableListFilter

/**
 * @deprecated Renamed to `Prisma.UserListRelationFilter`
 */
export type UserListRelationFilter = Prisma.UserListRelationFilter

/**
 * @deprecated Renamed to `Prisma.BoolNullableFilter`
 */
export type BoolNullableFilter = Prisma.BoolNullableFilter

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutProfileInput`
 */
export type UserCreateOneWithoutProfileInput = Prisma.UserCreateOneWithoutProfileInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableStringFieldUpdateOperationsInput`
 */
export type NullableStringFieldUpdateOperationsInput = Prisma.NullableStringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.DateTimeFieldUpdateOperationsInput`
 */
export type DateTimeFieldUpdateOperationsInput = Prisma.DateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneRequiredWithoutProfileInput`
 */
export type UserUpdateOneRequiredWithoutProfileInput = Prisma.UserUpdateOneRequiredWithoutProfileInput

/**
 * @deprecated Renamed to `Prisma.AddressCreateOneWithoutUserInput`
 */
export type AddressCreateOneWithoutUserInput = Prisma.AddressCreateOneWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ContactCreateOneWithoutUserInput`
 */
export type ContactCreateOneWithoutUserInput = Prisma.ContactCreateOneWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CurriculumCreateOneWithoutUserInput`
 */
export type CurriculumCreateOneWithoutUserInput = Prisma.CurriculumCreateOneWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ProfileCreateOneWithoutUserInput`
 */
export type ProfileCreateOneWithoutUserInput = Prisma.ProfileCreateOneWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.VacancyCreateManyWithoutInterestedInput`
 */
export type VacancyCreateManyWithoutInterestedInput = Prisma.VacancyCreateManyWithoutInterestedInput

/**
 * @deprecated Renamed to `Prisma.BoolFieldUpdateOperationsInput`
 */
export type BoolFieldUpdateOperationsInput = Prisma.BoolFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.EnumRoleFieldUpdateOperationsInput`
 */
export type EnumRoleFieldUpdateOperationsInput = Prisma.EnumRoleFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.EnumGenderFieldUpdateOperationsInput`
 */
export type EnumGenderFieldUpdateOperationsInput = Prisma.EnumGenderFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.AddressUpdateOneWithoutUserInput`
 */
export type AddressUpdateOneWithoutUserInput = Prisma.AddressUpdateOneWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ContactUpdateOneWithoutUserInput`
 */
export type ContactUpdateOneWithoutUserInput = Prisma.ContactUpdateOneWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CurriculumUpdateOneWithoutUserInput`
 */
export type CurriculumUpdateOneWithoutUserInput = Prisma.CurriculumUpdateOneWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ProfileUpdateOneWithoutUserInput`
 */
export type ProfileUpdateOneWithoutUserInput = Prisma.ProfileUpdateOneWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.VacancyUpdateManyWithoutInterestedInput`
 */
export type VacancyUpdateManyWithoutInterestedInput = Prisma.VacancyUpdateManyWithoutInterestedInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutAddressInput`
 */
export type UserCreateOneWithoutAddressInput = Prisma.UserCreateOneWithoutAddressInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneRequiredWithoutAddressInput`
 */
export type UserUpdateOneRequiredWithoutAddressInput = Prisma.UserUpdateOneRequiredWithoutAddressInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutContactInput`
 */
export type UserCreateOneWithoutContactInput = Prisma.UserCreateOneWithoutContactInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneRequiredWithoutContactInput`
 */
export type UserUpdateOneRequiredWithoutContactInput = Prisma.UserUpdateOneRequiredWithoutContactInput

/**
 * @deprecated Renamed to `Prisma.CurriculumCreateOneWithoutAcademicdataInput`
 */
export type CurriculumCreateOneWithoutAcademicdataInput = Prisma.CurriculumCreateOneWithoutAcademicdataInput

/**
 * @deprecated Renamed to `Prisma.CurriculumUpdateOneWithoutAcademicdataInput`
 */
export type CurriculumUpdateOneWithoutAcademicdataInput = Prisma.CurriculumUpdateOneWithoutAcademicdataInput

/**
 * @deprecated Renamed to `Prisma.CurriculumCreateOneWithoutExperiencesInput`
 */
export type CurriculumCreateOneWithoutExperiencesInput = Prisma.CurriculumCreateOneWithoutExperiencesInput

/**
 * @deprecated Renamed to `Prisma.CurriculumUpdateOneWithoutExperiencesInput`
 */
export type CurriculumUpdateOneWithoutExperiencesInput = Prisma.CurriculumUpdateOneWithoutExperiencesInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutCurriculumInput`
 */
export type UserCreateOneWithoutCurriculumInput = Prisma.UserCreateOneWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.AcademicDataCreateOneWithoutCurriculumInput`
 */
export type AcademicDataCreateOneWithoutCurriculumInput = Prisma.AcademicDataCreateOneWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.ExperiencesCreateOneWithoutCurriculumInput`
 */
export type ExperiencesCreateOneWithoutCurriculumInput = Prisma.ExperiencesCreateOneWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.NullableFloatFieldUpdateOperationsInput`
 */
export type NullableFloatFieldUpdateOperationsInput = Prisma.NullableFloatFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneRequiredWithoutCurriculumInput`
 */
export type UserUpdateOneRequiredWithoutCurriculumInput = Prisma.UserUpdateOneRequiredWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.AcademicDataUpdateOneWithoutCurriculumInput`
 */
export type AcademicDataUpdateOneWithoutCurriculumInput = Prisma.AcademicDataUpdateOneWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.ExperiencesUpdateOneWithoutCurriculumInput`
 */
export type ExperiencesUpdateOneWithoutCurriculumInput = Prisma.ExperiencesUpdateOneWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.CompanyCreatelinksInput`
 */
export type CompanyCreatelinksInput = Prisma.CompanyCreatelinksInput

/**
 * @deprecated Renamed to `Prisma.CompanyCreatelabellinksInput`
 */
export type CompanyCreatelabellinksInput = Prisma.CompanyCreatelabellinksInput

/**
 * @deprecated Renamed to `Prisma.CompanyUpdatelinksInput`
 */
export type CompanyUpdatelinksInput = Prisma.CompanyUpdatelinksInput

/**
 * @deprecated Renamed to `Prisma.CompanyUpdatelabellinksInput`
 */
export type CompanyUpdatelabellinksInput = Prisma.CompanyUpdatelabellinksInput

/**
 * @deprecated Renamed to `Prisma.AgencyCreatelinksInput`
 */
export type AgencyCreatelinksInput = Prisma.AgencyCreatelinksInput

/**
 * @deprecated Renamed to `Prisma.AgencyCreatelabellinksInput`
 */
export type AgencyCreatelabellinksInput = Prisma.AgencyCreatelabellinksInput

/**
 * @deprecated Renamed to `Prisma.AgencyUpdatelinksInput`
 */
export type AgencyUpdatelinksInput = Prisma.AgencyUpdatelinksInput

/**
 * @deprecated Renamed to `Prisma.AgencyUpdatelabellinksInput`
 */
export type AgencyUpdatelabellinksInput = Prisma.AgencyUpdatelabellinksInput

/**
 * @deprecated Renamed to `Prisma.UserCreateManyWithoutVacancyInput`
 */
export type UserCreateManyWithoutVacancyInput = Prisma.UserCreateManyWithoutVacancyInput

/**
 * @deprecated Renamed to `Prisma.IntFieldUpdateOperationsInput`
 */
export type IntFieldUpdateOperationsInput = Prisma.IntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableBoolFieldUpdateOperationsInput`
 */
export type NullableBoolFieldUpdateOperationsInput = Prisma.NullableBoolFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyWithoutVacancyInput`
 */
export type UserUpdateManyWithoutVacancyInput = Prisma.UserUpdateManyWithoutVacancyInput

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringNullableFilter`
 */
export type NestedStringNullableFilter = Prisma.NestedStringNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeFilter`
 */
export type NestedDateTimeFilter = Prisma.NestedDateTimeFilter

/**
 * @deprecated Renamed to `Prisma.NestedBoolFilter`
 */
export type NestedBoolFilter = Prisma.NestedBoolFilter

/**
 * @deprecated Renamed to `Prisma.NestedEnumRoleFilter`
 */
export type NestedEnumRoleFilter = Prisma.NestedEnumRoleFilter

/**
 * @deprecated Renamed to `Prisma.NestedEnumGenderFilter`
 */
export type NestedEnumGenderFilter = Prisma.NestedEnumGenderFilter

/**
 * @deprecated Renamed to `Prisma.NestedFloatNullableFilter`
 */
export type NestedFloatNullableFilter = Prisma.NestedFloatNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedBoolNullableFilter`
 */
export type NestedBoolNullableFilter = Prisma.NestedBoolNullableFilter

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutProfileInput`
 */
export type UserCreateWithoutProfileInput = Prisma.UserCreateWithoutProfileInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutProfileInput`
 */
export type UserCreateOrConnectWithoutProfileInput = Prisma.UserCreateOrConnectWithoutProfileInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutProfileInput`
 */
export type UserUpdateWithoutProfileInput = Prisma.UserUpdateWithoutProfileInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutProfileInput`
 */
export type UserUpsertWithoutProfileInput = Prisma.UserUpsertWithoutProfileInput

/**
 * @deprecated Renamed to `Prisma.AddressCreateWithoutUserInput`
 */
export type AddressCreateWithoutUserInput = Prisma.AddressCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.AddressCreateOrConnectWithoutUserInput`
 */
export type AddressCreateOrConnectWithoutUserInput = Prisma.AddressCreateOrConnectWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ContactCreateWithoutUserInput`
 */
export type ContactCreateWithoutUserInput = Prisma.ContactCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ContactCreateOrConnectWithoutUserInput`
 */
export type ContactCreateOrConnectWithoutUserInput = Prisma.ContactCreateOrConnectWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CurriculumCreateWithoutUserInput`
 */
export type CurriculumCreateWithoutUserInput = Prisma.CurriculumCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CurriculumCreateOrConnectWithoutUserInput`
 */
export type CurriculumCreateOrConnectWithoutUserInput = Prisma.CurriculumCreateOrConnectWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ProfileCreateWithoutUserInput`
 */
export type ProfileCreateWithoutUserInput = Prisma.ProfileCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ProfileCreateOrConnectWithoutUserInput`
 */
export type ProfileCreateOrConnectWithoutUserInput = Prisma.ProfileCreateOrConnectWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.VacancyCreateWithoutInterestedInput`
 */
export type VacancyCreateWithoutInterestedInput = Prisma.VacancyCreateWithoutInterestedInput

/**
 * @deprecated Renamed to `Prisma.VacancyCreateOrConnectWithoutInterestedInput`
 */
export type VacancyCreateOrConnectWithoutInterestedInput = Prisma.VacancyCreateOrConnectWithoutInterestedInput

/**
 * @deprecated Renamed to `Prisma.AddressUpdateWithoutUserInput`
 */
export type AddressUpdateWithoutUserInput = Prisma.AddressUpdateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.AddressUpsertWithoutUserInput`
 */
export type AddressUpsertWithoutUserInput = Prisma.AddressUpsertWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ContactUpdateWithoutUserInput`
 */
export type ContactUpdateWithoutUserInput = Prisma.ContactUpdateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ContactUpsertWithoutUserInput`
 */
export type ContactUpsertWithoutUserInput = Prisma.ContactUpsertWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CurriculumUpdateWithoutUserInput`
 */
export type CurriculumUpdateWithoutUserInput = Prisma.CurriculumUpdateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CurriculumUpsertWithoutUserInput`
 */
export type CurriculumUpsertWithoutUserInput = Prisma.CurriculumUpsertWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ProfileUpdateWithoutUserInput`
 */
export type ProfileUpdateWithoutUserInput = Prisma.ProfileUpdateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ProfileUpsertWithoutUserInput`
 */
export type ProfileUpsertWithoutUserInput = Prisma.ProfileUpsertWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.VacancyUpdateWithWhereUniqueWithoutInterestedInput`
 */
export type VacancyUpdateWithWhereUniqueWithoutInterestedInput = Prisma.VacancyUpdateWithWhereUniqueWithoutInterestedInput

/**
 * @deprecated Renamed to `Prisma.VacancyUpdateManyWithWhereWithoutInterestedInput`
 */
export type VacancyUpdateManyWithWhereWithoutInterestedInput = Prisma.VacancyUpdateManyWithWhereWithoutInterestedInput

/**
 * @deprecated Renamed to `Prisma.VacancyScalarWhereInput`
 */
export type VacancyScalarWhereInput = Prisma.VacancyScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.VacancyUpsertWithWhereUniqueWithoutInterestedInput`
 */
export type VacancyUpsertWithWhereUniqueWithoutInterestedInput = Prisma.VacancyUpsertWithWhereUniqueWithoutInterestedInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutAddressInput`
 */
export type UserCreateWithoutAddressInput = Prisma.UserCreateWithoutAddressInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutAddressInput`
 */
export type UserCreateOrConnectWithoutAddressInput = Prisma.UserCreateOrConnectWithoutAddressInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutAddressInput`
 */
export type UserUpdateWithoutAddressInput = Prisma.UserUpdateWithoutAddressInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutAddressInput`
 */
export type UserUpsertWithoutAddressInput = Prisma.UserUpsertWithoutAddressInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutContactInput`
 */
export type UserCreateWithoutContactInput = Prisma.UserCreateWithoutContactInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutContactInput`
 */
export type UserCreateOrConnectWithoutContactInput = Prisma.UserCreateOrConnectWithoutContactInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutContactInput`
 */
export type UserUpdateWithoutContactInput = Prisma.UserUpdateWithoutContactInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutContactInput`
 */
export type UserUpsertWithoutContactInput = Prisma.UserUpsertWithoutContactInput

/**
 * @deprecated Renamed to `Prisma.CurriculumCreateWithoutAcademicdataInput`
 */
export type CurriculumCreateWithoutAcademicdataInput = Prisma.CurriculumCreateWithoutAcademicdataInput

/**
 * @deprecated Renamed to `Prisma.CurriculumCreateOrConnectWithoutacademicdataInput`
 */
export type CurriculumCreateOrConnectWithoutacademicdataInput = Prisma.CurriculumCreateOrConnectWithoutacademicdataInput

/**
 * @deprecated Renamed to `Prisma.CurriculumUpdateWithoutAcademicdataInput`
 */
export type CurriculumUpdateWithoutAcademicdataInput = Prisma.CurriculumUpdateWithoutAcademicdataInput

/**
 * @deprecated Renamed to `Prisma.CurriculumUpsertWithoutAcademicdataInput`
 */
export type CurriculumUpsertWithoutAcademicdataInput = Prisma.CurriculumUpsertWithoutAcademicdataInput

/**
 * @deprecated Renamed to `Prisma.CurriculumCreateWithoutExperiencesInput`
 */
export type CurriculumCreateWithoutExperiencesInput = Prisma.CurriculumCreateWithoutExperiencesInput

/**
 * @deprecated Renamed to `Prisma.CurriculumCreateOrConnectWithoutexperiencesInput`
 */
export type CurriculumCreateOrConnectWithoutexperiencesInput = Prisma.CurriculumCreateOrConnectWithoutexperiencesInput

/**
 * @deprecated Renamed to `Prisma.CurriculumUpdateWithoutExperiencesInput`
 */
export type CurriculumUpdateWithoutExperiencesInput = Prisma.CurriculumUpdateWithoutExperiencesInput

/**
 * @deprecated Renamed to `Prisma.CurriculumUpsertWithoutExperiencesInput`
 */
export type CurriculumUpsertWithoutExperiencesInput = Prisma.CurriculumUpsertWithoutExperiencesInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutCurriculumInput`
 */
export type UserCreateWithoutCurriculumInput = Prisma.UserCreateWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutCurriculumInput`
 */
export type UserCreateOrConnectWithoutCurriculumInput = Prisma.UserCreateOrConnectWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.AcademicDataCreateWithoutCurriculumInput`
 */
export type AcademicDataCreateWithoutCurriculumInput = Prisma.AcademicDataCreateWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.AcademicDataCreateOrConnectWithoutCurriculumInput`
 */
export type AcademicDataCreateOrConnectWithoutCurriculumInput = Prisma.AcademicDataCreateOrConnectWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.ExperiencesCreateWithoutCurriculumInput`
 */
export type ExperiencesCreateWithoutCurriculumInput = Prisma.ExperiencesCreateWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.ExperiencesCreateOrConnectWithoutCurriculumInput`
 */
export type ExperiencesCreateOrConnectWithoutCurriculumInput = Prisma.ExperiencesCreateOrConnectWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutCurriculumInput`
 */
export type UserUpdateWithoutCurriculumInput = Prisma.UserUpdateWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutCurriculumInput`
 */
export type UserUpsertWithoutCurriculumInput = Prisma.UserUpsertWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.AcademicDataUpdateWithoutCurriculumInput`
 */
export type AcademicDataUpdateWithoutCurriculumInput = Prisma.AcademicDataUpdateWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.AcademicDataUpsertWithoutCurriculumInput`
 */
export type AcademicDataUpsertWithoutCurriculumInput = Prisma.AcademicDataUpsertWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.ExperiencesUpdateWithoutCurriculumInput`
 */
export type ExperiencesUpdateWithoutCurriculumInput = Prisma.ExperiencesUpdateWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.ExperiencesUpsertWithoutCurriculumInput`
 */
export type ExperiencesUpsertWithoutCurriculumInput = Prisma.ExperiencesUpsertWithoutCurriculumInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutVacancyInput`
 */
export type UserCreateWithoutVacancyInput = Prisma.UserCreateWithoutVacancyInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutVacancyInput`
 */
export type UserCreateOrConnectWithoutVacancyInput = Prisma.UserCreateOrConnectWithoutVacancyInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithWhereUniqueWithoutVacancyInput`
 */
export type UserUpdateWithWhereUniqueWithoutVacancyInput = Prisma.UserUpdateWithWhereUniqueWithoutVacancyInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyWithWhereWithoutVacancyInput`
 */
export type UserUpdateManyWithWhereWithoutVacancyInput = Prisma.UserUpdateManyWithWhereWithoutVacancyInput

/**
 * @deprecated Renamed to `Prisma.UserScalarWhereInput`
 */
export type UserScalarWhereInput = Prisma.UserScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithWhereUniqueWithoutVacancyInput`
 */
export type UserUpsertWithWhereUniqueWithoutVacancyInput = Prisma.UserUpsertWithWhereUniqueWithoutVacancyInput

/**
 * @deprecated Renamed to `Prisma.VacancyUpdateWithoutInterestedInput`
 */
export type VacancyUpdateWithoutInterestedInput = Prisma.VacancyUpdateWithoutInterestedInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutVacancyInput`
 */
export type UserUpdateWithoutVacancyInput = Prisma.UserUpdateWithoutVacancyInput